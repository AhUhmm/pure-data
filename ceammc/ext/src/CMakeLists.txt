add_library(ceammc_static STATIC ceammc.c)
set_target_properties(ceammc_static PROPERTIES
    COMPILE_FLAGS ${PD_EXTERNAL_CFLAGS})

add_custom_target(ceammc_generate_math
    COMMAND ${CMAKE_SOURCE_DIR}/ceammc/py/generate_math.py
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
    
macro(ceammc_extension module name ext)
    pd_add_extension(NAME "${module}.${name}" 
        FILES "${module}_${name}.${ext}"
        INTERNAL True
        LIBRARY ceammc
        LINK ceammc_static)
endmacro()    
    
macro(ceammc_c_extension module name)
    ceammc_extension(${module} ${name} c)
endmacro()

macro(ceammc_cxx_extension module name)
    ceammc_extension(${module} ${name} cpp)
endmacro()


###############################
# MATH
###############################
# begin autogenerated
ceammc_c_extension(math abs)
ceammc_c_extension(math acos)
ceammc_c_extension(math acosh)
ceammc_c_extension(math asin)
ceammc_c_extension(math asinh)
ceammc_c_extension(math atan)
ceammc_c_extension(math atanh)
ceammc_c_extension(math cbrt)
ceammc_c_extension(math ceil)
ceammc_c_extension(math cos)
ceammc_c_extension(math cosh)
ceammc_c_extension(math exp)
ceammc_c_extension(math exp2)
ceammc_c_extension(math floor)
ceammc_c_extension(math log)
ceammc_c_extension(math log10)
ceammc_c_extension(math log2)
ceammc_c_extension(math round)
ceammc_c_extension(math sin)
ceammc_c_extension(math sinh)
ceammc_c_extension(math sqrt)
ceammc_c_extension(math tan)
ceammc_c_extension(math tanh)
# end autogenerated
ceammc_c_extension(math pi)
ceammc_c_extension(math e)
ceammc_c_extension(math nan)
ceammc_c_extension(math inf)
ceammc_c_extension(math reciprocal)
ceammc_c_extension(math sign)
ceammc_c_extension(math neg)
ceammc_c_extension(math squared)


###############################
# LIST
###############################
ceammc_cxx_extension(list at)
ceammc_c_extension(list length)
ceammc_cxx_extension(list map)
ceammc_cxx_extension(list max)
ceammc_cxx_extension(list min)
ceammc_cxx_extension(list minmax)
ceammc_c_extension(list product)
ceammc_cxx_extension(list repeat)
ceammc_cxx_extension(list reverse)
ceammc_cxx_extension(list seq)
ceammc_c_extension(list separate)
ceammc_cxx_extension(list shuffle)
ceammc_cxx_extension(list sort)
ceammc_c_extension(list sum)


###############################
# PATH
###############################
#pd_add_extension(NAME path.basename FILES path_basename.cpp INTERNAL True LINK ceammc_static)
#pd_add_extension(NAME path.exists FILES path_exists.cpp INTERNAL True LINK ceammc_static)


include(FindLibSndFile)
if(LIBSNDFILE_FOUND)
    include_directories(${LIBSNDFILE_INCLUDE_DIRS})
#    pd_add_extension(NAME ffmpeg FILES ffmpeg.cpp 
#    INTERNAL True LINK ceammc_static ${LIBSNDFILE_LIBRARIES})
endif()

# we need 1.47.0 for boost random uniform distribution
find_package(Boost 1.47.0)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    pd_add_extension(NAME test.data   FILES test_data.cpp   INTERNAL True LINK ceammc_static)
    pd_add_extension(NAME test.expect FILES test_expect.cpp INTERNAL True LINK ceammc_static)

    ceammc_cxx_extension(random float)
    ceammc_cxx_extension(random int)
    ceammc_cxx_extension(random gauss)
endif()


