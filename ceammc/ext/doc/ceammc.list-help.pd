#N canvas 0 0 630 500 12;
#X obj 20 50 pddp/pddplink ../index-help.pd -text index;
#X text 62 50 ::;
#X obj 79 50 pddp/pddplink ceammc-help.pd -text ceammc;
#X obj 409 50 cnv 1 201 21 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 409 50  objects for list processing ;
#X obj 30 113 list.apply_to;
#X text 175 113 modifies list value at specified position \, filtering
it via external object\.;
#X obj 30 150 list.at;
#X text 175 150 returns list element at given position;
#X obj 30 177 list.choice;
#X text 175 177 returns random element from list;
#X obj 30 204 list.count;
#X text 175 204 returns the number of items that equal to specified
value;
#X obj 30 231 list.count_if;
#X text 175 231 returns the number of items that satisfy to external
predicate\.;
#X obj 30 268 list.deinterleave;
#X text 175 268 splits list to N lists \, each to separate output;
#X obj 30 295 list.delta;
#X text 175 295 returns the difference between the current list of
floats and the previous one\.;
#X obj 30 332 list.each;
#X text 175 332 maps each list value via external object(s);
#X obj 30 359 list.equal;
#X text 175 359 checks if given lists are equal;
#X obj 30 386 list.first;
#X text 175 386 returns first list element;
#X obj 30 413 list.gen;
#X text 175 413 generates list of specified length via external
generator;
#X obj 30 440 list.integrator;
#X text 175 440 returns the sum of the previously stored list and the
current one then stores this sum\.;
#X obj 30 477 list.interleave;
#X text 175 477 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc\.)\.;
#X obj 30 528 list.last;
#X text 175 528 returns last list element;
#X obj 30 555 list.length;
#X text 175 555 returns the number of atoms in the message;
#X obj 30 582 list.max;
#X text 175 582 returns largest element in the list;
#X obj 30 609 list.mean;
#X text 175 609 calculates average of list of floats;
#X obj 30 636 list.min;
#X text 175 636 returns smallest element in the list;
#X obj 30 663 list.normalize;
#X text 175 663 normalizes float list values to get their sum = 1\.0;
#X obj 30 690 list.product;
#X text 175 690 calculates product of floats in list;
#X obj 30 717 list.range;
#X text 175 717 returns list smallest and largest value;
#X obj 30 744 list.reduce;
#X text 175 744 apply function of two arguments cumulatively to the
list;
#X obj 30 771 list.resize;
#X text 175 771 changes list size with;
#X obj 30 798 list.reverse;
#X text 175 798 reverses the order of the elements in the list;
#X obj 30 825 list.seq;
#X text 175 825 numeric sequence list generator;
#X obj 30 852 list.shuffle;
#X text 175 852 randomly rearranges elements in list;
#X obj 30 879 list.sort;
#X text 175 879 sorts list values by ascending order;
#X obj 30 906 list.sum;
#X text 175 906 calculates sum of floats in list;
#X obj 30 933 list.unpack;
#X text 175 933 sends list element one by one separately;
#X obj 30 960 list.unwrap;
#X text 175 960 gets list element on first input and list with count
of each element on a second inlet\.;
#X obj 30 997 list.walk;
#X text 175 997 Walks thru the list;
#X obj 30 1024 list.wrap;
#X text 175 1024 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second\.;
#X obj 1 1 cnv 5 627 40 empty empty ceammc::list 20 20 0 20 -104026
-4096 0;
#X obj 1 1075 cnv 5 627 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 1085 library: ceammc;