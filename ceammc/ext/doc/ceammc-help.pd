#N canvas 0 0 600 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio\. ;
#X obj 20 101 cnv 5 38 19 empty empty data 0 17 0 17 -262144 -49933 0;
#X obj 20 130 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 141 data.fifo;
#X text 150 141 First-In-First-Out (FIFO) queue data container;
#X obj 20 168 cnv 5 28 19 empty empty dyn 0 17 0 17 -262144 -49933 0;
#X obj 20 197 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 208 dyn.comp2~;
#X text 150 208 stereo dynamic range compressor;
#X obj 30 235 dyn.comp~;
#X text 150 235 mono dynamic range compressors;
#X obj 30 262 dyn.gate2~;
#X text 150 262 stereo signal gate;
#X obj 30 289 dyn.gate~;
#X text 150 289 mono signal gate;
#X obj 30 316 dyn.limit2~;
#X text 150 316 stereo 1176LN Peak Limiter;
#X obj 30 343 dyn.limit~;
#X text 150 343 mono 1176LN Peak Limiter;
#X obj 30 370 dyn.softclip~;
#X text 150 370 soft signal clip;
#X obj 20 397 cnv 5 28 19 empty empty env 0 17 0 17 -262144 -49933 0;
#X obj 20 426 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 437 env.adsr~;
#X text 150 437 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 464 env.ar~;
#X text 150 464 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes)\.;
#X obj 30 501 env.follow~;
#X text 150 501 Envelope follower with independent attack and release
times\.;
#X obj 20 538 cnv 5 27 19 empty empty flt 0 17 0 17 -262144 -49933 0;
#X obj 20 567 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 578 flt.dcblock2~;
#X text 150 578 stereo DC blocker;
#X obj 30 605 flt.dcblock~;
#X text 150 605 mono DC blocker;
#X obj 30 632 flt.eq_peak~;
#X text 150 632 second order "peaking equalizer" section (gain boost
or cut near some frequency)\.  Also called a "parametric equalizer"
section\.;
#X obj 30 683 flt.highshelf~;
#X text 150 683 gain boost|cut above some frequency;
#X obj 30 710 flt.lowshelf~;
#X text 150 710 gain boost|cut below some frequency;
#X obj 20 737 cnv 5 18 19 empty empty fx 0 17 0 17 -262144 -49933 0;
#X obj 20 766 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 777 fx.pitchshift~;
#X text 150 777 simple pitch shifter based on 2 delay lines;
#X obj 20 804 cnv 5 59 19 empty empty global 0 17 0 17 -262144 -49933
0;
#X obj 20 833 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 844 global.float;
#X text 150 844 global named float object;
#X obj 30 871 global.int;
#X text 150 871 global named integer object;
#X obj 30 898 global.list;
#X text 150 898 global named list object;
#X obj 20 925 cnv 5 27 19 empty empty lfo 0 17 0 17 -262144 -49933 0;
#X obj 20 954 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 965 lfo.impulse~;
#X text 150 965 Unit-amplitude low-frequency impulse train;
#X obj 30 992 lfo.square~;
#X text 150 992 Positive low frequence square wave;
#X obj 30 1019 lfo.tri~;
#X text 150 1019 Positive unit-amplitude low frequency triangle wave;
#X obj 20 1046 cnv 5 37 19 empty empty list 0 17 0 17 -262144 -49933
0;
#X obj 20 1075 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1086 list.apply_to;
#X text 150 1086 modifies list value at specified position \,
filtering it via external object\.;
#X obj 30 1123 list.at;
#X text 150 1123 returns list element at given position;
#X obj 30 1150 list.choice;
#X text 150 1150 returns random element from list;
#X obj 30 1177 list.count;
#X text 150 1177 returns the number of items that equal to specified
value;
#X obj 30 1204 list.count_if;
#X text 150 1204 returns the number of items that satisfy to external
predicate\.;
#X obj 30 1241 list.deinterleave;
#X text 150 1241 splits list to N lists \, each to separate output;
#X obj 30 1268 list.delta;
#X text 150 1268 returns the difference between the current list of
floats and the previous one\.;
#X obj 30 1305 list.each;
#X text 150 1305 maps each list value via external object(s);
#X obj 30 1332 list.equal;
#X text 150 1332 checks if given lists are equal;
#X obj 30 1359 list.first;
#X text 150 1359 returns first list element;
#X obj 30 1386 list.gen;
#X text 150 1386 generates list of specified length via external
generator;
#X obj 30 1413 list.interleave;
#X text 150 1413 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc\.)\.;
#X obj 30 1464 list.last;
#X text 150 1464 returns last list element;
#X obj 30 1491 list.length;
#X text 150 1491 returns the number of atoms in the message;
#X obj 30 1518 list.max;
#X text 150 1518 returns largest element in the list;
#X obj 30 1545 list.min;
#X text 150 1545 returns smallest element in the list;
#X obj 30 1572 list.normalize;
#X text 150 1572 normalizes float list values to get their sum = 1\.0;
#X obj 30 1599 list.product;
#X text 150 1599 calculates product of floats in list;
#X obj 30 1626 list.range;
#X text 150 1626 returns list smallest and largest value;
#X obj 30 1653 list.reduce;
#X text 150 1653 apply function of two arguments cumulatively to the
list;
#X obj 30 1680 list.resize;
#X text 150 1680 changes list size with;
#X obj 30 1707 list.reverse;
#X text 150 1707 reverses the order of the elements in the list;
#X obj 30 1734 list.shuffle;
#X text 150 1734 randomly rearranges elements in list;
#X obj 30 1761 list.sort;
#X text 150 1761 sorts list values by ascending order;
#X obj 30 1788 list.sum;
#X text 150 1788 calculates sum of floats in list;
#X obj 30 1815 list.walk;
#X text 150 1815 Walks thru the list;
#X obj 30 1842 vector.normalize;
#X text 150 1842 treats list of floats as vector \, divides the vector
by its length (return 0 if length is 0);
#X obj 20 1879 cnv 5 38 19 empty empty live 0 17 0 17 -262144 -49933
0;
#X obj 20 1908 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1919 live.capture~;
#X text 150 1919 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 1956 cnv 5 38 19 empty empty math 0 17 0 17 -262144 -49933
0;
#X obj 20 1985 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1996 math.abs;
#X text 150 1996 absolute value function;
#X obj 30 2023 math.acos;
#X text 150 2023 arc cosine function;
#X obj 30 2050 math.acosh;
#X text 150 2050 inverse hyperbolic cosine function;
#X obj 30 2077 math.asin;
#X text 150 2077 arc sine function;
#X obj 30 2104 math.asinh;
#X text 150 2104 inverse hyperbolic sine function;
#X obj 30 2131 math.atan;
#X text 150 2131 arc tangent function;
#X obj 30 2158 math.atanh;
#X text 150 2158 inverse hyperbolic tangent function;
#X obj 30 2185 math.cbrt;
#X text 150 2185 cube root function;
#X obj 30 2212 math.ceil;
#X text 150 2212 round to smallest integral value not less than input
value;
#X obj 30 2239 math.cos;
#X text 150 2239 cosine function;
#X obj 30 2266 math.cosh;
#X text 150 2266 hyperbolic cosine function;
#X obj 30 2293 math.e;
#X text 150 2293 mathematical constant \, base of the natural
logarithm;
#X obj 30 2320 math.exp;
#X text 150 2320 exponential functions;
#X obj 30 2347 math.exp2;
#X text 150 2347 exponential functions;
#X obj 30 2374 math.floor;
#X text 150 2374 round to largest integral value not greater than x;
#X obj 30 2401 math.inf;
#X text 150 2401 infinity value that cannot be represented accurately;
#X obj 30 2428 math.log;
#X text 150 2428 logarithm functions;
#X obj 30 2455 math.log10;
#X text 150 2455 logarithm functions;
#X obj 30 2482 math.log2;
#X text 150 2482 logarithm functions;
#X obj 30 2509 math.nan;
#X text 150 2509 Not a Number \, unrepresentable value;
#X obj 30 2536 math.pi;
#X text 150 2536 mathematical constant;
#X obj 30 2563 math.round;
#X text 150 2563 round to integral value \, regardless of rounding
direction;
#X obj 30 2590 math.sin;
#X text 150 2590 sine function;
#X obj 30 2617 math.sinh;
#X text 150 2617 hyperbolic sine function;
#X obj 30 2644 math.sqrt;
#X text 150 2644 square root function;
#X obj 30 2671 math.tan;
#X text 150 2671 tangent function;
#X obj 30 2698 math.tanh;
#X text 150 2698 hyperbolic tangent function;
#X obj 30 2725 math.trunc;
#X text 150 2725 truncate to integer value;
#X obj 20 2752 cnv 5 28 19 empty empty osc 0 17 0 17 -262144 -49933 0;
#X obj 20 2781 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2792 osc.impulse~;
#X text 150 2792 Bandlimited impulse train generator;
#X obj 30 2819 osc.pulse~;
#X text 150 2819 Bandlimited pulse train oscillator\. ;
#X obj 30 2846 osc.saw~;
#X text 150 2846 Bandlimited saw wave oscillator;
#X obj 30 2873 osc.sinfb~;
#X text 150 2873 sine oscilator with feedback;
#X obj 30 2900 osc.square~;
#X text 150 2900 Bandlimited square wave oscillator;
#X obj 30 2927 osc.tri~;
#X text 150 2927 Bandlimited triangle wave oscillator;
#X obj 20 2954 cnv 5 37 19 empty empty pass 0 17 0 17 -262144 -49933
0;
#X obj 20 2983 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2994 pass.changed;
#X text 150 2994 rejects redundant input values;
#X obj 30 3021 pass.if;
#X text 150 3021 pass values that accepted by predicate object;
#X obj 20 3048 cnv 5 99 19 empty empty predicates 0 17 0 17 -262144
-49933 0;
#X obj 20 3077 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3088 is_any;
#X text 150 3088 checks if input data has *any* type;
#X obj 30 3115 is_bang;
#X text 150 3115 checks if input data has *bang* type;
#X obj 30 3142 is_even;
#X text 150 3142 checks if input number is even;
#X obj 30 3169 is_float;
#X text 150 3169 checks if input data has *float* type;
#X obj 30 3196 is_list;
#X text 150 3196 checks if input data has *list* type;
#X obj 30 3223 is_odd;
#X text 150 3223 checks if input number is odd;
#X obj 30 3250 is_pointer;
#X text 150 3250 checks if input data has *pointer* type;
#X obj 30 3277 is_symbol;
#X text 150 3277 checks if input data has *symbol* type;
#X obj 20 3304 cnv 5 58 19 empty empty system 0 17 0 17 -262144 -49933
0;
#X obj 20 3333 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3344 system.memsize;
#X text 150 3344 returns the size of physical memory (RAM) in bytes
round to float data type\.;
#X obj 30 3381 system.memused;
#X text 150 3381 returns the process physical memory use - current and
peak;
#X obj 20 3408 cnv 5 59 19 empty empty vector 0 17 0 17 -262144 -49933
0;
#X obj 20 3437 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3448 vector.dot;
#X text 150 3448 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied)\.;
#X obj 30 3499 vector.length;
#X text 150 3499 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + \.\.\.element(n)^2)\.;
#X obj 1 1 cnv 5 597 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 3536 cnv 5 597 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 3536 version: v0\.1 \, license: GPL3;
#X obj 20 3552 pddp/pddplink https://github.com/uliss/pure-data -text
https://github.com/uliss/pure-data;