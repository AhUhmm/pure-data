#N canvas 0 0 600 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Convervatory
(CEAMMC) and ZIL-electro studio\. ;
#X obj 20 101 cnv 5 28 19 empty empty dyn 0 17 0 17 -262144 -49933 0;
#X obj 20 130 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 141 dyn.comp2~;
#X text 150 141 stereo dynamic range compressor;
#X obj 30 168 dyn.comp~;
#X text 150 168 mono dynamic range compressors;
#X obj 30 195 dyn.gate2~;
#X text 150 195 stereo signal gate;
#X obj 30 222 dyn.gate~;
#X text 150 222 mono signal gate;
#X obj 30 249 dyn.limit2~;
#X text 150 249 stereo 1176LN Peak Limiter;
#X obj 30 276 dyn.limit~;
#X text 150 276 mono 1176LN Peak Limiter;
#X obj 30 303 dyn.softclip~;
#X text 150 303 soft signal clip;
#X obj 20 330 cnv 5 28 19 empty empty env 0 17 0 17 -262144 -49933 0;
#X obj 20 359 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 370 env.adsr~;
#X text 150 370 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 397 env.ar~;
#X text 150 397 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes)\.;
#X obj 30 434 env.follow~;
#X text 150 434 Envelope follower with independent attack and release
times\.;
#X obj 20 471 cnv 5 27 19 empty empty flt 0 17 0 17 -262144 -49933 0;
#X obj 20 500 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 511 flt.dcblock2~;
#X text 150 511 stereo DC blocker;
#X obj 30 538 flt.dcblock~;
#X text 150 538 mono DC blocker;
#X obj 30 565 flt.eq_peak~;
#X text 150 565 second order "peaking equalizer" section (gain boost
or cut near some frequency)\.  Also called a "parametric equalizer"
section\.;
#X obj 30 616 flt.highshelf~;
#X text 150 616 gain boost|cut above some frequency;
#X obj 30 643 flt.lowshelf~;
#X text 150 643 gain boost|cut below some frequency;
#X obj 20 670 cnv 5 18 19 empty empty fx 0 17 0 17 -262144 -49933 0;
#X obj 20 699 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 710 fx.pitchshift~;
#X text 150 710 simple pitch shifter based on 2 delay lines;
#X obj 20 737 cnv 5 27 19 empty empty lfo 0 17 0 17 -262144 -49933 0;
#X obj 20 766 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 777 lfo.impulse~;
#X text 150 777 Unit-amplitude low-frequency impulse train;
#X obj 30 804 lfo.square~;
#X text 150 804 Positive low frequence square wave;
#X obj 30 831 lfo.tri~;
#X text 150 831 Positive unit-amplitude low frequency triangle wave;
#X obj 20 858 cnv 5 37 19 empty empty list 0 17 0 17 -262144 -49933 0;
#X obj 20 887 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 898 list.apply_to;
#X text 150 898 modifies list value at specified position \, filtering
it via external object\.;
#X obj 30 935 list.sort;
#X text 150 935 sorts list values by ascending order;
#X obj 20 962 cnv 5 38 19 empty empty live 0 17 0 17 -262144 -49933 0;
#X obj 20 991 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1002 live.capture~;
#X text 150 1002 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 1039 cnv 5 38 19 empty empty math 0 17 0 17 -262144 -49933
0;
#X obj 20 1068 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1079 math.abs;
#X text 150 1079 absolute value function;
#X obj 30 1106 math.acos;
#X text 150 1106 arc cosine function;
#X obj 30 1133 math.acosh;
#X text 150 1133 inverse hyperbolic cosine function;
#X obj 30 1160 math.asin;
#X text 150 1160 arc sine function;
#X obj 30 1187 math.asinh;
#X text 150 1187 inverse hyperbolic sine function;
#X obj 30 1214 math.atan;
#X text 150 1214 arc tangent function;
#X obj 30 1241 math.atanh;
#X text 150 1241 inverse hyperbolic tangent function;
#X obj 30 1268 math.cbrt;
#X text 150 1268 cube root function;
#X obj 30 1295 math.ceil;
#X text 150 1295 round to smallest integral value not less than input
value;
#X obj 30 1322 math.cos;
#X text 150 1322 cosine function;
#X obj 30 1349 math.cosh;
#X text 150 1349 hyperbolic cosine function;
#X obj 30 1376 math.e;
#X text 150 1376 mathematical constant \, base of the natural
logarithm;
#X obj 30 1403 math.exp;
#X text 150 1403 exponential functions;
#X obj 30 1430 math.exp2;
#X text 150 1430 exponential functions;
#X obj 30 1457 math.floor;
#X text 150 1457 round to largest integral value not greater than x;
#X obj 30 1484 math.inf;
#X text 150 1484 infinity value that cannot be represented accurately;
#X obj 30 1511 math.log;
#X text 150 1511 logarithm functions;
#X obj 30 1538 math.log10;
#X text 150 1538 logarithm functions;
#X obj 30 1565 math.log2;
#X text 150 1565 logarithm functions;
#X obj 30 1592 math.nan;
#X text 150 1592 Not a Number \, unrepresentable value;
#X obj 30 1619 math.pi;
#X text 150 1619 mathematical constant;
#X obj 30 1646 math.round;
#X text 150 1646 round to integral value \, regardless of rounding
direction;
#X obj 30 1673 math.sin;
#X text 150 1673 sine function;
#X obj 30 1700 math.sinh;
#X text 150 1700 hyperbolic sine function;
#X obj 30 1727 math.sqrt;
#X text 150 1727 square root function;
#X obj 30 1754 math.tan;
#X text 150 1754 tangent function;
#X obj 30 1781 math.tanh;
#X text 150 1781 hyperbolic tangent function;
#X obj 30 1808 math.trunc;
#X text 150 1808 truncate to integer value;
#X obj 20 1835 cnv 5 28 19 empty empty osc 0 17 0 17 -262144 -49933 0;
#X obj 20 1864 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1875 osc.impulse~;
#X text 150 1875 Bandlimited impulse train generator;
#X obj 30 1902 osc.pulse~;
#X text 150 1902 Bandlimited pulse train oscillator\. ;
#X obj 30 1929 osc.saw~;
#X text 150 1929 Bandlimited saw wave oscillator;
#X obj 30 1956 osc.sinfb~;
#X text 150 1956 sine oscilator with feedback;
#X obj 30 1983 osc.square~;
#X text 150 1983 Bandlimited square wave oscillator;
#X obj 30 2010 osc.tri~;
#X text 150 2010 Bandlimited triangle wave oscillator;
#X obj 20 2037 cnv 5 99 19 empty empty predicates 0 17 0 17 -262144
-49933 0;
#X obj 20 2066 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2077 is_any;
#X text 150 2077 checks if input data has *any* type;
#X obj 30 2104 is_bang;
#X text 150 2104 checks if input data has *bang* type;
#X obj 30 2131 is_even;
#X text 150 2131 checks if input number is even;
#X obj 30 2158 is_float;
#X text 150 2158 checks if input data has *float* type;
#X obj 30 2185 is_list;
#X text 150 2185 checks if input data has *list* type;
#X obj 30 2212 is_odd;
#X text 150 2212 checks if input number is odd;
#X obj 30 2239 is_pointer;
#X text 150 2239 checks if input data has *pointer* type;
#X obj 30 2266 is_symbol;
#X text 150 2266 checks if input data has *symbol* type;
#X obj 20 2293 cnv 5 58 19 empty empty system 0 17 0 17 -262144 -49933
0;
#X obj 20 2322 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2333 system.memsize;
#X text 150 2333 returns the size of physical memory (RAM) in bytes
round to float data type\.;
#X obj 30 2370 system.memused;
#X text 150 2370 returns the process physical memory use - current and
peak;
#X obj 1 1 cnv 5 597 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 2397 cnv 5 597 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 2397 version: v0\.1 \, license: GPL3;
#X obj 20 2413 pddp/pddplink https://github.com/uliss/pure-data -text
https://github.com/uliss/pure-data;