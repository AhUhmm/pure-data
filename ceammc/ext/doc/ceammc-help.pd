#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio. ;
#X obj 20 101 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 data.fifo;
#X text 175 153 First-In-First-Out (FIFO) queue data container;
#X obj 30 180 data.list;
#X text 175 180 list container;
#X obj 20 207 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 248 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 259 dyn.comp2~;
#X text 175 259 stereo dynamic range compressor;
#X obj 30 286 dyn.comp~;
#X text 175 286 mono dynamic range compressors;
#X obj 30 313 dyn.gate2~;
#X text 175 313 stereo signal gate;
#X obj 30 340 dyn.gate~;
#X text 175 340 mono signal gate;
#X obj 30 367 dyn.limit2~;
#X text 175 367 stereo 1176LN Peak Limiter;
#X obj 30 394 dyn.limit~;
#X text 175 394 mono 1176LN Peak Limiter;
#X obj 30 421 dyn.softclip~;
#X text 175 421 soft signal clip;
#X obj 20 448 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 489 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 500 env.adsr~;
#X text 175 500 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 527 env.ar~;
#X text 175 527 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 564 env.follow~;
#X text 175 564 Envelope follower with independent attack and release
times.;
#X obj 20 601 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933 0;
#X obj 20 642 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 653 replace;
#X text 175 653 Replace atoms in data stream;
#X obj 20 680 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 721 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 732 flt.biquad~;
#X text 175 732 second order IIR filter.;
#X obj 30 759 flt.bpf12~;
#X text 175 759 Band-pass filter with 12/db per octave slope;
#X obj 30 786 flt.bpf24~;
#X text 175 786 Band-pass filter with 24/db per octave slope;
#X obj 30 813 flt.c_bpf~;
#X text 175 813 BPF coefficent calculator for biquad filter;
#X obj 30 840 flt.c_highshelf~;
#X text 175 840 Highshelf filter coefficent calculator for biquad;
#X obj 30 867 flt.c_hpf~;
#X text 175 867 HPF coefficent calculator for biquad filter;
#X obj 30 894 flt.c_lpf~;
#X text 175 894 LPF coefficent calculator for biquad filter;
#X obj 30 921 flt.c_notch~;
#X text 175 921 Band-reject coefficent calculator for biquad filter;
#X obj 30 948 flt.dcblock2~;
#X text 175 948 stereo DC blocker;
#X obj 30 975 flt.dcblock~;
#X text 175 975 mono DC blocker;
#X obj 30 1002 flt.eq_peak~;
#X text 175 1002 second order "peaking equalizer" section (gain boost
or cut near some frequency).  Also called a "parametric equalizer"
section.;
#X obj 30 1053 flt.highshelf~;
#X text 175 1053 gain boost|cut above some frequency;
#X obj 30 1080 flt.hpf12~;
#X text 175 1080 High-pass filter with 12/db per octave slope;
#X obj 30 1107 flt.hpf24~;
#X text 175 1107 High-pass filter with 24/db per octave slope;
#X obj 30 1134 flt.lowshelf~;
#X text 175 1134 gain boost|cut below some frequency;
#X obj 30 1161 flt.lpf12~;
#X text 175 1161 Low-pass filter with 12/db per octave slope;
#X obj 30 1188 flt.lpf24~;
#X text 175 1188 Low-pass filter with 24/db per octave slope;
#X obj 30 1215 flt.notch~;
#X text 175 1215 band-rejection filter;
#X obj 30 1242 flt.resonbp~;
#X text 175 1242 Simple resonant bandpass filter;
#X obj 20 1269 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1310 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1321 fx.freeverb2~;
#X text 175 1321 freeverb2 - stereo version of freeverb;
#X obj 30 1348 fx.freeverb~;
#X text 175 1348 freeverb - common used open-source reverb;
#X obj 30 1375 fx.freqshift~;
#X text 175 1375 frequency shifter or single-sideband ring modulation;
#X obj 30 1402 fx.pitchshift~;
#X text 175 1402 simple pitch shifter based on 2 delay lines;
#X obj 20 1429 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 1470 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1481 global.float;
#X text 175 1481 global named float object;
#X obj 30 1508 global.int;
#X text 175 1508 global named integer object;
#X obj 30 1535 global.list;
#X text 175 1535 global named list object;
#X obj 20 1562 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 1603 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1614 lfo.impulse~;
#X text 175 1614 Unit-amplitude low-frequency impulse train;
#X obj 30 1641 lfo.square~;
#X text 175 1641 Positive low frequence square wave;
#X obj 30 1668 lfo.tri~;
#X text 175 1668 Positive unit-amplitude low frequency triangle wave;
#X obj 20 1695 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 1736 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1747 list.apply_to;
#X text 175 1747 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 1784 list.at;
#X text 175 1784 returns list element at given position;
#X obj 30 1811 list.choice;
#X text 175 1811 returns random element from list;
#X obj 30 1838 list.count;
#X text 175 1838 returns the number of items that equal to specified
value;
#X obj 30 1865 list.count_if;
#X text 175 1865 returns the number of items that satisfy to external
predicate.;
#X obj 30 1902 list.deinterleave;
#X text 175 1902 splits list to N lists \, each to separate output;
#X obj 30 1929 list.delta;
#X text 175 1929 returns the difference between the current list of
floats and the previous one.;
#X obj 30 1966 list.each;
#X text 175 1966 maps each list value via external object(s);
#X obj 30 1993 list.equal;
#X text 175 1993 checks if given lists are equal;
#X obj 30 2020 list.first;
#X text 175 2020 returns first list element;
#X obj 30 2047 list.gen;
#X text 175 2047 generates list of specified length via external
generator;
#X obj 30 2074 list.integrator;
#X text 175 2074 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2111 list.interleave;
#X text 175 2111 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2162 list.last;
#X text 175 2162 returns last list element;
#X obj 30 2189 list.length;
#X text 175 2189 returns the number of atoms in the message;
#X obj 30 2216 list.max;
#X text 175 2216 returns largest element in the list;
#X obj 30 2243 list.mean;
#X text 175 2243 calculates average of list of floats;
#X obj 30 2270 list.min;
#X text 175 2270 returns smallest element in the list;
#X obj 30 2297 list.normalize;
#X text 175 2297 normalizes float list values to get their sum = 1.0;
#X obj 30 2324 list.product;
#X text 175 2324 calculates product of floats in list;
#X obj 30 2351 list.range;
#X text 175 2351 returns list smallest and largest value;
#X obj 30 2378 list.reduce;
#X text 175 2378 apply function of two arguments cumulatively to the
list;
#X obj 30 2405 list.resize;
#X text 175 2405 changes list size with;
#X obj 30 2432 list.reverse;
#X text 175 2432 reverses the order of the elements in the list;
#X obj 30 2459 list.seq;
#X text 175 2459 numeric sequence list generator;
#X obj 30 2486 list.shuffle;
#X text 175 2486 randomly rearranges elements in list;
#X obj 30 2513 list.sort;
#X text 175 2513 sorts list values by ascending order;
#X obj 30 2540 list.sum;
#X text 175 2540 calculates sum of floats in list;
#X obj 30 2567 list.unpack;
#X text 175 2567 sends list element one by one separately;
#X obj 30 2594 list.unwrap;
#X text 175 2594 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 2631 list.walk;
#X text 175 2631 Walks thru the list;
#X obj 30 2658 list.wrap;
#X text 175 2658 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 2709 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 2750 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2761 live.capture~;
#X text 175 2761 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 2798 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 2839 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2850 math.abs;
#X text 175 2850 absolute value function;
#X obj 30 2877 math.acos;
#X text 175 2877 arc cosine function;
#X obj 30 2904 math.acosh;
#X text 175 2904 inverse hyperbolic cosine function;
#X obj 30 2931 math.asin;
#X text 175 2931 arc sine function;
#X obj 30 2958 math.asinh;
#X text 175 2958 inverse hyperbolic sine function;
#X obj 30 2985 math.atan;
#X text 175 2985 arc tangent function;
#X obj 30 3012 math.atanh;
#X text 175 3012 inverse hyperbolic tangent function;
#X obj 30 3039 math.cbrt;
#X text 175 3039 cube root function;
#X obj 30 3066 math.ceil;
#X text 175 3066 round to smallest integral value not less than input
value;
#X obj 30 3093 math.cos;
#X text 175 3093 cosine function;
#X obj 30 3120 math.cosh;
#X text 175 3120 hyperbolic cosine function;
#X obj 30 3147 math.e;
#X text 175 3147 mathematical constant \, base of the natural
logarithm;
#X obj 30 3174 math.exp;
#X text 175 3174 exponential functions;
#X obj 30 3201 math.exp2;
#X text 175 3201 exponential functions;
#X obj 30 3228 math.floor;
#X text 175 3228 round to largest integral value not greater than x;
#X obj 30 3255 math.inf;
#X text 175 3255 infinity value that cannot be represented accurately;
#X obj 30 3282 math.log;
#X text 175 3282 logarithm functions;
#X obj 30 3309 math.log10;
#X text 175 3309 logarithm functions;
#X obj 30 3336 math.log2;
#X text 175 3336 logarithm functions;
#X obj 30 3363 math.nan;
#X text 175 3363 Not a Number \, unrepresentable value;
#X obj 30 3390 math.pi;
#X text 175 3390 mathematical constant;
#X obj 30 3417 math.round;
#X text 175 3417 round to integral value \, regardless of rounding
direction;
#X obj 30 3444 math.sin;
#X text 175 3444 sine function;
#X obj 30 3471 math.sinh;
#X text 175 3471 hyperbolic sine function;
#X obj 30 3498 math.sqrt;
#X text 175 3498 square root function;
#X obj 30 3525 math.tan;
#X text 175 3525 tangent function;
#X obj 30 3552 math.tanh;
#X text 175 3552 hyperbolic tangent function;
#X obj 30 3579 math.trunc;
#X text 175 3579 truncate to integer value;
#X obj 20 3606 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 3647 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3658 msg;
#X text 175 3658 message constructor;
#X obj 20 3685 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 3726 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3737 noise.pink~;
#X text 175 3737 Pink noise generator;
#X obj 30 3764 noise.white~;
#X text 175 3764 White noise generator;
#X obj 20 3791 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 3832 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3843 osc.impulse~;
#X text 175 3843 Bandlimited impulse train generator;
#X obj 30 3870 osc.pulse~;
#X text 175 3870 Bandlimited pulse train oscillator. ;
#X obj 30 3897 osc.saw~;
#X text 175 3897 Bandlimited saw wave oscillator;
#X obj 30 3924 osc.sinfb~;
#X text 175 3924 sine oscilator with feedback;
#X obj 30 3951 osc.square~;
#X text 175 3951 Bandlimited square wave oscillator;
#X obj 30 3978 osc.tri~;
#X text 175 3978 Bandlimited triangle wave oscillator;
#X obj 20 4005 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4046 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4057 pass.changed;
#X text 175 4057 rejects redundant input values;
#X obj 30 4084 pass.if;
#X text 175 4084 pass values that accepted by predicate object;
#X obj 20 4111 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 4152 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4163 is_any;
#X text 175 4163 checks if input data has *any* type;
#X obj 30 4190 is_bang;
#X text 175 4190 checks if input data has *bang* type;
#X obj 30 4217 is_even;
#X text 175 4217 checks if input number is even;
#X obj 30 4244 is_float;
#X text 175 4244 checks if input data has *float* type;
#X obj 30 4271 is_list;
#X text 175 4271 checks if input data has *list* type;
#X obj 30 4298 is_odd;
#X text 175 4298 checks if input number is odd;
#X obj 30 4325 is_pointer;
#X text 175 4325 checks if input data has *pointer* type;
#X obj 30 4352 is_symbol;
#X text 175 4352 checks if input data has *symbol* type;
#X obj 20 4379 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 4420 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4431 prop.get;
#X text 175 4431 Property extractor;
#X obj 30 4458 prop.set;
#X text 175 4458 Property injector;
#X obj 20 4485 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 4526 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4537 random.int;
#X text 175 4537 Random integer generator in specified range;
#X obj 20 4564 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 4605 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4616 snd.file;
#X text 175 4616 Sound file loader on steroids;
#X obj 20 4643 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 4684 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4695 symbol.length;
#X text 175 4695 length of symbol (unicode supported);
#X obj 20 4722 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 4763 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4774 system.memsize;
#X text 175 4774 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 4811 system.memused;
#X text 175 4811 returns the process physical memory use - current and
peak;
#X obj 30 4838 system.screen_size;
#X text 175 4838 returns current screen size in pixels;
#X obj 20 4865 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 4906 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4920 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 4917 A bang... that's all;
#X obj 30 4943 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 4940 Breakpoint function GUI object;
#X obj 30 4966 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 4963 Display GUI object;
#X obj 30 4989 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 4986 knob widget;
#X obj 30 5012 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 5009 The matrix of toggles has you.;
#X obj 30 5035 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 5032 Scope GUI object;
#X obj 30 5058 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 5055 Spectroscope GUI object;
#X obj 30 5081 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 5078 modern toggle widget;
#X obj 20 5101 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 5142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5153 vector.distance;
#X text 175 5153 returns euclidean distance between two points;
#X obj 30 5180 vector.dot;
#X text 175 5180 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 5231 vector.length;
#X text 175 5231 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 5268 vector.normalize;
#X text 175 5268 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 5295 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 5295 version: v0.1 \, license: GPL3;
#X obj 20 5314 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;