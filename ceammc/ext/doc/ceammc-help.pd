#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 343 ui.link @title [function] @url function-help.pd;
#X text 175 340 named function;
#X obj 30 363 function.call;
#X text 175 363 call named function;
#X obj 20 390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 431 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 442 array.p2s;
#X text 175 442 convert array phase [0\..1] to sample position;
#X obj 30 469 array.s2p;
#X text 175 469 convert array sample position to relative phase
position [0\..1];
#X obj 30 506 conv.bpm2hz;
#X text 175 506 converts BPM to frequency in herz;
#X obj 30 533 conv.bpm2ms;
#X text 175 533 convert frequency in BPM to period in milliseconds;
#X obj 30 560 conv.bpm2sec;
#X text 175 560 convert frequency in BPM to period in seconds;
#X obj 30 587 conv.cc2amp;
#X text 175 587 convert from MIDI Control Change range;
#X obj 30 614 conv.lin2curve;
#X text 175 614 map linear to exponential range with 0 allowed.;
#X obj 30 641 conv.lin2exp;
#X text 175 641 maps linear range to exponential range;
#X obj 30 668 conv.lin2lin;
#X text 175 668 convert from one linear range to another;
#X obj 30 695 conv.samp2sec;
#X text 175 695 convert samples to time according to samplerate;
#X obj 30 722 conv.sec2samp;
#X text 175 722 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 759 conv.sec2str;
#X text 175 759 converts float time in seconds to formated symbol;
#X obj 30 786 conv.str2sec;
#X text 175 786 converts formatted time to float value in seconds;
#X obj 20 813 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 854 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 865 data.fifo;
#X text 175 865 First-In-First-Out (FIFO) queue data container;
#X obj 30 892 data.list;
#X text 175 892 list container;
#X obj 30 919 data.set;
#X text 175 919 container that store unique elements;
#X obj 30 946 data.set2list;
#X text 175 946 converts set to list;
#X obj 30 973 set.contains;
#X text 175 973 check if specified element is in set;
#X obj 30 1000 set.diff;
#X text 175 1000 difference between two sets;
#X obj 30 1027 set.equal;
#X text 175 1027 checks if two sets are equal (contains same
elements);
#X obj 30 1054 set.intersect;
#X text 175 1054 output intersection of given sets;
#X obj 30 1081 set.size;
#X text 175 1081 get number of elements in set;
#X obj 30 1108 set.symdiff;
#X text 175 1108 symmetric difference between two sets;
#X obj 30 1135 set.union;
#X text 175 1135 output union of given sets;
#X obj 20 1162 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1203 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1214 dyn.comp2~;
#X text 175 1214 stereo dynamic range compressor;
#X obj 30 1241 dyn.comp~;
#X text 175 1241 mono dynamic range compressors;
#X obj 30 1268 dyn.gate2~;
#X text 175 1268 stereo signal gate;
#X obj 30 1295 dyn.gate~;
#X text 175 1295 mono signal gate;
#X obj 30 1322 dyn.limit2~;
#X text 175 1322 stereo 1176LN Peak Limiter;
#X obj 30 1349 dyn.limit~;
#X text 175 1349 mono 1176LN Peak Limiter;
#X obj 30 1376 dyn.softclip~;
#X text 175 1376 soft signal clip;
#X obj 20 1403 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1444 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1455 env.adsr~;
#X text 175 1455 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1482 env.ar~;
#X text 175 1482 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1519 env.follow~;
#X text 175 1519 Envelope follower with independent attack and release
times.;
#X obj 20 1556 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1597 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1608 expand_env;
#X text 175 1608 Substitute enviroment variables in data stream;
#X obj 30 1635 flow.change;
#X text 175 1635 rejects redundant input values;
#X obj 30 1662 flow.group;
#X text 175 1662 group data atoms in list of specified size;
#X obj 30 1689 flow.pass;
#X text 175 1689 pass specified values;
#X obj 30 1716 flow.pass_if;
#X text 175 1716 pass values that accepted by predicate object;
#X obj 30 1743 flow.reject;
#X text 175 1743 reject specified values;
#X obj 30 1770 flow.reject_if;
#X text 175 1770 reject values by predicate;
#X obj 30 1797 flow.split;
#X text 175 1797 split data flow by external side-chain predicate;
#X obj 30 1824 flow.sync;
#X text 175 1824 bus with only hot inlets;
#X obj 30 1851 replace;
#X text 175 1851 Replace atoms in data stream;
#X obj 20 1878 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1919 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1930 flt.biquad~;
#X text 175 1930 second order IIR filter.;
#X obj 30 1957 flt.bpf12~;
#X text 175 1957 Band-pass filter with 12/db per octave slope;
#X obj 30 1984 flt.bpf24~;
#X text 175 1984 Band-pass filter with 24/db per octave slope;
#X obj 30 2011 flt.c_bpf~;
#X text 175 2011 BPF coefficent calculator for biquad filter;
#X obj 30 2038 flt.c_highshelf~;
#X text 175 2038 Highshelf filter coefficent calculator for biquad;
#X obj 30 2065 flt.c_hpf~;
#X text 175 2065 HPF coefficent calculator for biquad filter;
#X obj 30 2092 flt.c_lowshelf~;
#X text 175 2092 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2119 flt.c_lpf~;
#X text 175 2119 LPF coefficent calculator for biquad filter;
#X obj 30 2146 flt.c_notch~;
#X text 175 2146 Band-reject coefficent calculator for biquad filter;
#X obj 30 2173 flt.c_peak~;
#X text 175 2173 Peaking equalizer calculator for biquad.;
#X obj 30 2200 flt.dcblock2~;
#X text 175 2200 stereo DC blocker;
#X obj 30 2227 flt.dcblock~;
#X text 175 2227 mono DC blocker;
#X obj 30 2254 flt.eq_peak~;
#X text 175 2254 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2305 flt.highshelf~;
#X text 175 2305 gain boost|cut above some frequency;
#X obj 30 2332 flt.hpf12~;
#X text 175 2332 High-pass filter with 12/db per octave slope;
#X obj 30 2359 flt.hpf24~;
#X text 175 2359 High-pass filter with 24/db per octave slope;
#X obj 30 2386 flt.lowshelf~;
#X text 175 2386 gain boost|cut below some frequency;
#X obj 30 2413 flt.lpf12~;
#X text 175 2413 Low-pass filter with 12/db per octave slope;
#X obj 30 2440 flt.lpf24~;
#X text 175 2440 Low-pass filter with 24/db per octave slope;
#X obj 30 2467 flt.notch~;
#X text 175 2467 band-rejection filter;
#X obj 30 2494 flt.resonbp~;
#X text 175 2494 Simple resonant bandpass filter;
#X obj 20 2521 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2562 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2573 fx.distortion~;
#X text 175 2573 cubic nonlinearity distortion;
#X obj 30 2600 fx.flanger~;
#X text 175 2600 mono flanging effect;
#X obj 30 2627 fx.freeverb2~;
#X text 175 2627 freeverb2 - stereo version of freeverb;
#X obj 30 2654 fx.freeverb~;
#X text 175 2654 freeverb - common used open-source reverb;
#X obj 30 2681 fx.freqshift~;
#X text 175 2681 frequency shifter or single-sideband ring modulation;
#X obj 30 2708 fx.pitchshift~;
#X text 175 2708 simple pitch shifter based on 2 delay lines;
#X obj 30 2735 fx.zita_rev1~;
#X text 175 2735 Zita stereo reverb;
#X obj 20 2762 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2803 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2814 global.float;
#X text 175 2814 global named float object;
#X obj 30 2841 global.int;
#X text 175 2841 global named integer object;
#X obj 30 2868 global.list;
#X text 175 2868 global named list object;
#X obj 20 2895 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2936 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2947 lfo.impulse~;
#X text 175 2947 Unit-amplitude low-frequency impulse train;
#X obj 30 2974 lfo.square~;
#X text 175 2974 Positive low frequence square wave;
#X obj 30 3001 lfo.tri~;
#X text 175 3001 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3028 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3069 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3080 list.all_of;
#X text 175 3080 checks if all list atoms accepted by predicate;
#X obj 30 3107 list.any_of;
#X text 175 3107 checks if at least one list element is accepted by
predicate;
#X obj 30 3144 list.apply_to;
#X text 175 3144 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3181 list.at;
#X text 175 3181 returns list element(s) at given position(s);
#X obj 30 3208 list.choice;
#X text 175 3208 returns random element from list;
#X obj 30 3235 list.count;
#X text 175 3235 returns the number of items that equal to specified
value;
#X obj 30 3262 list.count_if;
#X text 175 3262 returns the number of items that satisfy to external
predicate.;
#X obj 30 3299 list.deinterleave;
#X text 175 3299 splits list to N lists \, each to separate output;
#X obj 30 3326 list.delta;
#X text 175 3326 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3363 list.distribution;
#X text 175 3363 list value distribution;
#X obj 30 3390 list.each;
#X text 175 3390 maps each list value via external object(s);
#X obj 30 3417 list.enumerate;
#X text 175 3417 enumerates input list;
#X obj 30 3444 list.equal;
#X text 175 3444 checks if given lists are equal;
#X obj 30 3471 list.first;
#X text 175 3471 returns first list element;
#X obj 30 3498 list.gen;
#X text 175 3498 generates list of specified length via external
generator;
#X obj 30 3525 list.histogram;
#X text 175 3525 outputs distibution histogram;
#X obj 30 3552 list.integrator;
#X text 175 3552 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3589 list.interleave;
#X text 175 3589 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3640 list.last;
#X text 175 3640 returns last list element;
#X obj 30 3667 list.length;
#X text 175 3667 returns the number of atoms in the message;
#X obj 30 3694 list.max;
#X text 175 3694 returns largest element in the list;
#X obj 30 3721 list.mean;
#X text 175 3721 calculates average of list of floats;
#X obj 30 3748 list.min;
#X text 175 3748 returns smallest element in the list;
#X obj 30 3775 list.none_of;
#X text 175 3775 checks if none of list atoms is accepted by
predicate;
#X obj 30 3802 list.normalize;
#X text 175 3802 normalizes float list values to get their sum = 1.0;
#X obj 30 3829 list.product;
#X text 175 3829 calculates product of floats in list;
#X obj 30 3856 list.range;
#X text 175 3856 returns list smallest and largest value;
#X obj 30 3883 list.reduce;
#X text 175 3883 apply function of two arguments cumulatively to the
list;
#X obj 30 3910 list.remove_if;
#X text 175 3910 remove elements by predicate;
#X obj 30 3937 list.repack;
#X text 175 3937 repack input list to specified size;
#X obj 30 3964 list.repeat;
#X text 175 3964 creates new list by repeating given list specified
times;
#X obj 30 3991 list.resize;
#X text 175 3991 changes list size with;
#X obj 30 4018 list.reverse;
#X text 175 4018 reverses the order of the elements in the list;
#X obj 30 4045 list.rotate;
#X text 175 4045 rotates list left;
#X obj 30 4072 list.seq;
#X text 175 4072 numeric sequence list generator;
#X obj 30 4099 list.shuffle;
#X text 175 4099 randomly rearranges elements in list;
#X obj 30 4126 list.slice;
#X text 175 4126 extract sublist;
#X obj 30 4153 list.sort;
#X text 175 4153 sorts list values by ascending order;
#X obj 30 4180 list.sort_with;
#X text 175 4180 sort list with user defined side-chain;
#X obj 30 4207 list.sum;
#X text 175 4207 calculates sum of floats in list;
#X obj 30 4234 list.unique;
#X text 175 4234 sorts and removes duplicates from input list;
#X obj 30 4261 list.unpack;
#X text 175 4261 sends list element one by one separately;
#X obj 30 4288 list.unwrap;
#X text 175 4288 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4325 list.walk;
#X text 175 4325 Walks thru the list;
#X obj 30 4352 list.wrap;
#X text 175 4352 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4403 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4444 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4455 live.capture~;
#X text 175 4455 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4492 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 4533 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4544 local.float;
#X text 175 4544 canvas-scoped named float variable;
#X obj 30 4571 local.int;
#X text 175 4571 canvas-scoped named integer variable;
#X obj 20 4598 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 4639 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4650 math.abs;
#X text 175 4650 absolute value function;
#X obj 30 4677 math.acos;
#X text 175 4677 arc cosine function;
#X obj 30 4704 math.acosh;
#X text 175 4704 inverse hyperbolic cosine function;
#X obj 30 4731 math.and;
#X text 175 4731 operation AND for multiple arguments;
#X obj 30 4758 math.approx;
#X text 175 4758 check if input value approximately equal to pattern;
#X obj 30 4785 math.asin;
#X text 175 4785 arc sine function;
#X obj 30 4812 math.asinh;
#X text 175 4812 inverse hyperbolic sine function;
#X obj 30 4839 math.atan;
#X text 175 4839 arc tangent function;
#X obj 30 4866 math.atanh;
#X text 175 4866 inverse hyperbolic tangent function;
#X obj 30 4893 math.cbrt;
#X text 175 4893 cube root function;
#X obj 30 4920 math.ceil;
#X text 175 4920 round to smallest integral value not less than input
value;
#X obj 30 4947 math.cos;
#X text 175 4947 cosine function;
#X obj 30 4974 math.cosh;
#X text 175 4974 hyperbolic cosine function;
#X obj 30 5001 math.e;
#X text 175 5001 mathematical constant \, base of the natural
logarithm;
#X obj 30 5028 math.exp;
#X text 175 5028 exponential functions;
#X obj 30 5055 math.exp2;
#X text 175 5055 exponential functions;
#X obj 30 5082 math.floor;
#X text 175 5082 round to largest integral value not greater than x;
#X obj 30 5109 math.gcd;
#X text 175 5109 calculate greatest common divisor;
#X obj 30 5136 math.inf;
#X text 175 5136 infinity value that cannot be represented accurately;
#X obj 30 5163 math.lcm;
#X text 175 5163 calculate least common multiple;
#X obj 30 5190 math.log;
#X text 175 5190 logarithm functions;
#X obj 30 5217 math.log10;
#X text 175 5217 logarithm functions;
#X obj 30 5244 math.log2;
#X text 175 5244 logarithm functions;
#X obj 30 5271 math.nan;
#X text 175 5271 Not a Number \, unrepresentable value;
#X obj 30 5298 math.neg;
#X text 175 5298 negate function;
#X obj 30 5325 math.or;
#X text 175 5325 operation OR for multiple arguments;
#X obj 30 5352 math.pi;
#X text 175 5352 mathematical constant;
#X obj 30 5379 math.reciprocal;
#X text 175 5379 calculate reciprocal number;
#X obj 30 5406 math.round;
#X text 175 5406 round to integral value \, regardless of rounding
direction;
#X obj 30 5433 math.sign;
#X text 175 5433 sign function;
#X obj 30 5460 math.sin;
#X text 175 5460 sine function;
#X obj 30 5487 math.sinh;
#X text 175 5487 hyperbolic sine function;
#X obj 30 5514 math.sqrt;
#X text 175 5514 square root function;
#X obj 30 5541 math.squared;
#X text 175 5541 value square;
#X obj 30 5568 math.tan;
#X text 175 5568 tangent function;
#X obj 30 5595 math.tanh;
#X text 175 5595 hyperbolic tangent function;
#X obj 30 5622 math.trunc;
#X text 175 5622 truncate to integer value;
#X obj 20 5649 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 5690 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5701 msg;
#X text 175 5701 message constructor;
#X obj 20 5728 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 5769 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5780 noise.pink~;
#X text 175 5780 Pink noise generator;
#X obj 30 5807 noise.white~;
#X text 175 5807 White noise generator;
#X obj 20 5834 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 5875 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5886 osc.impulse~;
#X text 175 5886 Bandlimited impulse train generator;
#X obj 30 5913 osc.pulse~;
#X text 175 5913 Bandlimited pulse train oscillator.;
#X obj 30 5940 osc.saw~;
#X text 175 5940 Bandlimited saw wave oscillator;
#X obj 30 5967 osc.sinfb~;
#X text 175 5967 sine oscilator with feedback;
#X obj 30 5994 osc.square~;
#X text 175 5994 Bandlimited square wave oscillator;
#X obj 30 6021 osc.tri~;
#X text 175 6021 Bandlimited triangle wave oscillator;
#X obj 20 6048 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 6089 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6100 path.basename;
#X text 175 6100 outputs filename portion of pathname;
#X obj 30 6127 path.dirname;
#X text 175 6127 outputs directory portion of pathname;
#X obj 30 6154 path.exists;
#X text 175 6154 checks if given path exists;
#X obj 20 6181 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 6222 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6233 is_any;
#X text 175 6233 checks if input data has *any* type;
#X obj 30 6260 is_bang;
#X text 175 6260 checks if input data has *bang* type;
#X obj 30 6287 is_even;
#X text 175 6287 checks if input number is even;
#X obj 30 6314 is_file;
#X text 175 6314 checks if file exists and accessible;
#X obj 30 6341 is_float;
#X text 175 6341 checks if input data has *float* type;
#X obj 30 6368 is_list;
#X text 175 6368 checks if input data has *list* type;
#X obj 30 6395 is_odd;
#X text 175 6395 checks if input number is odd;
#X obj 30 6422 is_pointer;
#X text 175 6422 checks if input data has *pointer* type;
#X obj 30 6449 is_symbol;
#X text 175 6449 checks if input data has *symbol* type;
#X obj 20 6476 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 6517 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6528 prop.get;
#X text 175 6528 Property extractor;
#X obj 30 6555 prop.set;
#X text 175 6555 Property injector;
#X obj 20 6582 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 6623 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6634 random.float;
#X text 175 6634 random float generator in specified range;
#X obj 30 6661 random.gauss;
#X text 175 6661 gaussian random distribution;
#X obj 30 6688 random.int;
#X text 175 6688 Random integer generator in specified range;
#X obj 20 6715 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 6756 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6767 snd.file;
#X text 175 6767 Sound file loader on steroids;
#X obj 20 6794 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 6835 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6846 string;
#X text 175 6846 string constructor;
#X obj 30 6873 string.contains;
#X text 175 6873 checks if given string contains specified substring;
#X obj 30 6900 string.ends_with;
#X text 175 6900 checks if given string ends with specified suffix;
#X obj 30 6927 string.equal;
#X text 175 6927 check strings for equality;
#X obj 30 6954 string.format;
#X text 175 6954 formats string like printf.;
#X obj 30 6981 string.join;
#X text 175 6981 joins (concatenates) strings with separator;
#X obj 30 7008 string.length;
#X text 175 7008 number of characters in string (unicode supported);
#X obj 30 7035 string.remove;
#X text 175 7035 remove substring from input string;
#X obj 30 7062 string.replace;
#X text 175 7062 replace from one substring to another in input
string;
#X obj 30 7089 string.split;
#X text 175 7089 split string by separator;
#X obj 30 7116 string.starts_with;
#X text 175 7116 checks if given string starts with specified prefix;
#X obj 30 7143 string.substr;
#X text 175 7143 extract substring from input string;
#X obj 30 7170 string2symbol;
#X text 175 7170 converts string to symbol;
#X obj 20 7197 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 7238 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7249 symbol.equal;
#X text 175 7249 check symbols for equality;
#X obj 30 7276 symbol.length;
#X text 175 7276 number of characters in symbol (unicode supported);
#X obj 20 7303 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 7344 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7355 system.getenv;
#X text 175 7355 Get system environment variables;
#X obj 30 7382 system.hostname;
#X text 175 7382 outputs system hostname;
#X obj 30 7409 system.memsize;
#X text 175 7409 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 7446 system.memused;
#X text 175 7446 returns the process physical memory use - current and
peak;
#X obj 30 7473 system.screen_size;
#X text 175 7473 returns current screen size in pixels;
#X obj 20 7500 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 7541 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7555 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 7552 Timeline bang;
#X obj 30 7578 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 7575 Timeline section;
#X obj 30 7598 tl.transport;
#X text 175 7598 Timeline transport control;
#X obj 30 7628 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 7625 A bang... that's all;
#X obj 30 7651 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 7648 Breakpoint function GUI object;
#X obj 30 7674 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 7671 Display GUI object;
#X obj 30 7697 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 7694 keyboard widget;
#X obj 30 7720 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 7717 knob widget;
#X obj 30 7743 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 7740 The matrix of toggles has you.;
#X obj 30 7766 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 7763 Scope GUI object;
#X obj 30 7789 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 7786 2D slider widget;
#X obj 30 7812 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 7809 Multiple slider widget;
#X obj 30 7835 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 7832 Spectroscope GUI object;
#X obj 30 7858 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 7855 modern toggle widget;
#X obj 20 7878 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 7919 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7930 vector.distance;
#X text 175 7930 returns euclidean distance between two points;
#X obj 30 7957 vector.dot;
#X text 175 7957 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 8008 vector.length;
#X text 175 8008 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 8045 vector.normalize;
#X text 175 8045 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 8072 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 8072 version: v0.2 \, license: GPL3;
#X obj 20 8091 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;