#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 340 array.p2s;
#X text 175 340 convert array phase [0\..1] to sample position;
#X obj 30 367 array.s2p;
#X text 175 367 convert array sample position to relative phase
position [0\..1];
#X obj 30 404 conv.bpm2hz;
#X text 175 404 converts BPM to frequency in herz;
#X obj 30 431 conv.bpm2ms;
#X text 175 431 convert frequency in BPM to period in milliseconds;
#X obj 30 458 conv.bpm2sec;
#X text 175 458 convert frequency in BPM to period in seconds;
#X obj 30 485 conv.lin2curve;
#X text 175 485 map linear to exponential range with 0 allowed.;
#X obj 30 512 conv.lin2exp;
#X text 175 512 maps linear range to exponential range;
#X obj 30 539 conv.lin2lin;
#X text 175 539 convert from one linear range to another;
#X obj 30 566 conv.sec2str;
#X text 175 566 converts float time in seconds to formated symbol;
#X obj 30 593 conv.str2sec;
#X text 175 593 converts formatted time to float value in seconds;
#X obj 20 620 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 661 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 672 data.fifo;
#X text 175 672 First-In-First-Out (FIFO) queue data container;
#X obj 30 699 data.list;
#X text 175 699 list container;
#X obj 20 726 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 767 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 778 dyn.comp2~;
#X text 175 778 stereo dynamic range compressor;
#X obj 30 805 dyn.comp~;
#X text 175 805 mono dynamic range compressors;
#X obj 30 832 dyn.gate2~;
#X text 175 832 stereo signal gate;
#X obj 30 859 dyn.gate~;
#X text 175 859 mono signal gate;
#X obj 30 886 dyn.limit2~;
#X text 175 886 stereo 1176LN Peak Limiter;
#X obj 30 913 dyn.limit~;
#X text 175 913 mono 1176LN Peak Limiter;
#X obj 30 940 dyn.softclip~;
#X text 175 940 soft signal clip;
#X obj 20 967 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1008 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1019 env.adsr~;
#X text 175 1019 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1046 env.ar~;
#X text 175 1046 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1083 env.follow~;
#X text 175 1083 Envelope follower with independent attack and release
times.;
#X obj 20 1120 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1161 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1172 expand_env;
#X text 175 1172 Substitute enviroment variables in data stream;
#X obj 30 1199 flow.sync;
#X text 175 1199 bus with only hot inlets;
#X obj 30 1226 pass_if;
#X text 175 1226 pass values that accepted by predicate object;
#X obj 30 1253 reject_if;
#X text 175 1253 reject values by predicate;
#X obj 30 1280 replace;
#X text 175 1280 Replace atoms in data stream;
#X obj 20 1307 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1348 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1359 flt.biquad~;
#X text 175 1359 second order IIR filter.;
#X obj 30 1386 flt.bpf12~;
#X text 175 1386 Band-pass filter with 12/db per octave slope;
#X obj 30 1413 flt.bpf24~;
#X text 175 1413 Band-pass filter with 24/db per octave slope;
#X obj 30 1440 flt.c_bpf~;
#X text 175 1440 BPF coefficent calculator for biquad filter;
#X obj 30 1467 flt.c_highshelf~;
#X text 175 1467 Highshelf filter coefficent calculator for biquad;
#X obj 30 1494 flt.c_hpf~;
#X text 175 1494 HPF coefficent calculator for biquad filter;
#X obj 30 1521 flt.c_lowshelf~;
#X text 175 1521 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1548 flt.c_lpf~;
#X text 175 1548 LPF coefficent calculator for biquad filter;
#X obj 30 1575 flt.c_notch~;
#X text 175 1575 Band-reject coefficent calculator for biquad filter;
#X obj 30 1602 flt.c_peak~;
#X text 175 1602 Peaking equalizer calculator for biquad.;
#X obj 30 1629 flt.dcblock2~;
#X text 175 1629 stereo DC blocker;
#X obj 30 1656 flt.dcblock~;
#X text 175 1656 mono DC blocker;
#X obj 30 1683 flt.eq_peak~;
#X text 175 1683 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1734 flt.highshelf~;
#X text 175 1734 gain boost|cut above some frequency;
#X obj 30 1761 flt.hpf12~;
#X text 175 1761 High-pass filter with 12/db per octave slope;
#X obj 30 1788 flt.hpf24~;
#X text 175 1788 High-pass filter with 24/db per octave slope;
#X obj 30 1815 flt.lowshelf~;
#X text 175 1815 gain boost|cut below some frequency;
#X obj 30 1842 flt.lpf12~;
#X text 175 1842 Low-pass filter with 12/db per octave slope;
#X obj 30 1869 flt.lpf24~;
#X text 175 1869 Low-pass filter with 24/db per octave slope;
#X obj 30 1896 flt.notch~;
#X text 175 1896 band-rejection filter;
#X obj 30 1923 flt.resonbp~;
#X text 175 1923 Simple resonant bandpass filter;
#X obj 20 1950 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1991 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2002 fx.distortion~;
#X text 175 2002 cubic nonlinearity distortion;
#X obj 30 2029 fx.flanger~;
#X text 175 2029 mono flanging effect;
#X obj 30 2056 fx.freeverb2~;
#X text 175 2056 freeverb2 - stereo version of freeverb;
#X obj 30 2083 fx.freeverb~;
#X text 175 2083 freeverb - common used open-source reverb;
#X obj 30 2110 fx.freqshift~;
#X text 175 2110 frequency shifter or single-sideband ring modulation;
#X obj 30 2137 fx.pitchshift~;
#X text 175 2137 simple pitch shifter based on 2 delay lines;
#X obj 30 2164 fx.zita_rev1~;
#X text 175 2164 Zita stereo reverb;
#X obj 20 2191 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2232 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2243 global.float;
#X text 175 2243 global named float object;
#X obj 30 2270 global.int;
#X text 175 2270 global named integer object;
#X obj 30 2297 global.list;
#X text 175 2297 global named list object;
#X obj 20 2324 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2365 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2376 lfo.impulse~;
#X text 175 2376 Unit-amplitude low-frequency impulse train;
#X obj 30 2403 lfo.square~;
#X text 175 2403 Positive low frequence square wave;
#X obj 30 2430 lfo.tri~;
#X text 175 2430 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2457 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2498 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2509 list.all_of;
#X text 175 2509 checks if all list atoms accepted by predicate;
#X obj 30 2536 list.any_of;
#X text 175 2536 checks if at least one list element is accepted by
predicate;
#X obj 30 2573 list.apply_to;
#X text 175 2573 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2610 list.at;
#X text 175 2610 returns list element at given position;
#X obj 30 2637 list.choice;
#X text 175 2637 returns random element from list;
#X obj 30 2664 list.count;
#X text 175 2664 returns the number of items that equal to specified
value;
#X obj 30 2691 list.count_if;
#X text 175 2691 returns the number of items that satisfy to external
predicate.;
#X obj 30 2728 list.deinterleave;
#X text 175 2728 splits list to N lists \, each to separate output;
#X obj 30 2755 list.delta;
#X text 175 2755 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2792 list.each;
#X text 175 2792 maps each list value via external object(s);
#X obj 30 2819 list.equal;
#X text 175 2819 checks if given lists are equal;
#X obj 30 2846 list.first;
#X text 175 2846 returns first list element;
#X obj 30 2873 list.gen;
#X text 175 2873 generates list of specified length via external
generator;
#X obj 30 2900 list.integrator;
#X text 175 2900 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2937 list.interleave;
#X text 175 2937 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2988 list.last;
#X text 175 2988 returns last list element;
#X obj 30 3015 list.length;
#X text 175 3015 returns the number of atoms in the message;
#X obj 30 3042 list.max;
#X text 175 3042 returns largest element in the list;
#X obj 30 3069 list.mean;
#X text 175 3069 calculates average of list of floats;
#X obj 30 3096 list.min;
#X text 175 3096 returns smallest element in the list;
#X obj 30 3123 list.none_of;
#X text 175 3123 checks if none of list atoms is accepted by
predicate;
#X obj 30 3150 list.normalize;
#X text 175 3150 normalizes float list values to get their sum = 1.0;
#X obj 30 3177 list.product;
#X text 175 3177 calculates product of floats in list;
#X obj 30 3204 list.range;
#X text 175 3204 returns list smallest and largest value;
#X obj 30 3231 list.reduce;
#X text 175 3231 apply function of two arguments cumulatively to the
list;
#X obj 30 3258 list.remove_if;
#X text 175 3258 remove elements by predicate;
#X obj 30 3285 list.resize;
#X text 175 3285 changes list size with;
#X obj 30 3312 list.reverse;
#X text 175 3312 reverses the order of the elements in the list;
#X obj 30 3339 list.seq;
#X text 175 3339 numeric sequence list generator;
#X obj 30 3366 list.shuffle;
#X text 175 3366 randomly rearranges elements in list;
#X obj 30 3393 list.sort;
#X text 175 3393 sorts list values by ascending order;
#X obj 30 3420 list.sum;
#X text 175 3420 calculates sum of floats in list;
#X obj 30 3447 list.unpack;
#X text 175 3447 sends list element one by one separately;
#X obj 30 3474 list.unwrap;
#X text 175 3474 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3511 list.walk;
#X text 175 3511 Walks thru the list;
#X obj 30 3538 list.wrap;
#X text 175 3538 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3589 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3630 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3641 live.capture~;
#X text 175 3641 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3678 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3719 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3730 math.abs;
#X text 175 3730 absolute value function;
#X obj 30 3757 math.acos;
#X text 175 3757 arc cosine function;
#X obj 30 3784 math.acosh;
#X text 175 3784 inverse hyperbolic cosine function;
#X obj 30 3811 math.and;
#X text 175 3811 operation AND for multiple arguments;
#X obj 30 3838 math.approx;
#X text 175 3838 check if input value approximately equal to pattern;
#X obj 30 3865 math.asin;
#X text 175 3865 arc sine function;
#X obj 30 3892 math.asinh;
#X text 175 3892 inverse hyperbolic sine function;
#X obj 30 3919 math.atan;
#X text 175 3919 arc tangent function;
#X obj 30 3946 math.atanh;
#X text 175 3946 inverse hyperbolic tangent function;
#X obj 30 3973 math.cbrt;
#X text 175 3973 cube root function;
#X obj 30 4000 math.ceil;
#X text 175 4000 round to smallest integral value not less than input
value;
#X obj 30 4027 math.cos;
#X text 175 4027 cosine function;
#X obj 30 4054 math.cosh;
#X text 175 4054 hyperbolic cosine function;
#X obj 30 4081 math.e;
#X text 175 4081 mathematical constant \, base of the natural
logarithm;
#X obj 30 4108 math.exp;
#X text 175 4108 exponential functions;
#X obj 30 4135 math.exp2;
#X text 175 4135 exponential functions;
#X obj 30 4162 math.floor;
#X text 175 4162 round to largest integral value not greater than x;
#X obj 30 4189 math.inf;
#X text 175 4189 infinity value that cannot be represented accurately;
#X obj 30 4216 math.log;
#X text 175 4216 logarithm functions;
#X obj 30 4243 math.log10;
#X text 175 4243 logarithm functions;
#X obj 30 4270 math.log2;
#X text 175 4270 logarithm functions;
#X obj 30 4297 math.nan;
#X text 175 4297 Not a Number \, unrepresentable value;
#X obj 30 4324 math.neg;
#X text 175 4324 negate function;
#X obj 30 4351 math.pi;
#X text 175 4351 mathematical constant;
#X obj 30 4378 math.reciprocal;
#X text 175 4378 calculate reciprocal number;
#X obj 30 4405 math.round;
#X text 175 4405 round to integral value \, regardless of rounding
direction;
#X obj 30 4432 math.sign;
#X text 175 4432 sign function;
#X obj 30 4459 math.sin;
#X text 175 4459 sine function;
#X obj 30 4486 math.sinh;
#X text 175 4486 hyperbolic sine function;
#X obj 30 4513 math.sqrt;
#X text 175 4513 square root function;
#X obj 30 4540 math.squared;
#X text 175 4540 value square;
#X obj 30 4567 math.tan;
#X text 175 4567 tangent function;
#X obj 30 4594 math.tanh;
#X text 175 4594 hyperbolic tangent function;
#X obj 30 4621 math.trunc;
#X text 175 4621 truncate to integer value;
#X obj 20 4648 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4689 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4700 msg;
#X text 175 4700 message constructor;
#X obj 20 4727 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4768 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4779 noise.pink~;
#X text 175 4779 Pink noise generator;
#X obj 30 4806 noise.white~;
#X text 175 4806 White noise generator;
#X obj 20 4833 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4874 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4885 osc.impulse~;
#X text 175 4885 Bandlimited impulse train generator;
#X obj 30 4912 osc.pulse~;
#X text 175 4912 Bandlimited pulse train oscillator.;
#X obj 30 4939 osc.saw~;
#X text 175 4939 Bandlimited saw wave oscillator;
#X obj 30 4966 osc.sinfb~;
#X text 175 4966 sine oscilator with feedback;
#X obj 30 4993 osc.square~;
#X text 175 4993 Bandlimited square wave oscillator;
#X obj 30 5020 osc.tri~;
#X text 175 5020 Bandlimited triangle wave oscillator;
#X obj 20 5047 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 5088 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5099 pass.changed;
#X text 175 5099 rejects redundant input values;
#X obj 30 5126 pass.this;
#X text 175 5126 pass only specified values;
#X obj 20 5153 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 5194 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5205 path.basename;
#X text 175 5205 outputs filename portion of pathname;
#X obj 30 5232 path.dirname;
#X text 175 5232 outputs directory portion of pathname;
#X obj 20 5259 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5300 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5311 is_any;
#X text 175 5311 checks if input data has *any* type;
#X obj 30 5338 is_bang;
#X text 175 5338 checks if input data has *bang* type;
#X obj 30 5365 is_even;
#X text 175 5365 checks if input number is even;
#X obj 30 5392 is_float;
#X text 175 5392 checks if input data has *float* type;
#X obj 30 5419 is_list;
#X text 175 5419 checks if input data has *list* type;
#X obj 30 5446 is_odd;
#X text 175 5446 checks if input number is odd;
#X obj 30 5473 is_pointer;
#X text 175 5473 checks if input data has *pointer* type;
#X obj 30 5500 is_symbol;
#X text 175 5500 checks if input data has *symbol* type;
#X obj 20 5527 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5568 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5579 prop.get;
#X text 175 5579 Property extractor;
#X obj 30 5606 prop.set;
#X text 175 5606 Property injector;
#X obj 20 5633 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5674 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5685 random.int;
#X text 175 5685 Random integer generator in specified range;
#X obj 20 5712 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5753 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5764 reject.this;
#X text 175 5764 reject only specified values;
#X obj 20 5791 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5832 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5843 snd.file;
#X text 175 5843 Sound file loader on steroids;
#X obj 20 5870 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5911 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5922 symbol.equal;
#X text 175 5922 check symbols for equality;
#X obj 30 5949 symbol.length;
#X text 175 5949 number of characters in symbol (unicode supported);
#X obj 20 5976 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 6017 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6028 system.getenv;
#X text 175 6028 Get system environment variables;
#X obj 30 6055 system.hostname;
#X text 175 6055 outputs system hostname;
#X obj 30 6082 system.memsize;
#X text 175 6082 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 6119 system.memused;
#X text 175 6119 returns the process physical memory use - current and
peak;
#X obj 30 6146 system.screen_size;
#X text 175 6146 returns current screen size in pixels;
#X obj 20 6173 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6214 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6228 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6225 A bang... that's all;
#X obj 30 6251 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6248 Breakpoint function GUI object;
#X obj 30 6274 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6271 Display GUI object;
#X obj 30 6297 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6294 keyboard widget;
#X obj 30 6320 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6317 knob widget;
#X obj 30 6343 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6340 The matrix of toggles has you.;
#X obj 30 6366 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6363 Scope GUI object;
#X obj 30 6389 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6386 2D slider widget;
#X obj 30 6412 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6409 Multiple slider widget;
#X obj 30 6435 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6432 Spectroscope GUI object;
#X obj 30 6458 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6455 modern toggle widget;
#X obj 20 6478 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6519 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6530 vector.distance;
#X text 175 6530 returns euclidean distance between two points;
#X obj 30 6557 vector.dot;
#X text 175 6557 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6608 vector.length;
#X text 175 6608 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6645 vector.normalize;
#X text 175 6645 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6672 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6672 version: v0.2 \, license: GPL3;
#X obj 20 6691 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;