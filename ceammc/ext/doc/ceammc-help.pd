#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 340 function;
#X text 175 340 named function;
#X obj 30 367 function.call;
#X text 175 367 call named function;
#X obj 20 394 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 435 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 446 array.p2s;
#X text 175 446 convert array phase [0\..1] to sample position;
#X obj 30 473 array.s2p;
#X text 175 473 convert array sample position to relative phase
position [0\..1];
#X obj 30 510 conv.bpm2hz;
#X text 175 510 converts BPM to frequency in herz;
#X obj 30 537 conv.bpm2ms;
#X text 175 537 convert frequency in BPM to period in milliseconds;
#X obj 30 564 conv.bpm2sec;
#X text 175 564 convert frequency in BPM to period in seconds;
#X obj 30 591 conv.lin2curve;
#X text 175 591 map linear to exponential range with 0 allowed.;
#X obj 30 618 conv.lin2exp;
#X text 175 618 maps linear range to exponential range;
#X obj 30 645 conv.lin2lin;
#X text 175 645 convert from one linear range to another;
#X obj 30 672 conv.sec2str;
#X text 175 672 converts float time in seconds to formated symbol;
#X obj 30 699 conv.str2sec;
#X text 175 699 converts formatted time to float value in seconds;
#X obj 20 726 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 767 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 778 data.fifo;
#X text 175 778 First-In-First-Out (FIFO) queue data container;
#X obj 30 805 data.list;
#X text 175 805 list container;
#X obj 20 832 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 873 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 884 dyn.comp2~;
#X text 175 884 stereo dynamic range compressor;
#X obj 30 911 dyn.comp~;
#X text 175 911 mono dynamic range compressors;
#X obj 30 938 dyn.gate2~;
#X text 175 938 stereo signal gate;
#X obj 30 965 dyn.gate~;
#X text 175 965 mono signal gate;
#X obj 30 992 dyn.limit2~;
#X text 175 992 stereo 1176LN Peak Limiter;
#X obj 30 1019 dyn.limit~;
#X text 175 1019 mono 1176LN Peak Limiter;
#X obj 30 1046 dyn.softclip~;
#X text 175 1046 soft signal clip;
#X obj 20 1073 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1114 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1125 env.adsr~;
#X text 175 1125 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1152 env.ar~;
#X text 175 1152 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1189 env.follow~;
#X text 175 1189 Envelope follower with independent attack and release
times.;
#X obj 20 1226 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1267 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1278 expand_env;
#X text 175 1278 Substitute enviroment variables in data stream;
#X obj 30 1305 flow.change;
#X text 175 1305 rejects redundant input values;
#X obj 30 1332 flow.pass;
#X text 175 1332 pass specified values;
#X obj 30 1359 flow.pass_if;
#X text 175 1359 pass values that accepted by predicate object;
#X obj 30 1386 flow.reject;
#X text 175 1386 reject specified values;
#X obj 30 1413 flow.reject_if;
#X text 175 1413 reject values by predicate;
#X obj 30 1440 flow.split;
#X text 175 1440 split data flow by external side-chain predicate;
#X obj 30 1467 flow.sync;
#X text 175 1467 bus with only hot inlets;
#X obj 30 1494 replace;
#X text 175 1494 Replace atoms in data stream;
#X obj 20 1521 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1562 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1573 flt.biquad~;
#X text 175 1573 second order IIR filter.;
#X obj 30 1600 flt.bpf12~;
#X text 175 1600 Band-pass filter with 12/db per octave slope;
#X obj 30 1627 flt.bpf24~;
#X text 175 1627 Band-pass filter with 24/db per octave slope;
#X obj 30 1654 flt.c_bpf~;
#X text 175 1654 BPF coefficent calculator for biquad filter;
#X obj 30 1681 flt.c_highshelf~;
#X text 175 1681 Highshelf filter coefficent calculator for biquad;
#X obj 30 1708 flt.c_hpf~;
#X text 175 1708 HPF coefficent calculator for biquad filter;
#X obj 30 1735 flt.c_lowshelf~;
#X text 175 1735 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1762 flt.c_lpf~;
#X text 175 1762 LPF coefficent calculator for biquad filter;
#X obj 30 1789 flt.c_notch~;
#X text 175 1789 Band-reject coefficent calculator for biquad filter;
#X obj 30 1816 flt.c_peak~;
#X text 175 1816 Peaking equalizer calculator for biquad.;
#X obj 30 1843 flt.dcblock2~;
#X text 175 1843 stereo DC blocker;
#X obj 30 1870 flt.dcblock~;
#X text 175 1870 mono DC blocker;
#X obj 30 1897 flt.eq_peak~;
#X text 175 1897 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1948 flt.highshelf~;
#X text 175 1948 gain boost|cut above some frequency;
#X obj 30 1975 flt.hpf12~;
#X text 175 1975 High-pass filter with 12/db per octave slope;
#X obj 30 2002 flt.hpf24~;
#X text 175 2002 High-pass filter with 24/db per octave slope;
#X obj 30 2029 flt.lowshelf~;
#X text 175 2029 gain boost|cut below some frequency;
#X obj 30 2056 flt.lpf12~;
#X text 175 2056 Low-pass filter with 12/db per octave slope;
#X obj 30 2083 flt.lpf24~;
#X text 175 2083 Low-pass filter with 24/db per octave slope;
#X obj 30 2110 flt.notch~;
#X text 175 2110 band-rejection filter;
#X obj 30 2137 flt.resonbp~;
#X text 175 2137 Simple resonant bandpass filter;
#X obj 20 2164 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2205 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2216 fx.distortion~;
#X text 175 2216 cubic nonlinearity distortion;
#X obj 30 2243 fx.flanger~;
#X text 175 2243 mono flanging effect;
#X obj 30 2270 fx.freeverb2~;
#X text 175 2270 freeverb2 - stereo version of freeverb;
#X obj 30 2297 fx.freeverb~;
#X text 175 2297 freeverb - common used open-source reverb;
#X obj 30 2324 fx.freqshift~;
#X text 175 2324 frequency shifter or single-sideband ring modulation;
#X obj 30 2351 fx.pitchshift~;
#X text 175 2351 simple pitch shifter based on 2 delay lines;
#X obj 30 2378 fx.zita_rev1~;
#X text 175 2378 Zita stereo reverb;
#X obj 20 2405 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2446 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2457 global.float;
#X text 175 2457 global named float object;
#X obj 30 2484 global.int;
#X text 175 2484 global named integer object;
#X obj 30 2511 global.list;
#X text 175 2511 global named list object;
#X obj 20 2538 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2579 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2590 lfo.impulse~;
#X text 175 2590 Unit-amplitude low-frequency impulse train;
#X obj 30 2617 lfo.square~;
#X text 175 2617 Positive low frequence square wave;
#X obj 30 2644 lfo.tri~;
#X text 175 2644 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2671 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2712 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2723 list.all_of;
#X text 175 2723 checks if all list atoms accepted by predicate;
#X obj 30 2750 list.any_of;
#X text 175 2750 checks if at least one list element is accepted by
predicate;
#X obj 30 2787 list.apply_to;
#X text 175 2787 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2824 list.at;
#X text 175 2824 returns list element at given position;
#X obj 30 2851 list.choice;
#X text 175 2851 returns random element from list;
#X obj 30 2878 list.count;
#X text 175 2878 returns the number of items that equal to specified
value;
#X obj 30 2905 list.count_if;
#X text 175 2905 returns the number of items that satisfy to external
predicate.;
#X obj 30 2942 list.deinterleave;
#X text 175 2942 splits list to N lists \, each to separate output;
#X obj 30 2969 list.delta;
#X text 175 2969 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3006 list.each;
#X text 175 3006 maps each list value via external object(s);
#X obj 30 3033 list.equal;
#X text 175 3033 checks if given lists are equal;
#X obj 30 3060 list.first;
#X text 175 3060 returns first list element;
#X obj 30 3087 list.gen;
#X text 175 3087 generates list of specified length via external
generator;
#X obj 30 3114 list.integrator;
#X text 175 3114 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3151 list.interleave;
#X text 175 3151 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3202 list.last;
#X text 175 3202 returns last list element;
#X obj 30 3229 list.length;
#X text 175 3229 returns the number of atoms in the message;
#X obj 30 3256 list.max;
#X text 175 3256 returns largest element in the list;
#X obj 30 3283 list.mean;
#X text 175 3283 calculates average of list of floats;
#X obj 30 3310 list.min;
#X text 175 3310 returns smallest element in the list;
#X obj 30 3337 list.none_of;
#X text 175 3337 checks if none of list atoms is accepted by
predicate;
#X obj 30 3364 list.normalize;
#X text 175 3364 normalizes float list values to get their sum = 1.0;
#X obj 30 3391 list.product;
#X text 175 3391 calculates product of floats in list;
#X obj 30 3418 list.range;
#X text 175 3418 returns list smallest and largest value;
#X obj 30 3445 list.reduce;
#X text 175 3445 apply function of two arguments cumulatively to the
list;
#X obj 30 3472 list.remove_if;
#X text 175 3472 remove elements by predicate;
#X obj 30 3499 list.resize;
#X text 175 3499 changes list size with;
#X obj 30 3526 list.reverse;
#X text 175 3526 reverses the order of the elements in the list;
#X obj 30 3553 list.seq;
#X text 175 3553 numeric sequence list generator;
#X obj 30 3580 list.shuffle;
#X text 175 3580 randomly rearranges elements in list;
#X obj 30 3607 list.sort;
#X text 175 3607 sorts list values by ascending order;
#X obj 30 3634 list.sum;
#X text 175 3634 calculates sum of floats in list;
#X obj 30 3661 list.unpack;
#X text 175 3661 sends list element one by one separately;
#X obj 30 3688 list.unwrap;
#X text 175 3688 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3725 list.walk;
#X text 175 3725 Walks thru the list;
#X obj 30 3752 list.wrap;
#X text 175 3752 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3803 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3844 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3855 live.capture~;
#X text 175 3855 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3892 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3933 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3944 math.abs;
#X text 175 3944 absolute value function;
#X obj 30 3971 math.acos;
#X text 175 3971 arc cosine function;
#X obj 30 3998 math.acosh;
#X text 175 3998 inverse hyperbolic cosine function;
#X obj 30 4025 math.and;
#X text 175 4025 operation AND for multiple arguments;
#X obj 30 4052 math.approx;
#X text 175 4052 check if input value approximately equal to pattern;
#X obj 30 4079 math.asin;
#X text 175 4079 arc sine function;
#X obj 30 4106 math.asinh;
#X text 175 4106 inverse hyperbolic sine function;
#X obj 30 4133 math.atan;
#X text 175 4133 arc tangent function;
#X obj 30 4160 math.atanh;
#X text 175 4160 inverse hyperbolic tangent function;
#X obj 30 4187 math.cbrt;
#X text 175 4187 cube root function;
#X obj 30 4214 math.ceil;
#X text 175 4214 round to smallest integral value not less than input
value;
#X obj 30 4241 math.cos;
#X text 175 4241 cosine function;
#X obj 30 4268 math.cosh;
#X text 175 4268 hyperbolic cosine function;
#X obj 30 4295 math.e;
#X text 175 4295 mathematical constant \, base of the natural
logarithm;
#X obj 30 4322 math.exp;
#X text 175 4322 exponential functions;
#X obj 30 4349 math.exp2;
#X text 175 4349 exponential functions;
#X obj 30 4376 math.floor;
#X text 175 4376 round to largest integral value not greater than x;
#X obj 30 4403 math.inf;
#X text 175 4403 infinity value that cannot be represented accurately;
#X obj 30 4430 math.log;
#X text 175 4430 logarithm functions;
#X obj 30 4457 math.log10;
#X text 175 4457 logarithm functions;
#X obj 30 4484 math.log2;
#X text 175 4484 logarithm functions;
#X obj 30 4511 math.nan;
#X text 175 4511 Not a Number \, unrepresentable value;
#X obj 30 4538 math.neg;
#X text 175 4538 negate function;
#X obj 30 4565 math.pi;
#X text 175 4565 mathematical constant;
#X obj 30 4592 math.reciprocal;
#X text 175 4592 calculate reciprocal number;
#X obj 30 4619 math.round;
#X text 175 4619 round to integral value \, regardless of rounding
direction;
#X obj 30 4646 math.sign;
#X text 175 4646 sign function;
#X obj 30 4673 math.sin;
#X text 175 4673 sine function;
#X obj 30 4700 math.sinh;
#X text 175 4700 hyperbolic sine function;
#X obj 30 4727 math.sqrt;
#X text 175 4727 square root function;
#X obj 30 4754 math.squared;
#X text 175 4754 value square;
#X obj 30 4781 math.tan;
#X text 175 4781 tangent function;
#X obj 30 4808 math.tanh;
#X text 175 4808 hyperbolic tangent function;
#X obj 30 4835 math.trunc;
#X text 175 4835 truncate to integer value;
#X obj 20 4862 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4903 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4914 msg;
#X text 175 4914 message constructor;
#X obj 20 4941 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4982 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4993 noise.pink~;
#X text 175 4993 Pink noise generator;
#X obj 30 5020 noise.white~;
#X text 175 5020 White noise generator;
#X obj 20 5047 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 5088 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5099 osc.impulse~;
#X text 175 5099 Bandlimited impulse train generator;
#X obj 30 5126 osc.pulse~;
#X text 175 5126 Bandlimited pulse train oscillator.;
#X obj 30 5153 osc.saw~;
#X text 175 5153 Bandlimited saw wave oscillator;
#X obj 30 5180 osc.sinfb~;
#X text 175 5180 sine oscilator with feedback;
#X obj 30 5207 osc.square~;
#X text 175 5207 Bandlimited square wave oscillator;
#X obj 30 5234 osc.tri~;
#X text 175 5234 Bandlimited triangle wave oscillator;
#X obj 20 5261 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 5302 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5313 path.basename;
#X text 175 5313 outputs filename portion of pathname;
#X obj 30 5340 path.dirname;
#X text 175 5340 outputs directory portion of pathname;
#X obj 20 5367 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5408 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5419 is_any;
#X text 175 5419 checks if input data has *any* type;
#X obj 30 5446 is_bang;
#X text 175 5446 checks if input data has *bang* type;
#X obj 30 5473 is_even;
#X text 175 5473 checks if input number is even;
#X obj 30 5500 is_float;
#X text 175 5500 checks if input data has *float* type;
#X obj 30 5527 is_list;
#X text 175 5527 checks if input data has *list* type;
#X obj 30 5554 is_odd;
#X text 175 5554 checks if input number is odd;
#X obj 30 5581 is_pointer;
#X text 175 5581 checks if input data has *pointer* type;
#X obj 30 5608 is_symbol;
#X text 175 5608 checks if input data has *symbol* type;
#X obj 20 5635 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5676 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5687 prop.get;
#X text 175 5687 Property extractor;
#X obj 30 5714 prop.set;
#X text 175 5714 Property injector;
#X obj 20 5741 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5782 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5793 random.int;
#X text 175 5793 Random integer generator in specified range;
#X obj 20 5820 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5861 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5872 snd.file;
#X text 175 5872 Sound file loader on steroids;
#X obj 20 5899 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5940 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5951 symbol.equal;
#X text 175 5951 check symbols for equality;
#X obj 30 5978 symbol.length;
#X text 175 5978 number of characters in symbol (unicode supported);
#X obj 20 6005 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 6046 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6057 system.getenv;
#X text 175 6057 Get system environment variables;
#X obj 30 6084 system.hostname;
#X text 175 6084 outputs system hostname;
#X obj 30 6111 system.memsize;
#X text 175 6111 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 6148 system.memused;
#X text 175 6148 returns the process physical memory use - current and
peak;
#X obj 30 6175 system.screen_size;
#X text 175 6175 returns current screen size in pixels;
#X obj 20 6202 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6243 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6257 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6254 A bang... that's all;
#X obj 30 6280 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6277 Breakpoint function GUI object;
#X obj 30 6303 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6300 Display GUI object;
#X obj 30 6326 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6323 keyboard widget;
#X obj 30 6349 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6346 knob widget;
#X obj 30 6372 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6369 The matrix of toggles has you.;
#X obj 30 6395 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6392 Scope GUI object;
#X obj 30 6418 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6415 2D slider widget;
#X obj 30 6441 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6438 Multiple slider widget;
#X obj 30 6464 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6461 Spectroscope GUI object;
#X obj 30 6487 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6484 modern toggle widget;
#X obj 20 6507 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6548 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6559 vector.distance;
#X text 175 6559 returns euclidean distance between two points;
#X obj 30 6586 vector.dot;
#X text 175 6586 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6637 vector.length;
#X text 175 6637 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6674 vector.normalize;
#X text 175 6674 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6701 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6701 version: v0.2 \, license: GPL3;
#X obj 20 6720 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;