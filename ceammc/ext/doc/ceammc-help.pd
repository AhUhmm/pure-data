#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 343 ui.link @title [function] @url function-help.pd;
#X text 175 340 named function;
#X obj 30 363 function.call;
#X text 175 363 call named function;
#X obj 20 390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 431 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 442 array.p2s;
#X text 175 442 convert array phase [0\..1] to sample position;
#X obj 30 469 array.s2p;
#X text 175 469 convert array sample position to relative phase
position [0\..1];
#X obj 30 506 conv.bpm2hz;
#X text 175 506 converts BPM to frequency in herz;
#X obj 30 533 conv.bpm2ms;
#X text 175 533 convert frequency in BPM to period in milliseconds;
#X obj 30 560 conv.bpm2sec;
#X text 175 560 convert frequency in BPM to period in seconds;
#X obj 30 587 conv.lin2curve;
#X text 175 587 map linear to exponential range with 0 allowed.;
#X obj 30 614 conv.lin2exp;
#X text 175 614 maps linear range to exponential range;
#X obj 30 641 conv.lin2lin;
#X text 175 641 convert from one linear range to another;
#X obj 30 668 conv.sec2str;
#X text 175 668 converts float time in seconds to formated symbol;
#X obj 30 695 conv.str2sec;
#X text 175 695 converts formatted time to float value in seconds;
#X obj 20 722 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 763 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 774 data.fifo;
#X text 175 774 First-In-First-Out (FIFO) queue data container;
#X obj 30 801 data.list;
#X text 175 801 list container;
#X obj 30 828 data.set;
#X text 175 828 container that store unique elements;
#X obj 30 855 data.set2list;
#X text 175 855 converts set to list;
#X obj 30 882 set.contains;
#X text 175 882 check if specified element is in set;
#X obj 30 909 set.diff;
#X text 175 909 difference between two sets;
#X obj 30 936 set.equal;
#X text 175 936 checks if two sets are equal (contains same elements);
#X obj 30 963 set.intersect;
#X text 175 963 output intersection of given sets;
#X obj 30 990 set.size;
#X text 175 990 get number of elements in set;
#X obj 30 1017 set.symdiff;
#X text 175 1017 symmetric difference between two sets;
#X obj 30 1044 set.union;
#X text 175 1044 output union of given sets;
#X obj 20 1071 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1112 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1123 dyn.comp2~;
#X text 175 1123 stereo dynamic range compressor;
#X obj 30 1150 dyn.comp~;
#X text 175 1150 mono dynamic range compressors;
#X obj 30 1177 dyn.gate2~;
#X text 175 1177 stereo signal gate;
#X obj 30 1204 dyn.gate~;
#X text 175 1204 mono signal gate;
#X obj 30 1231 dyn.limit2~;
#X text 175 1231 stereo 1176LN Peak Limiter;
#X obj 30 1258 dyn.limit~;
#X text 175 1258 mono 1176LN Peak Limiter;
#X obj 30 1285 dyn.softclip~;
#X text 175 1285 soft signal clip;
#X obj 20 1312 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1353 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1364 env.adsr~;
#X text 175 1364 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1391 env.ar~;
#X text 175 1391 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1428 env.follow~;
#X text 175 1428 Envelope follower with independent attack and release
times.;
#X obj 20 1465 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1506 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1517 expand_env;
#X text 175 1517 Substitute enviroment variables in data stream;
#X obj 30 1544 flow.change;
#X text 175 1544 rejects redundant input values;
#X obj 30 1571 flow.group;
#X text 175 1571 group data atoms in list of specified size;
#X obj 30 1598 flow.pass;
#X text 175 1598 pass specified values;
#X obj 30 1625 flow.pass_if;
#X text 175 1625 pass values that accepted by predicate object;
#X obj 30 1652 flow.reject;
#X text 175 1652 reject specified values;
#X obj 30 1679 flow.reject_if;
#X text 175 1679 reject values by predicate;
#X obj 30 1706 flow.split;
#X text 175 1706 split data flow by external side-chain predicate;
#X obj 30 1733 flow.sync;
#X text 175 1733 bus with only hot inlets;
#X obj 30 1760 replace;
#X text 175 1760 Replace atoms in data stream;
#X obj 20 1787 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1828 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1839 flt.biquad~;
#X text 175 1839 second order IIR filter.;
#X obj 30 1866 flt.bpf12~;
#X text 175 1866 Band-pass filter with 12/db per octave slope;
#X obj 30 1893 flt.bpf24~;
#X text 175 1893 Band-pass filter with 24/db per octave slope;
#X obj 30 1920 flt.c_bpf~;
#X text 175 1920 BPF coefficent calculator for biquad filter;
#X obj 30 1947 flt.c_highshelf~;
#X text 175 1947 Highshelf filter coefficent calculator for biquad;
#X obj 30 1974 flt.c_hpf~;
#X text 175 1974 HPF coefficent calculator for biquad filter;
#X obj 30 2001 flt.c_lowshelf~;
#X text 175 2001 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2028 flt.c_lpf~;
#X text 175 2028 LPF coefficent calculator for biquad filter;
#X obj 30 2055 flt.c_notch~;
#X text 175 2055 Band-reject coefficent calculator for biquad filter;
#X obj 30 2082 flt.c_peak~;
#X text 175 2082 Peaking equalizer calculator for biquad.;
#X obj 30 2109 flt.dcblock2~;
#X text 175 2109 stereo DC blocker;
#X obj 30 2136 flt.dcblock~;
#X text 175 2136 mono DC blocker;
#X obj 30 2163 flt.eq_peak~;
#X text 175 2163 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2214 flt.highshelf~;
#X text 175 2214 gain boost|cut above some frequency;
#X obj 30 2241 flt.hpf12~;
#X text 175 2241 High-pass filter with 12/db per octave slope;
#X obj 30 2268 flt.hpf24~;
#X text 175 2268 High-pass filter with 24/db per octave slope;
#X obj 30 2295 flt.lowshelf~;
#X text 175 2295 gain boost|cut below some frequency;
#X obj 30 2322 flt.lpf12~;
#X text 175 2322 Low-pass filter with 12/db per octave slope;
#X obj 30 2349 flt.lpf24~;
#X text 175 2349 Low-pass filter with 24/db per octave slope;
#X obj 30 2376 flt.notch~;
#X text 175 2376 band-rejection filter;
#X obj 30 2403 flt.resonbp~;
#X text 175 2403 Simple resonant bandpass filter;
#X obj 20 2430 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2471 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2482 fx.distortion~;
#X text 175 2482 cubic nonlinearity distortion;
#X obj 30 2509 fx.flanger~;
#X text 175 2509 mono flanging effect;
#X obj 30 2536 fx.freeverb2~;
#X text 175 2536 freeverb2 - stereo version of freeverb;
#X obj 30 2563 fx.freeverb~;
#X text 175 2563 freeverb - common used open-source reverb;
#X obj 30 2590 fx.freqshift~;
#X text 175 2590 frequency shifter or single-sideband ring modulation;
#X obj 30 2617 fx.pitchshift~;
#X text 175 2617 simple pitch shifter based on 2 delay lines;
#X obj 30 2644 fx.zita_rev1~;
#X text 175 2644 Zita stereo reverb;
#X obj 20 2671 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2712 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2723 global.float;
#X text 175 2723 global named float object;
#X obj 30 2750 global.int;
#X text 175 2750 global named integer object;
#X obj 30 2777 global.list;
#X text 175 2777 global named list object;
#X obj 20 2804 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2845 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2856 lfo.impulse~;
#X text 175 2856 Unit-amplitude low-frequency impulse train;
#X obj 30 2883 lfo.square~;
#X text 175 2883 Positive low frequence square wave;
#X obj 30 2910 lfo.tri~;
#X text 175 2910 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2937 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2978 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2989 list.all_of;
#X text 175 2989 checks if all list atoms accepted by predicate;
#X obj 30 3016 list.any_of;
#X text 175 3016 checks if at least one list element is accepted by
predicate;
#X obj 30 3053 list.apply_to;
#X text 175 3053 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3090 list.at;
#X text 175 3090 returns list element at given position;
#X obj 30 3117 list.choice;
#X text 175 3117 returns random element from list;
#X obj 30 3144 list.count;
#X text 175 3144 returns the number of items that equal to specified
value;
#X obj 30 3171 list.count_if;
#X text 175 3171 returns the number of items that satisfy to external
predicate.;
#X obj 30 3208 list.deinterleave;
#X text 175 3208 splits list to N lists \, each to separate output;
#X obj 30 3235 list.delta;
#X text 175 3235 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3272 list.each;
#X text 175 3272 maps each list value via external object(s);
#X obj 30 3299 list.equal;
#X text 175 3299 checks if given lists are equal;
#X obj 30 3326 list.first;
#X text 175 3326 returns first list element;
#X obj 30 3353 list.gen;
#X text 175 3353 generates list of specified length via external
generator;
#X obj 30 3380 list.integrator;
#X text 175 3380 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3417 list.interleave;
#X text 175 3417 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3468 list.last;
#X text 175 3468 returns last list element;
#X obj 30 3495 list.length;
#X text 175 3495 returns the number of atoms in the message;
#X obj 30 3522 list.max;
#X text 175 3522 returns largest element in the list;
#X obj 30 3549 list.mean;
#X text 175 3549 calculates average of list of floats;
#X obj 30 3576 list.min;
#X text 175 3576 returns smallest element in the list;
#X obj 30 3603 list.none_of;
#X text 175 3603 checks if none of list atoms is accepted by
predicate;
#X obj 30 3630 list.normalize;
#X text 175 3630 normalizes float list values to get their sum = 1.0;
#X obj 30 3657 list.product;
#X text 175 3657 calculates product of floats in list;
#X obj 30 3684 list.range;
#X text 175 3684 returns list smallest and largest value;
#X obj 30 3711 list.reduce;
#X text 175 3711 apply function of two arguments cumulatively to the
list;
#X obj 30 3738 list.remove_if;
#X text 175 3738 remove elements by predicate;
#X obj 30 3765 list.resize;
#X text 175 3765 changes list size with;
#X obj 30 3792 list.reverse;
#X text 175 3792 reverses the order of the elements in the list;
#X obj 30 3819 list.seq;
#X text 175 3819 numeric sequence list generator;
#X obj 30 3846 list.shuffle;
#X text 175 3846 randomly rearranges elements in list;
#X obj 30 3873 list.sort;
#X text 175 3873 sorts list values by ascending order;
#X obj 30 3900 list.sum;
#X text 175 3900 calculates sum of floats in list;
#X obj 30 3927 list.unpack;
#X text 175 3927 sends list element one by one separately;
#X obj 30 3954 list.unwrap;
#X text 175 3954 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3991 list.walk;
#X text 175 3991 Walks thru the list;
#X obj 30 4018 list.wrap;
#X text 175 4018 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4069 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4110 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4121 live.capture~;
#X text 175 4121 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4158 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 4199 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4210 math.abs;
#X text 175 4210 absolute value function;
#X obj 30 4237 math.acos;
#X text 175 4237 arc cosine function;
#X obj 30 4264 math.acosh;
#X text 175 4264 inverse hyperbolic cosine function;
#X obj 30 4291 math.and;
#X text 175 4291 operation AND for multiple arguments;
#X obj 30 4318 math.approx;
#X text 175 4318 check if input value approximately equal to pattern;
#X obj 30 4345 math.asin;
#X text 175 4345 arc sine function;
#X obj 30 4372 math.asinh;
#X text 175 4372 inverse hyperbolic sine function;
#X obj 30 4399 math.atan;
#X text 175 4399 arc tangent function;
#X obj 30 4426 math.atanh;
#X text 175 4426 inverse hyperbolic tangent function;
#X obj 30 4453 math.cbrt;
#X text 175 4453 cube root function;
#X obj 30 4480 math.ceil;
#X text 175 4480 round to smallest integral value not less than input
value;
#X obj 30 4507 math.cos;
#X text 175 4507 cosine function;
#X obj 30 4534 math.cosh;
#X text 175 4534 hyperbolic cosine function;
#X obj 30 4561 math.e;
#X text 175 4561 mathematical constant \, base of the natural
logarithm;
#X obj 30 4588 math.exp;
#X text 175 4588 exponential functions;
#X obj 30 4615 math.exp2;
#X text 175 4615 exponential functions;
#X obj 30 4642 math.floor;
#X text 175 4642 round to largest integral value not greater than x;
#X obj 30 4669 math.gcd;
#X text 175 4669 calculate greatest common divisor;
#X obj 30 4696 math.inf;
#X text 175 4696 infinity value that cannot be represented accurately;
#X obj 30 4723 math.lcm;
#X text 175 4723 calculate least common multiple;
#X obj 30 4750 math.log;
#X text 175 4750 logarithm functions;
#X obj 30 4777 math.log10;
#X text 175 4777 logarithm functions;
#X obj 30 4804 math.log2;
#X text 175 4804 logarithm functions;
#X obj 30 4831 math.nan;
#X text 175 4831 Not a Number \, unrepresentable value;
#X obj 30 4858 math.neg;
#X text 175 4858 negate function;
#X obj 30 4885 math.pi;
#X text 175 4885 mathematical constant;
#X obj 30 4912 math.reciprocal;
#X text 175 4912 calculate reciprocal number;
#X obj 30 4939 math.round;
#X text 175 4939 round to integral value \, regardless of rounding
direction;
#X obj 30 4966 math.sign;
#X text 175 4966 sign function;
#X obj 30 4993 math.sin;
#X text 175 4993 sine function;
#X obj 30 5020 math.sinh;
#X text 175 5020 hyperbolic sine function;
#X obj 30 5047 math.sqrt;
#X text 175 5047 square root function;
#X obj 30 5074 math.squared;
#X text 175 5074 value square;
#X obj 30 5101 math.tan;
#X text 175 5101 tangent function;
#X obj 30 5128 math.tanh;
#X text 175 5128 hyperbolic tangent function;
#X obj 30 5155 math.trunc;
#X text 175 5155 truncate to integer value;
#X obj 20 5182 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 5223 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5234 msg;
#X text 175 5234 message constructor;
#X obj 20 5261 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 5302 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5313 noise.pink~;
#X text 175 5313 Pink noise generator;
#X obj 30 5340 noise.white~;
#X text 175 5340 White noise generator;
#X obj 20 5367 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 5408 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5419 osc.impulse~;
#X text 175 5419 Bandlimited impulse train generator;
#X obj 30 5446 osc.pulse~;
#X text 175 5446 Bandlimited pulse train oscillator.;
#X obj 30 5473 osc.saw~;
#X text 175 5473 Bandlimited saw wave oscillator;
#X obj 30 5500 osc.sinfb~;
#X text 175 5500 sine oscilator with feedback;
#X obj 30 5527 osc.square~;
#X text 175 5527 Bandlimited square wave oscillator;
#X obj 30 5554 osc.tri~;
#X text 175 5554 Bandlimited triangle wave oscillator;
#X obj 20 5581 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 5622 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5633 path.basename;
#X text 175 5633 outputs filename portion of pathname;
#X obj 30 5660 path.dirname;
#X text 175 5660 outputs directory portion of pathname;
#X obj 20 5687 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5728 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5739 is_any;
#X text 175 5739 checks if input data has *any* type;
#X obj 30 5766 is_bang;
#X text 175 5766 checks if input data has *bang* type;
#X obj 30 5793 is_even;
#X text 175 5793 checks if input number is even;
#X obj 30 5820 is_float;
#X text 175 5820 checks if input data has *float* type;
#X obj 30 5847 is_list;
#X text 175 5847 checks if input data has *list* type;
#X obj 30 5874 is_odd;
#X text 175 5874 checks if input number is odd;
#X obj 30 5901 is_pointer;
#X text 175 5901 checks if input data has *pointer* type;
#X obj 30 5928 is_symbol;
#X text 175 5928 checks if input data has *symbol* type;
#X obj 20 5955 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5996 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6007 prop.get;
#X text 175 6007 Property extractor;
#X obj 30 6034 prop.set;
#X text 175 6034 Property injector;
#X obj 20 6061 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 6102 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6113 random.float;
#X text 175 6113 random float generator in specified range;
#X obj 30 6140 random.int;
#X text 175 6140 Random integer generator in specified range;
#X obj 20 6167 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 6208 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6219 snd.file;
#X text 175 6219 Sound file loader on steroids;
#X obj 20 6246 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 6287 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6298 string;
#X text 175 6298 string constructor;
#X obj 30 6325 string.contains;
#X text 175 6325 checks if given string contains specified substring;
#X obj 30 6352 string.ends_with;
#X text 175 6352 checks if given string ends with specified suffix;
#X obj 30 6379 string.equal;
#X text 175 6379 check strings for equality;
#X obj 30 6406 string.format;
#X text 175 6406 formats string like printf.;
#X obj 30 6433 string.join;
#X text 175 6433 joins (concatenates) strings with separator;
#X obj 30 6460 string.length;
#X text 175 6460 number of characters in string (unicode supported);
#X obj 30 6487 string.remove;
#X text 175 6487 remove substring from input string;
#X obj 30 6514 string.replace;
#X text 175 6514 replace from one substring to another in input
string;
#X obj 30 6541 string.split;
#X text 175 6541 split string by separator;
#X obj 30 6568 string.starts_with;
#X text 175 6568 checks if given string starts with specified prefix;
#X obj 30 6595 string.substr;
#X text 175 6595 extract substring from input string;
#X obj 30 6622 string2symbol;
#X text 175 6622 converts string to symbol;
#X obj 20 6649 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 6690 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6701 symbol.equal;
#X text 175 6701 check symbols for equality;
#X obj 30 6728 symbol.length;
#X text 175 6728 number of characters in symbol (unicode supported);
#X obj 20 6755 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 6796 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6807 system.getenv;
#X text 175 6807 Get system environment variables;
#X obj 30 6834 system.hostname;
#X text 175 6834 outputs system hostname;
#X obj 30 6861 system.memsize;
#X text 175 6861 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 6898 system.memused;
#X text 175 6898 returns the process physical memory use - current and
peak;
#X obj 30 6925 system.screen_size;
#X text 175 6925 returns current screen size in pixels;
#X obj 20 6952 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6993 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7007 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 7004 A bang... that's all;
#X obj 30 7030 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 7027 Breakpoint function GUI object;
#X obj 30 7053 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 7050 Display GUI object;
#X obj 30 7076 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 7073 keyboard widget;
#X obj 30 7099 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 7096 knob widget;
#X obj 30 7122 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 7119 The matrix of toggles has you.;
#X obj 30 7145 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 7142 Scope GUI object;
#X obj 30 7168 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 7165 2D slider widget;
#X obj 30 7191 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 7188 Multiple slider widget;
#X obj 30 7214 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 7211 Spectroscope GUI object;
#X obj 30 7237 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 7234 modern toggle widget;
#X obj 20 7257 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 7298 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7309 vector.distance;
#X text 175 7309 returns euclidean distance between two points;
#X obj 30 7336 vector.dot;
#X text 175 7336 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 7387 vector.length;
#X text 175 7387 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 7424 vector.normalize;
#X text 175 7424 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 7451 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 7451 version: v0.2 \, license: GPL3;
#X obj 20 7470 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;