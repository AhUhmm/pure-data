#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 343 ui.link @title [function] @url function-help.pd;
#X text 175 340 named function;
#X obj 30 363 function.call;
#X text 175 363 call named function;
#X obj 20 390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 431 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 442 array.p2s;
#X text 175 442 convert array phase [0\..1] to sample position;
#X obj 30 469 array.s2p;
#X text 175 469 convert array sample position to relative phase
position [0\..1];
#X obj 30 506 conv.bpm2hz;
#X text 175 506 converts BPM to frequency in herz;
#X obj 30 533 conv.bpm2ms;
#X text 175 533 convert frequency in BPM to period in milliseconds;
#X obj 30 560 conv.bpm2sec;
#X text 175 560 convert frequency in BPM to period in seconds;
#X obj 30 587 conv.cc2amp;
#X text 175 587 convert from MIDI Control Change range;
#X obj 30 614 conv.lin2curve;
#X text 175 614 map linear to exponential range with 0 allowed.;
#X obj 30 641 conv.lin2exp;
#X text 175 641 maps linear range to exponential range;
#X obj 30 668 conv.lin2lin;
#X text 175 668 convert from one linear range to another;
#X obj 30 695 conv.samp2sec;
#X text 175 695 convert samples to time according to samplerate;
#X obj 30 722 conv.sec2samp;
#X text 175 722 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 759 conv.sec2str;
#X text 175 759 converts float time in seconds to formated symbol (or
string);
#X obj 30 796 conv.str2sec;
#X text 175 796 converts formatted time to float value in seconds;
#X obj 20 823 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 864 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 875 data.fifo;
#X text 175 875 First-In-First-Out (FIFO) queue data container;
#X obj 30 902 data.list;
#X text 175 902 list container;
#X obj 30 929 data.set;
#X text 175 929 container that store unique elements;
#X obj 30 956 data.set2list;
#X text 175 956 converts set to list;
#X obj 30 983 set.contains;
#X text 175 983 check if specified element is in set;
#X obj 30 1010 set.diff;
#X text 175 1010 difference between two sets;
#X obj 30 1037 set.equal;
#X text 175 1037 checks if two sets are equal (contains same
elements);
#X obj 30 1064 set.intersect;
#X text 175 1064 output intersection of given sets;
#X obj 30 1091 set.size;
#X text 175 1091 get number of elements in set;
#X obj 30 1118 set.symdiff;
#X text 175 1118 symmetric difference between two sets;
#X obj 30 1145 set.union;
#X text 175 1145 output union of given sets;
#X obj 20 1172 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1213 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1224 dyn.comp2~;
#X text 175 1224 stereo dynamic range compressor;
#X obj 30 1251 dyn.comp~;
#X text 175 1251 mono dynamic range compressors;
#X obj 30 1278 dyn.gate2~;
#X text 175 1278 stereo signal gate;
#X obj 30 1305 dyn.gate~;
#X text 175 1305 mono signal gate;
#X obj 30 1332 dyn.limit2~;
#X text 175 1332 stereo 1176LN Peak Limiter;
#X obj 30 1359 dyn.limit~;
#X text 175 1359 mono 1176LN Peak Limiter;
#X obj 30 1386 dyn.softclip~;
#X text 175 1386 soft signal clip;
#X obj 20 1413 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1454 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1465 env.adsr~;
#X text 175 1465 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1492 env.ar~;
#X text 175 1492 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1529 env.follow~;
#X text 175 1529 Envelope follower with independent attack and release
times.;
#X obj 20 1566 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1607 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1618 expand_env;
#X text 175 1618 Substitute enviroment variables in data stream;
#X obj 30 1645 flow.change;
#X text 175 1645 rejects redundant input values;
#X obj 30 1672 flow.group;
#X text 175 1672 group data atoms in list of specified size;
#X obj 30 1699 flow.pass;
#X text 175 1699 pass specified values;
#X obj 30 1726 flow.pass_if;
#X text 175 1726 pass values that accepted by predicate object;
#X obj 30 1753 flow.reject;
#X text 175 1753 reject specified values;
#X obj 30 1780 flow.reject_if;
#X text 175 1780 reject values by predicate;
#X obj 30 1807 flow.split;
#X text 175 1807 split data flow by external side-chain predicate;
#X obj 30 1834 flow.sync;
#X text 175 1834 bus with only hot inlets;
#X obj 30 1861 flow.tee~;
#X text 175 1861 separate audio and control streams;
#X obj 30 1888 replace;
#X text 175 1888 Replace atoms in data stream;
#X obj 20 1915 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1956 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1967 flt.biquad~;
#X text 175 1967 second order IIR filter.;
#X obj 30 1994 flt.bpf12~;
#X text 175 1994 Band-pass filter with 12/db per octave slope;
#X obj 30 2021 flt.bpf24~;
#X text 175 2021 Band-pass filter with 24/db per octave slope;
#X obj 30 2048 flt.c_bpf~;
#X text 175 2048 BPF coefficent calculator for biquad filter;
#X obj 30 2075 flt.c_highshelf~;
#X text 175 2075 Highshelf filter coefficent calculator for biquad;
#X obj 30 2102 flt.c_hpf~;
#X text 175 2102 HPF coefficent calculator for biquad filter;
#X obj 30 2129 flt.c_lowshelf~;
#X text 175 2129 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2156 flt.c_lpf~;
#X text 175 2156 LPF coefficent calculator for biquad filter;
#X obj 30 2183 flt.c_notch~;
#X text 175 2183 Band-reject coefficent calculator for biquad filter;
#X obj 30 2210 flt.c_peak~;
#X text 175 2210 Peaking equalizer calculator for biquad.;
#X obj 30 2237 flt.dcblock2~;
#X text 175 2237 stereo DC blocker;
#X obj 30 2264 flt.dcblock~;
#X text 175 2264 mono DC blocker;
#X obj 30 2291 flt.eq_peak~;
#X text 175 2291 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2342 flt.highshelf~;
#X text 175 2342 gain boost|cut above some frequency;
#X obj 30 2369 flt.hpf12~;
#X text 175 2369 High-pass filter with 12/db per octave slope;
#X obj 30 2396 flt.hpf24~;
#X text 175 2396 High-pass filter with 24/db per octave slope;
#X obj 30 2423 flt.lowshelf~;
#X text 175 2423 gain boost|cut below some frequency;
#X obj 30 2450 flt.lpf12~;
#X text 175 2450 Low-pass filter with 12/db per octave slope;
#X obj 30 2477 flt.lpf24~;
#X text 175 2477 Low-pass filter with 24/db per octave slope;
#X obj 30 2504 flt.notch~;
#X text 175 2504 band-rejection filter;
#X obj 30 2531 flt.resonbp~;
#X text 175 2531 Simple resonant bandpass filter;
#X obj 20 2558 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2599 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2610 fx.distortion~;
#X text 175 2610 cubic nonlinearity distortion;
#X obj 30 2637 fx.flanger~;
#X text 175 2637 mono flanging effect;
#X obj 30 2664 fx.freeverb2~;
#X text 175 2664 freeverb2 - stereo version of freeverb;
#X obj 30 2691 fx.freeverb~;
#X text 175 2691 freeverb - common used open-source reverb;
#X obj 30 2718 fx.freqshift~;
#X text 175 2718 frequency shifter or single-sideband ring modulation;
#X obj 30 2745 fx.pitchshift~;
#X text 175 2745 simple pitch shifter based on 2 delay lines;
#X obj 30 2772 fx.zita_rev1~;
#X text 175 2772 Zita stereo reverb;
#X obj 20 2799 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2840 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2851 global.float;
#X text 175 2851 global named float object;
#X obj 30 2878 global.int;
#X text 175 2878 global named integer object;
#X obj 30 2905 global.list;
#X text 175 2905 global named list object;
#X obj 20 2932 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2973 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2984 lfo.impulse~;
#X text 175 2984 Unit-amplitude low-frequency impulse train;
#X obj 30 3011 lfo.square~;
#X text 175 3011 Positive low frequence square wave;
#X obj 30 3038 lfo.tri~;
#X text 175 3038 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3065 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3106 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3117 list.all_of;
#X text 175 3117 checks if all list atoms accepted by predicate;
#X obj 30 3144 list.any_of;
#X text 175 3144 checks if at least one list element is accepted by
predicate;
#X obj 30 3181 list.apply_to;
#X text 175 3181 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3218 list.at;
#X text 175 3218 returns list element(s) at given position(s);
#X obj 30 3245 list.choice;
#X text 175 3245 returns random element from list;
#X obj 30 3272 list.count;
#X text 175 3272 returns the number of items that equal to specified
value;
#X obj 30 3299 list.count_if;
#X text 175 3299 returns the number of items that satisfy to external
predicate.;
#X obj 30 3336 list.deinterleave;
#X text 175 3336 splits list to N lists \, each to separate output;
#X obj 30 3363 list.delta;
#X text 175 3363 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3400 list.distribution;
#X text 175 3400 list value distribution;
#X obj 30 3427 list.each;
#X text 175 3427 maps each list value via external object(s);
#X obj 30 3454 list.enumerate;
#X text 175 3454 enumerates input list;
#X obj 30 3481 list.equal;
#X text 175 3481 checks if given lists are equal;
#X obj 30 3508 list.first;
#X text 175 3508 returns first list element;
#X obj 30 3535 list.gen;
#X text 175 3535 generates list of specified length via external
generator;
#X obj 30 3562 list.histogram;
#X text 175 3562 outputs distibution histogram;
#X obj 30 3589 list.integrator;
#X text 175 3589 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3626 list.interleave;
#X text 175 3626 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3677 list.last;
#X text 175 3677 returns last list element;
#X obj 30 3704 list.length;
#X text 175 3704 returns the number of atoms in the message;
#X obj 30 3731 list.max;
#X text 175 3731 returns largest element in the list;
#X obj 30 3758 list.mean;
#X text 175 3758 calculates average of list of floats;
#X obj 30 3785 list.min;
#X text 175 3785 returns smallest element in the list;
#X obj 30 3812 list.none_of;
#X text 175 3812 checks if none of list atoms is accepted by
predicate;
#X obj 30 3839 list.normalize;
#X text 175 3839 normalizes float list values to get their sum = 1.0;
#X obj 30 3866 list.pass_if;
#X text 175 3866 leave only elements accepted by predicate;
#X obj 30 3893 list.product;
#X text 175 3893 calculates product of floats in list;
#X obj 30 3920 list.range;
#X text 175 3920 returns list smallest and largest value;
#X obj 30 3947 list.reduce;
#X text 175 3947 apply function of two arguments cumulatively to the
list;
#X obj 30 3974 list.remove_if;
#X text 175 3974 remove elements by predicate;
#X obj 30 4001 list.repack;
#X text 175 4001 repack input list to specified size;
#X obj 30 4028 list.repeat;
#X text 175 4028 creates new list by repeating given list specified
times;
#X obj 30 4055 list.resize;
#X text 175 4055 changes list size;
#X obj 30 4082 list.reverse;
#X text 175 4082 reverses the order of the elements in the list;
#X obj 30 4109 list.rotate;
#X text 175 4109 rotates list left;
#X obj 30 4136 list.separate;
#X text 175 4136 sends list elements one by one separately;
#X obj 30 4163 list.seq;
#X text 175 4163 numeric sequence list generator;
#X obj 30 4190 list.shuffle;
#X text 175 4190 randomly rearranges elements in list;
#X obj 30 4217 list.slice;
#X text 175 4217 extract sublist;
#X obj 30 4244 list.sort;
#X text 175 4244 sorts list values by ascending order;
#X obj 30 4271 list.sort_with;
#X text 175 4271 sort list with user defined side-chain;
#X obj 30 4298 list.sum;
#X text 175 4298 calculates sum of floats in list;
#X obj 30 4325 list.unique;
#X text 175 4325 sorts and removes duplicates from input list;
#X obj 30 4352 list.unpack;
#X text 175 4352 unpack list elements to separate outlets;
#X obj 30 4379 list.unwrap;
#X text 175 4379 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4416 list.walk;
#X text 175 4416 Walks thru the list;
#X obj 30 4443 list.wrap;
#X text 175 4443 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4494 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4535 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4546 live.capture~;
#X text 175 4546 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4583 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 4624 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4635 local.float;
#X text 175 4635 canvas-scoped named float variable;
#X obj 30 4662 local.int;
#X text 175 4662 canvas-scoped named integer variable;
#X obj 20 4689 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 4730 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4741 math.abs;
#X text 175 4741 absolute value function;
#X obj 30 4768 math.acos;
#X text 175 4768 arc cosine function;
#X obj 30 4795 math.acosh;
#X text 175 4795 inverse hyperbolic cosine function;
#X obj 30 4822 math.and;
#X text 175 4822 operation AND for multiple arguments;
#X obj 30 4849 math.approx;
#X text 175 4849 check if input value approximately equal to pattern;
#X obj 30 4876 math.asin;
#X text 175 4876 arc sine function;
#X obj 30 4903 math.asinh;
#X text 175 4903 inverse hyperbolic sine function;
#X obj 30 4930 math.atan;
#X text 175 4930 arc tangent function;
#X obj 30 4957 math.atanh;
#X text 175 4957 inverse hyperbolic tangent function;
#X obj 30 4984 math.cbrt;
#X text 175 4984 cube root function;
#X obj 30 5011 math.ceil;
#X text 175 5011 round to smallest integral value not less than input
value;
#X obj 30 5038 math.cos;
#X text 175 5038 cosine function;
#X obj 30 5065 math.cosh;
#X text 175 5065 hyperbolic cosine function;
#X obj 30 5092 math.e;
#X text 175 5092 mathematical constant \, base of the natural
logarithm;
#X obj 30 5119 math.exp;
#X text 175 5119 exponential functions;
#X obj 30 5146 math.exp2;
#X text 175 5146 exponential functions;
#X obj 30 5173 math.floor;
#X text 175 5173 round to largest integral value not greater than x;
#X obj 30 5200 math.gcd;
#X text 175 5200 calculate greatest common divisor;
#X obj 30 5227 math.inf;
#X text 175 5227 infinity value that cannot be represented accurately;
#X obj 30 5254 math.lcm;
#X text 175 5254 calculate least common multiple;
#X obj 30 5281 math.log;
#X text 175 5281 logarithm functions;
#X obj 30 5308 math.log10;
#X text 175 5308 logarithm functions;
#X obj 30 5335 math.log2;
#X text 175 5335 logarithm functions;
#X obj 30 5362 math.nan;
#X text 175 5362 Not a Number \, unrepresentable value;
#X obj 30 5389 math.neg;
#X text 175 5389 negate function;
#X obj 30 5416 math.or;
#X text 175 5416 operation OR for multiple arguments;
#X obj 30 5443 math.pi;
#X text 175 5443 mathematical constant;
#X obj 30 5470 math.reciprocal;
#X text 175 5470 calculate reciprocal number;
#X obj 30 5497 math.round;
#X text 175 5497 round to integral value \, regardless of rounding
direction;
#X obj 30 5524 math.sign;
#X text 175 5524 sign function;
#X obj 30 5551 math.sin;
#X text 175 5551 sine function;
#X obj 30 5578 math.sinh;
#X text 175 5578 hyperbolic sine function;
#X obj 30 5605 math.sqrt;
#X text 175 5605 square root function;
#X obj 30 5632 math.squared;
#X text 175 5632 value square;
#X obj 30 5659 math.tan;
#X text 175 5659 tangent function;
#X obj 30 5686 math.tanh;
#X text 175 5686 hyperbolic tangent function;
#X obj 30 5713 math.trunc;
#X text 175 5713 truncate to integer value;
#X obj 20 5740 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 5781 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5792 modplug~;
#X text 175 5792 MOD file player (using libmodplug);
#X obj 20 5819 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 5860 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5871 msg;
#X text 175 5871 message constructor;
#X obj 20 5898 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 5939 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5950 noise.pink~;
#X text 175 5950 Pink noise generator;
#X obj 30 5977 noise.white~;
#X text 175 5977 White noise generator;
#X obj 20 6004 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 6045 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6056 osc.impulse~;
#X text 175 6056 Bandlimited impulse train generator;
#X obj 30 6083 osc.pulse~;
#X text 175 6083 Bandlimited pulse train oscillator.;
#X obj 30 6110 osc.saw~;
#X text 175 6110 Bandlimited saw wave oscillator;
#X obj 30 6137 osc.sinfb~;
#X text 175 6137 sine oscilator with feedback;
#X obj 30 6164 osc.square~;
#X text 175 6164 Bandlimited square wave oscillator;
#X obj 30 6191 osc.tri~;
#X text 175 6191 Bandlimited triangle wave oscillator;
#X obj 20 6218 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 6259 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6270 path.basename;
#X text 175 6270 outputs filename portion of pathname;
#X obj 30 6297 path.dirname;
#X text 175 6297 outputs directory portion of pathname;
#X obj 30 6324 path.exists;
#X text 175 6324 checks if given path exists;
#X obj 30 6351 path.lsdir;
#X text 175 6351 list directory contents;
#X obj 20 6378 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 6419 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6430 is_any;
#X text 175 6430 checks if input data has *any* type;
#X obj 30 6457 is_bang;
#X text 175 6457 checks if input data has *bang* type;
#X obj 30 6484 is_even;
#X text 175 6484 checks if input number is even;
#X obj 30 6511 is_file;
#X text 175 6511 checks if file exists and accessible;
#X obj 30 6538 is_float;
#X text 175 6538 checks if input data has *float* type;
#X obj 30 6565 is_list;
#X text 175 6565 checks if input data has *list* type;
#X obj 30 6592 is_odd;
#X text 175 6592 checks if input number is odd;
#X obj 30 6619 is_pointer;
#X text 175 6619 checks if input data has *pointer* type;
#X obj 30 6646 is_symbol;
#X text 175 6646 checks if input data has *symbol* type;
#X obj 20 6673 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 6714 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6725 prop.get;
#X text 175 6725 Property extractor;
#X obj 30 6752 prop.set;
#X text 175 6752 Property injector;
#X obj 20 6779 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 6820 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6831 random.discrete;
#X text 175 6831 random weighted integers on interval [0 \, n);
#X obj 30 6858 random.float;
#X text 175 6858 random float generator in specified range;
#X obj 30 6885 random.gauss;
#X text 175 6885 gaussian random distribution;
#X obj 30 6912 random.int;
#X text 175 6912 Random integer generator in specified range;
#X obj 30 6939 random.linear;
#X text 175 6939 random linear distribution;
#X obj 30 6966 random.pw_const;
#X text 175 6966 piecewise constant random distribution;
#X obj 30 6993 random.pw_lin;
#X text 175 6993 piecewise linear random distribution;
#X obj 20 7020 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 7061 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7072 snd.file;
#X text 175 7072 Sound file loader on steroids;
#X obj 20 7099 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 7140 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7151 string;
#X text 175 7151 string constructor;
#X obj 30 7178 string.contains;
#X text 175 7178 checks if given string contains specified substring;
#X obj 30 7205 string.ends_with;
#X text 175 7205 checks if given string ends with specified suffix;
#X obj 30 7232 string.equal;
#X text 175 7232 check strings for equality;
#X obj 30 7259 string.format;
#X text 175 7259 formats string like printf.;
#X obj 30 7286 string.join;
#X text 175 7286 joins (concatenates) strings with separator;
#X obj 30 7313 string.length;
#X text 175 7313 number of characters in string (unicode supported);
#X obj 30 7340 string.remove;
#X text 175 7340 remove substring from input string;
#X obj 30 7367 string.replace;
#X text 175 7367 replace from one substring to another in input
string;
#X obj 30 7394 string.split;
#X text 175 7394 split string by separator;
#X obj 30 7421 string.starts_with;
#X text 175 7421 checks if given string starts with specified prefix;
#X obj 30 7448 string.substr;
#X text 175 7448 extract substring from input string;
#X obj 30 7475 string2symbol;
#X text 175 7475 converts string to symbol;
#X obj 20 7502 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 7543 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7554 symbol.equal;
#X text 175 7554 check symbols for equality;
#X obj 30 7581 symbol.length;
#X text 175 7581 number of characters in symbol (unicode supported);
#X obj 20 7608 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 7649 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7660 system.getenv;
#X text 175 7660 Get system environment variables;
#X obj 30 7687 system.hostname;
#X text 175 7687 outputs system hostname;
#X obj 30 7714 system.memsize;
#X text 175 7714 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 7751 system.memused;
#X text 175 7751 returns the process physical memory use - current and
peak;
#X obj 30 7778 system.screen_size;
#X text 175 7778 returns current screen size in pixels;
#X obj 20 7805 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 7846 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7860 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 7857 Timeline bang;
#X obj 30 7883 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 7880 Timeline section;
#X obj 30 7903 tl.transport;
#X text 175 7903 Timeline transport control;
#X obj 30 7933 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 7930 A bang... that's all;
#X obj 30 7956 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 7953 Breakpoint function GUI object;
#X obj 30 7979 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 7976 Display GUI object;
#X obj 30 8002 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 7999 keyboard widget;
#X obj 30 8025 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 8022 knob widget;
#X obj 30 8048 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 8045 The matrix of toggles has you.;
#X obj 30 8071 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 8068 Scope GUI object;
#X obj 30 8094 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 8091 2D slider widget;
#X obj 30 8117 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 8114 Multiple slider widget;
#X obj 30 8140 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 8137 Spectroscope GUI object;
#X obj 30 8163 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 8160 modern toggle widget;
#X obj 20 8183 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 8224 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8235 vector.distance;
#X text 175 8235 returns euclidean distance between two points;
#X obj 30 8262 vector.dot;
#X text 175 8262 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 8313 vector.length;
#X text 175 8313 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 8350 vector.normalize;
#X text 175 8350 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 8377 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 8377 version: v0.3 \, license: GPL3;
#X obj 20 8396 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;