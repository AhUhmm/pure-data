#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 20 369 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 424 ui.link @title [function] @url function-help.pd;
#X text 175 421 named function;
#X obj 30 444 function.call;
#X text 175 444 call named function;
#X obj 20 471 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 512 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 523 array.p2s;
#X text 175 523 convert array phase [0\..1] to sample position;
#X obj 30 550 array.s2p;
#X text 175 550 convert array sample position to relative phase
position [0\..1];
#X obj 30 587 conv.bpm2hz;
#X text 175 587 converts BPM to frequency in herz;
#X obj 30 614 conv.bpm2ms;
#X text 175 614 convert frequency in BPM to period in milliseconds;
#X obj 30 641 conv.bpm2sec;
#X text 175 641 convert frequency in BPM to period in seconds;
#X obj 30 668 conv.cc2amp;
#X text 175 668 convert from MIDI Control Change range;
#X obj 30 695 conv.lin2curve;
#X text 175 695 map linear to exponential range with 0 allowed.;
#X obj 30 722 conv.lin2exp;
#X text 175 722 maps linear range to exponential range;
#X obj 30 749 conv.lin2lin;
#X text 175 749 convert from one linear range to another;
#X obj 30 776 conv.pitch2midi;
#X text 175 776 converts symbol pitch name to MIDI note number;
#X obj 30 803 conv.samp2sec;
#X text 175 803 convert samples to time according to samplerate;
#X obj 30 830 conv.sec2samp;
#X text 175 830 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 867 conv.sec2str;
#X text 175 867 converts float time in seconds to formated symbol (or
string);
#X obj 30 904 conv.str2sec;
#X text 175 904 converts formatted time to float value in seconds;
#X obj 20 931 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 972 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 983 data.fifo;
#X text 175 983 First-In-First-Out (FIFO) queue data container;
#X obj 30 1010 data.list;
#X text 175 1010 list container;
#X obj 30 1037 data.set;
#X text 175 1037 container that store unique elements;
#X obj 30 1064 data.set2list;
#X text 175 1064 converts set to list;
#X obj 30 1091 set.contains;
#X text 175 1091 check if specified element is in set;
#X obj 30 1118 set.diff;
#X text 175 1118 difference between two sets;
#X obj 30 1145 set.equal;
#X text 175 1145 checks if two sets are equal (contains same
elements);
#X obj 30 1172 set.intersect;
#X text 175 1172 output intersection of given sets;
#X obj 30 1199 set.size;
#X text 175 1199 get number of elements in set;
#X obj 30 1226 set.symdiff;
#X text 175 1226 symmetric difference between two sets;
#X obj 30 1253 set.union;
#X text 175 1253 output union of given sets;
#X obj 20 1280 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1321 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1332 dyn.comp2~;
#X text 175 1332 stereo dynamic range compressor;
#X obj 30 1359 dyn.comp~;
#X text 175 1359 mono dynamic range compressors;
#X obj 30 1386 dyn.gate2~;
#X text 175 1386 stereo signal gate;
#X obj 30 1413 dyn.gate~;
#X text 175 1413 mono signal gate;
#X obj 30 1440 dyn.limit2~;
#X text 175 1440 stereo 1176LN Peak Limiter;
#X obj 30 1467 dyn.limit~;
#X text 175 1467 mono 1176LN Peak Limiter;
#X obj 30 1494 dyn.softclip~;
#X text 175 1494 soft signal clip;
#X obj 20 1521 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1562 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1573 env.adsr~;
#X text 175 1573 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1600 env.ar~;
#X text 175 1600 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1637 env.follow~;
#X text 175 1637 Envelope follower with independent attack and release
times.;
#X obj 20 1674 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1715 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1726 expand_env;
#X text 175 1726 Substitute enviroment variables in data stream;
#X obj 30 1753 flow.change;
#X text 175 1753 rejects redundant input values;
#X obj 30 1780 flow.count;
#X text 175 1780 control flow event counter;
#X obj 30 1807 flow.gate;
#X text 175 1807 control flow gate. [spigot] analog;
#X obj 30 1834 flow.group;
#X text 175 1834 group data atoms in list of specified size;
#X obj 30 1861 flow.multiplex;
#X text 175 1861 control flow multiplexer;
#X obj 30 1888 flow.pass;
#X text 175 1888 pass specified values;
#X obj 30 1915 flow.pass_if;
#X text 175 1915 pass values that accepted by predicate object;
#X obj 30 1942 flow.reject;
#X text 175 1942 reject specified values;
#X obj 30 1969 flow.reject_if;
#X text 175 1969 reject values by predicate;
#X obj 30 1996 flow.split;
#X text 175 1996 split data flow by external side-chain predicate;
#X obj 30 2023 flow.sync;
#X text 175 2023 bus with only hot inlets;
#X obj 30 2050 flow.tee~;
#X text 175 2050 separate audio and control streams;
#X obj 30 2077 replace;
#X text 175 2077 Replace atoms in data stream;
#X obj 20 2104 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2145 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2156 flt.biquad~;
#X text 175 2156 second order IIR filter.;
#X obj 30 2183 flt.bpf12~;
#X text 175 2183 Band-pass filter with 12/db per octave slope;
#X obj 30 2210 flt.bpf24~;
#X text 175 2210 Band-pass filter with 24/db per octave slope;
#X obj 30 2237 flt.c_bpf~;
#X text 175 2237 BPF coefficent calculator for biquad filter;
#X obj 30 2264 flt.c_highshelf~;
#X text 175 2264 Highshelf filter coefficent calculator for biquad;
#X obj 30 2291 flt.c_hpf~;
#X text 175 2291 HPF coefficent calculator for biquad filter;
#X obj 30 2318 flt.c_lowshelf~;
#X text 175 2318 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2345 flt.c_lpf~;
#X text 175 2345 LPF coefficent calculator for biquad filter;
#X obj 30 2372 flt.c_notch~;
#X text 175 2372 Band-reject coefficent calculator for biquad filter;
#X obj 30 2399 flt.c_peak~;
#X text 175 2399 Peaking equalizer calculator for biquad.;
#X obj 30 2426 flt.dcblock2~;
#X text 175 2426 stereo DC blocker;
#X obj 30 2453 flt.dcblock~;
#X text 175 2453 mono DC blocker;
#X obj 30 2480 flt.eq_peak~;
#X text 175 2480 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2531 flt.highshelf~;
#X text 175 2531 gain boost|cut above some frequency;
#X obj 30 2558 flt.hpf12~;
#X text 175 2558 High-pass filter with 12/db per octave slope;
#X obj 30 2585 flt.hpf24~;
#X text 175 2585 High-pass filter with 24/db per octave slope;
#X obj 30 2612 flt.lowshelf~;
#X text 175 2612 gain boost|cut below some frequency;
#X obj 30 2639 flt.lpf12~;
#X text 175 2639 Low-pass filter with 12/db per octave slope;
#X obj 30 2666 flt.lpf24~;
#X text 175 2666 Low-pass filter with 24/db per octave slope;
#X obj 30 2693 flt.notch~;
#X text 175 2693 band-rejection filter;
#X obj 30 2720 flt.resonbp~;
#X text 175 2720 Simple resonant bandpass filter;
#X obj 20 2747 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2788 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2799 fx.distortion~;
#X text 175 2799 cubic nonlinearity distortion;
#X obj 30 2826 fx.flanger~;
#X text 175 2826 mono flanging effect;
#X obj 30 2853 fx.freeverb2~;
#X text 175 2853 freeverb2 - stereo version of freeverb;
#X obj 30 2880 fx.freeverb~;
#X text 175 2880 freeverb - common used open-source reverb;
#X obj 30 2907 fx.freqshift~;
#X text 175 2907 frequency shifter or single-sideband ring modulation;
#X obj 30 2934 fx.pitchshift~;
#X text 175 2934 simple pitch shifter based on 2 delay lines;
#X obj 30 2961 fx.zita_rev1~;
#X text 175 2961 Zita stereo reverb;
#X obj 20 2988 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3029 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3040 global.float;
#X text 175 3040 global named float object;
#X obj 30 3067 global.int;
#X text 175 3067 global named integer object;
#X obj 30 3094 global.list;
#X text 175 3094 global named list object;
#X obj 20 3121 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3162 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3173 lfo.impulse~;
#X text 175 3173 Unit-amplitude low-frequency impulse train;
#X obj 30 3200 lfo.square~;
#X text 175 3200 Positive low frequence square wave;
#X obj 30 3227 lfo.tri~;
#X text 175 3227 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3254 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3295 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3306 list.all_of;
#X text 175 3306 checks if all list atoms accepted by predicate;
#X obj 30 3333 list.any_of;
#X text 175 3333 checks if at least one list element is accepted by
predicate;
#X obj 30 3370 list.apply_to;
#X text 175 3370 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3407 list.at;
#X text 175 3407 returns list element(s) at given position(s);
#X obj 30 3434 list.choice;
#X text 175 3434 returns random element from list;
#X obj 30 3461 list.count;
#X text 175 3461 returns the number of items that equal to specified
value;
#X obj 30 3488 list.count_if;
#X text 175 3488 returns the number of items that satisfy to external
predicate.;
#X obj 30 3525 list.deinterleave;
#X text 175 3525 splits list to N lists \, each to separate output;
#X obj 30 3552 list.delta;
#X text 175 3552 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3589 list.distribution;
#X text 175 3589 list value distribution;
#X obj 30 3616 list.each;
#X text 175 3616 maps each list value via external object(s);
#X obj 30 3643 list.enumerate;
#X text 175 3643 enumerates input list;
#X obj 30 3670 list.equal;
#X text 175 3670 checks if given lists are equal;
#X obj 30 3697 list.first;
#X text 175 3697 returns first list element;
#X obj 30 3724 list.gen;
#X text 175 3724 generates list of specified length via external
generator;
#X obj 30 3751 list.histogram;
#X text 175 3751 outputs distibution histogram;
#X obj 30 3778 list.integrator;
#X text 175 3778 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3815 list.interleave;
#X text 175 3815 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3866 list.last;
#X text 175 3866 returns last list element;
#X obj 30 3893 list.length;
#X text 175 3893 returns the number of atoms in the message;
#X obj 30 3920 list.max;
#X text 175 3920 returns largest element in the list;
#X obj 30 3947 list.mean;
#X text 175 3947 calculates average of list of floats;
#X obj 30 3974 list.min;
#X text 175 3974 returns smallest element in the list;
#X obj 30 4001 list.none_of;
#X text 175 4001 checks if none of list atoms is accepted by
predicate;
#X obj 30 4028 list.normalize;
#X text 175 4028 normalizes float list values to get their sum = 1.0;
#X obj 30 4055 list.pass_if;
#X text 175 4055 leave only elements accepted by predicate;
#X obj 30 4082 list.product;
#X text 175 4082 calculates product of floats in list;
#X obj 30 4109 list.range;
#X text 175 4109 returns list smallest and largest value;
#X obj 30 4136 list.reduce;
#X text 175 4136 apply function of two arguments cumulatively to the
list;
#X obj 30 4163 list.remove_if;
#X text 175 4163 remove elements by predicate;
#X obj 30 4190 list.repack;
#X text 175 4190 repack input list to specified size;
#X obj 30 4217 list.repeat;
#X text 175 4217 creates new list by repeating given list specified
times;
#X obj 30 4244 list.resize;
#X text 175 4244 changes list size;
#X obj 30 4271 list.reverse;
#X text 175 4271 reverses the order of the elements in the list;
#X obj 30 4298 list.rotate;
#X text 175 4298 rotates list left;
#X obj 30 4325 list.separate;
#X text 175 4325 sends list elements one by one separately;
#X obj 30 4352 list.seq;
#X text 175 4352 numeric sequence list generator;
#X obj 30 4379 list.shuffle;
#X text 175 4379 randomly rearranges elements in list;
#X obj 30 4406 list.slice;
#X text 175 4406 extract sublist;
#X obj 30 4433 list.sort;
#X text 175 4433 sorts list values by ascending order;
#X obj 30 4460 list.sort_with;
#X text 175 4460 sort list with user defined side-chain;
#X obj 30 4487 list.sum;
#X text 175 4487 calculates sum of floats in list;
#X obj 30 4514 list.unique;
#X text 175 4514 sorts and removes duplicates from input list;
#X obj 30 4541 list.unpack;
#X text 175 4541 unpack list elements to separate outlets;
#X obj 30 4568 list.unwrap;
#X text 175 4568 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4605 list.walk;
#X text 175 4605 Walks thru the list;
#X obj 30 4632 list.wrap;
#X text 175 4632 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4683 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4724 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4735 live.capture~;
#X text 175 4735 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4772 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 4813 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4824 local.float;
#X text 175 4824 canvas-scoped named float variable;
#X obj 30 4851 local.int;
#X text 175 4851 canvas-scoped named integer variable;
#X obj 20 4878 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 4919 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4930 math.abs;
#X text 175 4930 absolute value function;
#X obj 30 4957 math.acos;
#X text 175 4957 arc cosine function;
#X obj 30 4984 math.acosh;
#X text 175 4984 inverse hyperbolic cosine function;
#X obj 30 5011 math.and;
#X text 175 5011 operation AND for multiple arguments;
#X obj 30 5038 math.approx;
#X text 175 5038 check if input value approximately equal to pattern;
#X obj 30 5065 math.asin;
#X text 175 5065 arc sine function;
#X obj 30 5092 math.asinh;
#X text 175 5092 inverse hyperbolic sine function;
#X obj 30 5119 math.atan;
#X text 175 5119 arc tangent function;
#X obj 30 5146 math.atanh;
#X text 175 5146 inverse hyperbolic tangent function;
#X obj 30 5173 math.cbrt;
#X text 175 5173 cube root function;
#X obj 30 5200 math.ceil;
#X text 175 5200 round to smallest integral value not less than input
value;
#X obj 30 5227 math.cos;
#X text 175 5227 cosine function;
#X obj 30 5254 math.cosh;
#X text 175 5254 hyperbolic cosine function;
#X obj 30 5281 math.e;
#X text 175 5281 mathematical constant \, base of the natural
logarithm;
#X obj 30 5308 math.exp;
#X text 175 5308 exponential functions;
#X obj 30 5335 math.exp2;
#X text 175 5335 exponential functions;
#X obj 30 5362 math.floor;
#X text 175 5362 round to largest integral value not greater than x;
#X obj 30 5389 math.gcd;
#X text 175 5389 calculate greatest common divisor;
#X obj 30 5416 math.inf;
#X text 175 5416 infinity value that cannot be represented accurately;
#X obj 30 5443 math.lcm;
#X text 175 5443 calculate least common multiple;
#X obj 30 5470 math.log;
#X text 175 5470 logarithm functions;
#X obj 30 5497 math.log10;
#X text 175 5497 logarithm functions;
#X obj 30 5524 math.log2;
#X text 175 5524 logarithm functions;
#X obj 30 5551 math.nan;
#X text 175 5551 Not a Number \, unrepresentable value;
#X obj 30 5578 math.neg;
#X text 175 5578 negate function;
#X obj 30 5605 math.or;
#X text 175 5605 operation OR for multiple arguments;
#X obj 30 5632 math.pi;
#X text 175 5632 mathematical constant;
#X obj 30 5659 math.reciprocal;
#X text 175 5659 calculate reciprocal number;
#X obj 30 5686 math.round;
#X text 175 5686 round to integral value \, regardless of rounding
direction;
#X obj 30 5713 math.round~;
#X text 175 5713 signal round;
#X obj 30 5740 math.sign;
#X text 175 5740 sign function;
#X obj 30 5767 math.sin;
#X text 175 5767 sine function;
#X obj 30 5794 math.sinh;
#X text 175 5794 hyperbolic sine function;
#X obj 30 5821 math.sqrt;
#X text 175 5821 square root function;
#X obj 30 5848 math.squared;
#X text 175 5848 value square;
#X obj 30 5875 math.tan;
#X text 175 5875 tangent function;
#X obj 30 5902 math.tanh;
#X text 175 5902 hyperbolic tangent function;
#X obj 30 5929 math.trunc;
#X text 175 5929 truncate to integer value;
#X obj 20 5956 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 5997 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6008 midi.ctl2str;
#X text 175 6008 convert Standard MIDI Controllers number to name;
#X obj 30 6035 midi.event2note;
#X text 175 6035 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6062 midi.file;
#X text 175 6062 standard midi file SMF reader and writer;
#X obj 30 6089 midi.key2str;
#X text 175 6089 convert key number to SPN name according to tonality;
#X obj 30 6116 midi.prg2str;
#X text 175 6116 convert GM Instrument number to name (string or
symbol);
#X obj 30 6143 midi.track;
#X text 175 6143 extract track from MidiFile;
#X obj 20 6170 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 6211 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6222 click~;
#X text 175 6222 Output single impulse on bang;
#X obj 30 6249 modplug~;
#X text 175 6249 MOD file player (using libmodplug);
#X obj 20 6276 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 6317 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6328 msg;
#X text 175 6328 message constructor;
#X obj 20 6355 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 6396 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6407 noise.pink~;
#X text 175 6407 Pink noise generator;
#X obj 30 6434 noise.white~;
#X text 175 6434 White noise generator;
#X obj 20 6461 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 6502 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6513 osc.impulse~;
#X text 175 6513 Bandlimited impulse train generator;
#X obj 30 6540 osc.pulse~;
#X text 175 6540 Bandlimited pulse train oscillator.;
#X obj 30 6567 osc.saw~;
#X text 175 6567 Bandlimited saw wave oscillator;
#X obj 30 6594 osc.sinfb~;
#X text 175 6594 sine oscilator with feedback;
#X obj 30 6621 osc.square~;
#X text 175 6621 Bandlimited square wave oscillator;
#X obj 30 6648 osc.tri~;
#X text 175 6648 Bandlimited triangle wave oscillator;
#X obj 20 6675 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 6716 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6727 canvas.current;
#X text 175 6727 verbose information about current canvas;
#X obj 30 6754 canvas.top;
#X text 175 6754 verbose information about top-level canvas;
#X obj 30 6781 patch.args;
#X text 175 6781 Get patch or subpatch arguments;
#X obj 20 6808 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 6849 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6860 path.basename;
#X text 175 6860 outputs filename portion of pathname;
#X obj 30 6887 path.dirname;
#X text 175 6887 outputs directory portion of pathname;
#X obj 30 6914 path.exists;
#X text 175 6914 checks if given path exists;
#X obj 30 6941 path.lsdir;
#X text 175 6941 list directory contents;
#X obj 20 6968 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 7009 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7020 is_any;
#X text 175 7020 checks if input data has *any* type;
#X obj 30 7047 is_bang;
#X text 175 7047 checks if input data has *bang* type;
#X obj 30 7074 is_even;
#X text 175 7074 checks if input number is even;
#X obj 30 7101 is_file;
#X text 175 7101 checks if file exists and accessible;
#X obj 30 7128 is_float;
#X text 175 7128 checks if input data has *float* type;
#X obj 30 7155 is_list;
#X text 175 7155 checks if input data has *list* type;
#X obj 30 7182 is_odd;
#X text 175 7182 checks if input number is odd;
#X obj 30 7209 is_pointer;
#X text 175 7209 checks if input data has *pointer* type;
#X obj 30 7236 is_symbol;
#X text 175 7236 checks if input data has *symbol* type;
#X obj 20 7263 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 7304 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7315 prop.get;
#X text 175 7315 Property extractor;
#X obj 30 7342 prop.set;
#X text 175 7342 Property injector;
#X obj 20 7369 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 7410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7421 random.discrete;
#X text 175 7421 random weighted integers on interval [0 \, n);
#X obj 30 7448 random.float;
#X text 175 7448 random float generator in specified range;
#X obj 30 7475 random.gauss;
#X text 175 7475 gaussian random distribution;
#X obj 30 7502 random.int;
#X text 175 7502 Random integer generator in specified range;
#X obj 30 7529 random.linear;
#X text 175 7529 random linear distribution;
#X obj 30 7556 random.pw_const;
#X text 175 7556 piecewise constant random distribution;
#X obj 30 7583 random.pw_lin;
#X text 175 7583 piecewise linear random distribution;
#X obj 20 7610 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 7651 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7662 snd.file;
#X text 175 7662 Sound file loader on steroids;
#X obj 20 7689 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 7730 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7741 string;
#X text 175 7741 string constructor;
#X obj 30 7768 string.contains;
#X text 175 7768 checks if given string contains specified substring;
#X obj 30 7795 string.ends_with;
#X text 175 7795 checks if given string ends with specified suffix;
#X obj 30 7822 string.equal;
#X text 175 7822 check strings for equality;
#X obj 30 7849 string.format;
#X text 175 7849 formats string like printf.;
#X obj 30 7876 string.join;
#X text 175 7876 joins (concatenates) strings with separator;
#X obj 30 7903 string.length;
#X text 175 7903 number of characters in string (unicode supported);
#X obj 30 7930 string.remove;
#X text 175 7930 remove substring from input string;
#X obj 30 7957 string.replace;
#X text 175 7957 replace from one substring to another in input
string;
#X obj 30 7984 string.split;
#X text 175 7984 split string by separator;
#X obj 30 8011 string.starts_with;
#X text 175 8011 checks if given string starts with specified prefix;
#X obj 30 8038 string.substr;
#X text 175 8038 extract substring from input string;
#X obj 30 8065 string2symbol;
#X text 175 8065 converts string to symbol;
#X obj 20 8092 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 8133 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8144 symbol.equal;
#X text 175 8144 check symbols for equality;
#X obj 30 8171 symbol.length;
#X text 175 8171 number of characters in symbol (unicode supported);
#X obj 20 8198 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 8239 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8250 system.cursor;
#X text 175 8250 S;
#X obj 30 8277 system.getenv;
#X text 175 8277 Get system environment variables;
#X obj 30 8304 system.hostname;
#X text 175 8304 outputs system hostname;
#X obj 30 8331 system.memsize;
#X text 175 8331 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 8368 system.memused;
#X text 175 8368 returns the process physical memory use - current and
peak;
#X obj 30 8395 system.screen_size;
#X text 175 8395 returns current screen size in pixels;
#X obj 20 8422 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 8463 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8477 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 8474 Timeline bang;
#X obj 30 8500 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 8497 Timeline section;
#X obj 30 8520 tl.transport;
#X text 175 8520 Timeline transport control;
#X obj 30 8550 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 8547 A bang... that's all;
#X obj 30 8573 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 8570 Breakpoint function GUI object;
#X obj 30 8596 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 8593 Display GUI object;
#X obj 30 8619 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 8616 keyboard widget;
#X obj 30 8642 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 8639 knob widget;
#X obj 30 8665 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 8662 The matrix of toggles has you.;
#X obj 30 8688 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 8685 Scope GUI object;
#X obj 30 8711 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 8708 2D slider widget;
#X obj 30 8734 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 8731 Multiple slider widget;
#X obj 30 8757 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 8754 Spectroscope GUI object;
#X obj 30 8780 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 8777 modern toggle widget;
#X obj 20 8800 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 8841 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8852 vector.distance;
#X text 175 8852 returns euclidean distance between two points;
#X obj 30 8879 vector.dot;
#X text 175 8879 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 8930 vector.length;
#X text 175 8930 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 8967 vector.normalize;
#X text 175 8967 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 8994 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 8994 version: v0.3 \, license: GPL3;
#X obj 20 9013 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;