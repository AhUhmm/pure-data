#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 20 369 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 424 ui.link @title [function] @url function-help.pd;
#X text 175 421 named function;
#X obj 30 444 function.call;
#X text 175 444 call named function;
#X obj 30 471 window;
#X text 175 471 returns window value by given window position;
#X obj 20 498 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 539 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 550 array.p2s;
#X text 175 550 convert array phase [0\..1] to sample position;
#X obj 30 577 array.s2p;
#X text 175 577 convert array sample position to relative phase
position [0\..1];
#X obj 30 614 conv.bpm2hz;
#X text 175 614 converts BPM to frequency in herz;
#X obj 30 641 conv.bpm2ms;
#X text 175 641 convert frequency in BPM to period in milliseconds;
#X obj 30 668 conv.bpm2sec;
#X text 175 668 convert frequency in BPM to period in seconds;
#X obj 30 695 conv.cc2amp;
#X text 175 695 convert from MIDI Control Change range;
#X obj 30 722 conv.lin2curve;
#X text 175 722 map linear to exponential range with 0 allowed.;
#X obj 30 749 conv.lin2exp;
#X text 175 749 maps linear range to exponential range;
#X obj 30 776 conv.lin2lin;
#X text 175 776 convert from one linear range to another;
#X obj 30 803 conv.pitch2midi;
#X text 175 803 converts symbol pitch name to MIDI note number;
#X obj 30 830 conv.samp2sec;
#X text 175 830 convert samples to time according to samplerate;
#X obj 30 857 conv.sec2samp;
#X text 175 857 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 894 conv.sec2str;
#X text 175 894 converts float time in seconds to formated symbol (or
string);
#X obj 30 931 conv.str2sec;
#X text 175 931 converts formatted time to float value in seconds;
#X obj 20 958 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 999 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1010 data.fifo;
#X text 175 1010 First-In-First-Out (FIFO) queue data container;
#X obj 30 1037 data.list;
#X text 175 1037 list container;
#X obj 30 1064 data.set;
#X text 175 1064 container that store unique elements;
#X obj 30 1091 data.set2list;
#X text 175 1091 converts set to list;
#X obj 30 1118 set.contains;
#X text 175 1118 check if specified element is in set;
#X obj 30 1145 set.diff;
#X text 175 1145 difference between two sets;
#X obj 30 1172 set.equal;
#X text 175 1172 checks if two sets are equal (contains same
elements);
#X obj 30 1199 set.intersect;
#X text 175 1199 output intersection of given sets;
#X obj 30 1226 set.size;
#X text 175 1226 get number of elements in set;
#X obj 30 1253 set.symdiff;
#X text 175 1253 symmetric difference between two sets;
#X obj 30 1280 set.union;
#X text 175 1280 output union of given sets;
#X obj 20 1307 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1348 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1359 dyn.comp2~;
#X text 175 1359 stereo dynamic range compressor;
#X obj 30 1386 dyn.comp~;
#X text 175 1386 mono dynamic range compressors;
#X obj 30 1413 dyn.gate2~;
#X text 175 1413 stereo signal gate;
#X obj 30 1440 dyn.gate~;
#X text 175 1440 mono signal gate;
#X obj 30 1467 dyn.limit2~;
#X text 175 1467 stereo 1176LN Peak Limiter;
#X obj 30 1494 dyn.limit~;
#X text 175 1494 mono 1176LN Peak Limiter;
#X obj 30 1521 dyn.softclip~;
#X text 175 1521 soft signal clip;
#X obj 20 1548 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1589 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1600 env.adsr~;
#X text 175 1600 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1627 env.ar~;
#X text 175 1627 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1664 env.follow~;
#X text 175 1664 Envelope follower with independent attack and release
times.;
#X obj 20 1701 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1742 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1753 expand_env;
#X text 175 1753 Substitute enviroment variables in data stream;
#X obj 30 1780 flow.change;
#X text 175 1780 rejects redundant input values;
#X obj 30 1807 flow.count;
#X text 175 1807 control flow event counter;
#X obj 30 1834 flow.gate;
#X text 175 1834 control flow gate. [spigot] analog;
#X obj 30 1861 flow.group;
#X text 175 1861 group data atoms in list of specified size;
#X obj 30 1888 flow.less;
#X text 175 1888 numeric stream router \, like many [moses];
#X obj 30 1915 flow.multiplex;
#X text 175 1915 control flow multiplexer;
#X obj 30 1942 flow.pass;
#X text 175 1942 pass specified values;
#X obj 30 1969 flow.pass_if;
#X text 175 1969 pass values that accepted by predicate object;
#X obj 30 1996 flow.reject;
#X text 175 1996 reject specified values;
#X obj 30 2023 flow.reject_if;
#X text 175 2023 reject values by predicate;
#X obj 30 2050 flow.split;
#X text 175 2050 split data flow by external side-chain predicate;
#X obj 30 2077 flow.sync;
#X text 175 2077 bus with only hot inlets;
#X obj 30 2104 flow.tee~;
#X text 175 2104 separate audio and control streams;
#X obj 30 2131 replace;
#X text 175 2131 Replace atoms in data stream;
#X obj 20 2158 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2199 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2210 flt.biquad~;
#X text 175 2210 second order IIR filter.;
#X obj 30 2237 flt.bpf12~;
#X text 175 2237 Band-pass filter with 12/db per octave slope;
#X obj 30 2264 flt.bpf24~;
#X text 175 2264 Band-pass filter with 24/db per octave slope;
#X obj 30 2291 flt.c_bpf~;
#X text 175 2291 BPF coefficent calculator for biquad filter;
#X obj 30 2318 flt.c_highshelf~;
#X text 175 2318 Highshelf filter coefficent calculator for biquad;
#X obj 30 2345 flt.c_hpf~;
#X text 175 2345 HPF coefficent calculator for biquad filter;
#X obj 30 2372 flt.c_lowshelf~;
#X text 175 2372 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2399 flt.c_lpf~;
#X text 175 2399 LPF coefficent calculator for biquad filter;
#X obj 30 2426 flt.c_notch~;
#X text 175 2426 Band-reject coefficent calculator for biquad filter;
#X obj 30 2453 flt.c_peak~;
#X text 175 2453 Peaking equalizer calculator for biquad.;
#X obj 30 2480 flt.dcblock2~;
#X text 175 2480 stereo DC blocker;
#X obj 30 2507 flt.dcblock~;
#X text 175 2507 mono DC blocker;
#X obj 30 2534 flt.eq_peak~;
#X text 175 2534 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2585 flt.highshelf~;
#X text 175 2585 gain boost|cut above some frequency;
#X obj 30 2612 flt.hpf12~;
#X text 175 2612 High-pass filter with 12/db per octave slope;
#X obj 30 2639 flt.hpf24~;
#X text 175 2639 High-pass filter with 24/db per octave slope;
#X obj 30 2666 flt.lowshelf~;
#X text 175 2666 gain boost|cut below some frequency;
#X obj 30 2693 flt.lpf12~;
#X text 175 2693 Low-pass filter with 12/db per octave slope;
#X obj 30 2720 flt.lpf24~;
#X text 175 2720 Low-pass filter with 24/db per octave slope;
#X obj 30 2747 flt.notch~;
#X text 175 2747 band-rejection filter;
#X obj 30 2774 flt.resonbp~;
#X text 175 2774 Simple resonant bandpass filter;
#X obj 20 2801 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2842 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2853 fx.distortion~;
#X text 175 2853 cubic nonlinearity distortion;
#X obj 30 2880 fx.flanger~;
#X text 175 2880 mono flanging effect;
#X obj 30 2907 fx.freeverb2~;
#X text 175 2907 freeverb2 - stereo version of freeverb;
#X obj 30 2934 fx.freeverb~;
#X text 175 2934 freeverb - common used open-source reverb;
#X obj 30 2961 fx.freqshift~;
#X text 175 2961 frequency shifter or single-sideband ring modulation;
#X obj 30 2988 fx.pitchshift~;
#X text 175 2988 simple pitch shifter based on 2 delay lines;
#X obj 30 3015 fx.zita_rev1~;
#X text 175 3015 Zita stereo reverb;
#X obj 20 3042 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 3083 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3094 global.float;
#X text 175 3094 global named float object;
#X obj 30 3121 global.int;
#X text 175 3121 global named integer object;
#X obj 30 3148 global.list;
#X text 175 3148 global named list object;
#X obj 20 3175 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3216 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3227 lfo.impulse~;
#X text 175 3227 Unit-amplitude low-frequency impulse train;
#X obj 30 3254 lfo.square~;
#X text 175 3254 Positive low frequence square wave;
#X obj 30 3281 lfo.tri~;
#X text 175 3281 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3308 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3349 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3360 list.all_of;
#X text 175 3360 checks if all list atoms accepted by predicate;
#X obj 30 3387 list.any_of;
#X text 175 3387 checks if at least one list element is accepted by
predicate;
#X obj 30 3424 list.apply_to;
#X text 175 3424 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3461 list.at;
#X text 175 3461 returns list element(s) at given position(s);
#X obj 30 3488 list.choice;
#X text 175 3488 returns random element from list;
#X obj 30 3515 list.count;
#X text 175 3515 returns the number of items that equal to specified
value;
#X obj 30 3542 list.count_if;
#X text 175 3542 returns the number of items that satisfy to external
predicate.;
#X obj 30 3579 list.deinterleave;
#X text 175 3579 splits list to N lists \, each to separate output;
#X obj 30 3606 list.delta;
#X text 175 3606 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3643 list.distribution;
#X text 175 3643 list value distribution;
#X obj 30 3670 list.each;
#X text 175 3670 maps each list value via external object(s);
#X obj 30 3697 list.enumerate;
#X text 175 3697 enumerates input list;
#X obj 30 3724 list.equal;
#X text 175 3724 checks if given lists are equal;
#X obj 30 3751 list.first;
#X text 175 3751 returns first list element;
#X obj 30 3778 list.gen;
#X text 175 3778 generates list of specified length via external
generator;
#X obj 30 3805 list.histogram;
#X text 175 3805 outputs distibution histogram;
#X obj 30 3832 list.integrator;
#X text 175 3832 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3869 list.interleave;
#X text 175 3869 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3920 list.last;
#X text 175 3920 returns last list element;
#X obj 30 3947 list.length;
#X text 175 3947 returns the number of atoms in the message;
#X obj 30 3974 list.max;
#X text 175 3974 returns largest element in the list;
#X obj 30 4001 list.mean;
#X text 175 4001 calculates average of list of floats;
#X obj 30 4028 list.min;
#X text 175 4028 returns smallest element in the list;
#X obj 30 4055 list.none_of;
#X text 175 4055 checks if none of list atoms is accepted by
predicate;
#X obj 30 4082 list.normalize;
#X text 175 4082 normalizes float list values to get their sum = 1.0;
#X obj 30 4109 list.pass_if;
#X text 175 4109 leave only elements accepted by predicate;
#X obj 30 4136 list.product;
#X text 175 4136 calculates product of floats in list;
#X obj 30 4163 list.range;
#X text 175 4163 returns list smallest and largest value;
#X obj 30 4190 list.reduce;
#X text 175 4190 apply function of two arguments cumulatively to the
list;
#X obj 30 4217 list.remove_if;
#X text 175 4217 remove elements by predicate;
#X obj 30 4244 list.repack;
#X text 175 4244 repack input list to specified size;
#X obj 30 4271 list.repeat;
#X text 175 4271 creates new list by repeating given list specified
times;
#X obj 30 4298 list.resize;
#X text 175 4298 changes list size;
#X obj 30 4325 list.reverse;
#X text 175 4325 reverses the order of the elements in the list;
#X obj 30 4352 list.rotate;
#X text 175 4352 rotates list left;
#X obj 30 4379 list.separate;
#X text 175 4379 sends list elements one by one separately;
#X obj 30 4406 list.seq;
#X text 175 4406 numeric sequence list generator;
#X obj 30 4433 list.shuffle;
#X text 175 4433 randomly rearranges elements in list;
#X obj 30 4460 list.slice;
#X text 175 4460 extract sublist;
#X obj 30 4487 list.sort;
#X text 175 4487 sorts list values by ascending order;
#X obj 30 4514 list.sort_with;
#X text 175 4514 sort list with user defined side-chain;
#X obj 30 4541 list.sum;
#X text 175 4541 calculates sum of floats in list;
#X obj 30 4568 list.unique;
#X text 175 4568 sorts and removes duplicates from input list;
#X obj 30 4595 list.unpack;
#X text 175 4595 unpack list elements to separate outlets;
#X obj 30 4622 list.unwrap;
#X text 175 4622 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4659 list.walk;
#X text 175 4659 Walks thru the list;
#X obj 30 4686 list.wrap;
#X text 175 4686 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4737 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4778 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4789 live.capture~;
#X text 175 4789 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4826 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 4867 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4878 local.float;
#X text 175 4878 canvas-scoped named float variable;
#X obj 30 4905 local.int;
#X text 175 4905 canvas-scoped named integer variable;
#X obj 30 4932 local.list;
#X text 175 4932 local named list object;
#X obj 20 4959 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 5000 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5011 math.abs;
#X text 175 5011 absolute value function;
#X obj 30 5038 math.acos;
#X text 175 5038 arc cosine function;
#X obj 30 5065 math.acosh;
#X text 175 5065 inverse hyperbolic cosine function;
#X obj 30 5092 math.and;
#X text 175 5092 operation AND for multiple arguments;
#X obj 30 5119 math.approx;
#X text 175 5119 check if input value approximately equal to pattern;
#X obj 30 5146 math.asin;
#X text 175 5146 arc sine function;
#X obj 30 5173 math.asinh;
#X text 175 5173 inverse hyperbolic sine function;
#X obj 30 5200 math.atan;
#X text 175 5200 arc tangent function;
#X obj 30 5227 math.atanh;
#X text 175 5227 inverse hyperbolic tangent function;
#X obj 30 5254 math.cbrt;
#X text 175 5254 cube root function;
#X obj 30 5281 math.ceil;
#X text 175 5281 round to smallest integral value not less than input
value;
#X obj 30 5308 math.cos;
#X text 175 5308 cosine function;
#X obj 30 5335 math.cosh;
#X text 175 5335 hyperbolic cosine function;
#X obj 30 5362 math.e;
#X text 175 5362 mathematical constant \, base of the natural
logarithm;
#X obj 30 5389 math.exp;
#X text 175 5389 exponential functions;
#X obj 30 5416 math.exp2;
#X text 175 5416 exponential functions;
#X obj 30 5443 math.floor;
#X text 175 5443 round to largest integral value not greater than x;
#X obj 30 5470 math.gcd;
#X text 175 5470 calculate greatest common divisor;
#X obj 30 5497 math.inf;
#X text 175 5497 infinity value that cannot be represented accurately;
#X obj 30 5524 math.lcm;
#X text 175 5524 calculate least common multiple;
#X obj 30 5551 math.log;
#X text 175 5551 logarithm functions;
#X obj 30 5578 math.log10;
#X text 175 5578 logarithm functions;
#X obj 30 5605 math.log2;
#X text 175 5605 logarithm functions;
#X obj 30 5632 math.nan;
#X text 175 5632 Not a Number \, unrepresentable value;
#X obj 30 5659 math.neg;
#X text 175 5659 negate function;
#X obj 30 5686 math.or;
#X text 175 5686 operation OR for multiple arguments;
#X obj 30 5713 math.pi;
#X text 175 5713 mathematical constant;
#X obj 30 5740 math.reciprocal;
#X text 175 5740 calculate reciprocal number;
#X obj 30 5767 math.round;
#X text 175 5767 round to integral value \, regardless of rounding
direction;
#X obj 30 5794 math.round~;
#X text 175 5794 signal round;
#X obj 30 5821 math.sign;
#X text 175 5821 sign function;
#X obj 30 5848 math.sin;
#X text 175 5848 sine function;
#X obj 30 5875 math.sinh;
#X text 175 5875 hyperbolic sine function;
#X obj 30 5902 math.sqrt;
#X text 175 5902 square root function;
#X obj 30 5929 math.squared;
#X text 175 5929 value square;
#X obj 30 5956 math.tan;
#X text 175 5956 tangent function;
#X obj 30 5983 math.tanh;
#X text 175 5983 hyperbolic tangent function;
#X obj 30 6010 math.trunc;
#X text 175 6010 truncate to integer value;
#X obj 20 6037 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 6078 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6089 midi.ctl2str;
#X text 175 6089 convert Standard MIDI Controllers number to name;
#X obj 30 6116 midi.event2ctl;
#X text 175 6116 convert MidiEvent message to controller channel/value
pair;
#X obj 30 6143 midi.event2note;
#X text 175 6143 convert MidiEvent message to midi note/velocity pair;
#X obj 30 6170 midi.event2prg;
#X text 175 6170 convert MidiEvent message to midi program change
value;
#X obj 30 6197 midi.file;
#X text 175 6197 standard midi file SMF reader and writer;
#X obj 30 6224 midi.key2str;
#X text 175 6224 convert key number to SPN name according to tonality;
#X obj 30 6251 midi.prg2str;
#X text 175 6251 convert GM Instrument number to name (string or
symbol);
#X obj 30 6278 midi.track;
#X text 175 6278 extract track from MidiFile;
#X obj 20 6305 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 6346 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6357 click~;
#X text 175 6357 Output single impulse on bang;
#X obj 30 6384 modplug~;
#X text 175 6384 MOD file player (using libmodplug);
#X obj 20 6411 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 6452 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6463 msg;
#X text 175 6463 message constructor;
#X obj 20 6490 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 6531 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6542 noise.pink~;
#X text 175 6542 Pink noise generator;
#X obj 30 6569 noise.white~;
#X text 175 6569 White noise generator;
#X obj 20 6596 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 6637 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6648 osc.impulse~;
#X text 175 6648 Bandlimited impulse train generator;
#X obj 30 6675 osc.pulse~;
#X text 175 6675 Bandlimited pulse train oscillator.;
#X obj 30 6702 osc.saw~;
#X text 175 6702 Bandlimited saw wave oscillator;
#X obj 30 6729 osc.sinfb~;
#X text 175 6729 sine oscilator with feedback;
#X obj 30 6756 osc.square~;
#X text 175 6756 Bandlimited square wave oscillator;
#X obj 30 6783 osc.tri~;
#X text 175 6783 Bandlimited triangle wave oscillator;
#X obj 20 6810 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 6851 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6862 canvas.current;
#X text 175 6862 verbose information about current canvas;
#X obj 30 6889 canvas.top;
#X text 175 6889 verbose information about top-level canvas;
#X obj 30 6916 patch.args;
#X text 175 6916 Get patch or subpatch arguments;
#X obj 20 6943 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 6984 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6995 path.basename;
#X text 175 6995 outputs filename portion of pathname;
#X obj 30 7022 path.dirname;
#X text 175 7022 outputs directory portion of pathname;
#X obj 30 7049 path.exists;
#X text 175 7049 checks if given path exists;
#X obj 30 7076 path.lsdir;
#X text 175 7076 list directory contents;
#X obj 20 7103 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 7144 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7155 is_any;
#X text 175 7155 checks if input data has *any* type;
#X obj 30 7182 is_bang;
#X text 175 7182 checks if input data has *bang* type;
#X obj 30 7209 is_even;
#X text 175 7209 checks if input number is even;
#X obj 30 7236 is_file;
#X text 175 7236 checks if file exists and accessible;
#X obj 30 7263 is_float;
#X text 175 7263 checks if input data has *float* type;
#X obj 30 7290 is_list;
#X text 175 7290 checks if input data has *list* type;
#X obj 30 7317 is_odd;
#X text 175 7317 checks if input number is odd;
#X obj 30 7344 is_pointer;
#X text 175 7344 checks if input data has *pointer* type;
#X obj 30 7371 is_symbol;
#X text 175 7371 checks if input data has *symbol* type;
#X obj 20 7398 cnv 5 68 31 empty empty preset 4 13 0 17 -262144 -49933
0;
#X obj 20 7439 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7450 preset.float;
#X text 175 7450 load/store float preset;
#X obj 30 7477 preset.list;
#X text 175 7477 load/store symbol preset;
#X obj 30 7504 preset.storage;
#X text 175 7504 preset storage control;
#X obj 30 7531 preset.symbol;
#X text 175 7531 load/store symbol preset;
#X obj 20 7558 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 7599 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7610 prop.get;
#X text 175 7610 Property extractor;
#X obj 30 7637 prop.set;
#X text 175 7637 Property injector;
#X obj 20 7664 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 7705 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7716 random.discrete;
#X text 175 7716 random weighted integers on interval [0 \, n);
#X obj 30 7743 random.float;
#X text 175 7743 random float generator in specified range;
#X obj 30 7770 random.gauss;
#X text 175 7770 gaussian random distribution;
#X obj 30 7797 random.int;
#X text 175 7797 Random integer generator in specified range;
#X obj 30 7824 random.linear;
#X text 175 7824 random linear distribution;
#X obj 30 7851 random.pw_const;
#X text 175 7851 piecewise constant random distribution;
#X obj 30 7878 random.pw_lin;
#X text 175 7878 piecewise linear random distribution;
#X obj 20 7905 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 7946 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7957 snd.file;
#X text 175 7957 Sound file loader on steroids;
#X obj 20 7984 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 8025 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8036 string;
#X text 175 8036 string constructor;
#X obj 30 8063 string.contains;
#X text 175 8063 checks if given string contains specified substring;
#X obj 30 8090 string.ends_with;
#X text 175 8090 checks if given string ends with specified suffix;
#X obj 30 8117 string.equal;
#X text 175 8117 check strings for equality;
#X obj 30 8144 string.format;
#X text 175 8144 formats string like printf.;
#X obj 30 8171 string.join;
#X text 175 8171 joins (concatenates) strings with separator;
#X obj 30 8198 string.length;
#X text 175 8198 number of characters in string (unicode supported);
#X obj 30 8225 string.remove;
#X text 175 8225 remove substring from input string;
#X obj 30 8252 string.replace;
#X text 175 8252 replace from one substring to another in input
string;
#X obj 30 8279 string.split;
#X text 175 8279 split string by separator;
#X obj 30 8306 string.starts_with;
#X text 175 8306 checks if given string starts with specified prefix;
#X obj 30 8333 string.substr;
#X text 175 8333 extract substring from input string;
#X obj 30 8360 string2symbol;
#X text 175 8360 converts string to symbol;
#X obj 20 8387 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 8428 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8439 symbol.equal;
#X text 175 8439 check symbols for equality;
#X obj 30 8466 symbol.length;
#X text 175 8466 number of characters in symbol (unicode supported);
#X obj 20 8493 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 8534 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8545 system.cursor;
#X text 175 8545 S;
#X obj 30 8572 system.getenv;
#X text 175 8572 Get system environment variables;
#X obj 30 8599 system.hostname;
#X text 175 8599 outputs system hostname;
#X obj 30 8626 system.memsize;
#X text 175 8626 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 8663 system.memused;
#X text 175 8663 returns the process physical memory use - current and
peak;
#X obj 30 8690 system.screen_size;
#X text 175 8690 returns current screen size in pixels;
#X obj 20 8717 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 8758 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8772 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 8769 Timeline bang;
#X obj 30 8795 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 8792 Timeline section;
#X obj 30 8815 tl.transport;
#X text 175 8815 Timeline transport control;
#X obj 30 8845 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 8842 A bang... that's all;
#X obj 30 8868 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 8865 Breakpoint function GUI object;
#X obj 30 8891 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 8888 Display GUI object;
#X obj 30 8914 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 8911 keyboard widget;
#X obj 30 8937 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 8934 knob widget;
#X obj 30 8960 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 8957 The matrix of toggles has you.;
#X obj 30 8983 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 8980 Scope GUI object;
#X obj 30 9006 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 9003 2D slider widget;
#X obj 30 9029 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 9026 Multiple slider widget;
#X obj 30 9052 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 9049 Spectroscope GUI object;
#X obj 30 9075 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 9072 modern toggle widget;
#X obj 20 9095 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 9136 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9147 vector.distance;
#X text 175 9147 returns euclidean distance between two points;
#X obj 30 9174 vector.dot;
#X text 175 9174 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 9225 vector.length;
#X text 175 9225 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 9262 vector.normalize;
#X text 175 9262 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 9289 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 9289 version: v0.3 \, license: GPL3;
#X obj 20 9308 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;