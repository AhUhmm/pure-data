#N canvas 0 0 600 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio\. ;
#X obj 20 101 cnv 5 38 19 empty empty data 0 17 0 17 -262144 -49933 0;
#X obj 20 130 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 141 data.fifo;
#X text 150 141 First-In-First-Out (FIFO) queue data container;
#X obj 30 168 data.list;
#X text 150 168 list container;
#X obj 20 195 cnv 5 28 19 empty empty dyn 0 17 0 17 -262144 -49933 0;
#X obj 20 224 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 235 dyn.comp2~;
#X text 150 235 stereo dynamic range compressor;
#X obj 30 262 dyn.comp~;
#X text 150 262 mono dynamic range compressors;
#X obj 30 289 dyn.gate2~;
#X text 150 289 stereo signal gate;
#X obj 30 316 dyn.gate~;
#X text 150 316 mono signal gate;
#X obj 30 343 dyn.limit2~;
#X text 150 343 stereo 1176LN Peak Limiter;
#X obj 30 370 dyn.limit~;
#X text 150 370 mono 1176LN Peak Limiter;
#X obj 30 397 dyn.softclip~;
#X text 150 397 soft signal clip;
#X obj 20 424 cnv 5 28 19 empty empty env 0 17 0 17 -262144 -49933 0;
#X obj 20 453 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 464 env.adsr~;
#X text 150 464 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 491 env.ar~;
#X text 150 491 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes)\.;
#X obj 30 528 env.follow~;
#X text 150 528 Envelope follower with independent attack and release
times\.;
#X obj 20 565 cnv 5 27 19 empty empty flt 0 17 0 17 -262144 -49933 0;
#X obj 20 594 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 605 flt.dcblock2~;
#X text 150 605 stereo DC blocker;
#X obj 30 632 flt.dcblock~;
#X text 150 632 mono DC blocker;
#X obj 30 659 flt.eq_peak~;
#X text 150 659 second order "peaking equalizer" section (gain boost
or cut near some frequency)\.  Also called a "parametric equalizer"
section\.;
#X obj 30 710 flt.highshelf~;
#X text 150 710 gain boost|cut above some frequency;
#X obj 30 737 flt.lowshelf~;
#X text 150 737 gain boost|cut below some frequency;
#X obj 20 764 cnv 5 18 19 empty empty fx 0 17 0 17 -262144 -49933 0;
#X obj 20 793 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 804 fx.pitchshift~;
#X text 150 804 simple pitch shifter based on 2 delay lines;
#X obj 20 831 cnv 5 59 19 empty empty global 0 17 0 17 -262144 -49933
0;
#X obj 20 860 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 871 global.float;
#X text 150 871 global named float object;
#X obj 30 898 global.int;
#X text 150 898 global named integer object;
#X obj 30 925 global.list;
#X text 150 925 global named list object;
#X obj 20 952 cnv 5 27 19 empty empty lfo 0 17 0 17 -262144 -49933 0;
#X obj 20 981 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 992 lfo.impulse~;
#X text 150 992 Unit-amplitude low-frequency impulse train;
#X obj 30 1019 lfo.square~;
#X text 150 1019 Positive low frequence square wave;
#X obj 30 1046 lfo.tri~;
#X text 150 1046 Positive unit-amplitude low frequency triangle wave;
#X obj 20 1073 cnv 5 37 19 empty empty list 0 17 0 17 -262144 -49933
0;
#X obj 20 1102 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1113 list.apply_to;
#X text 150 1113 modifies list value at specified position \,
filtering it via external object\.;
#X obj 30 1150 list.at;
#X text 150 1150 returns list element at given position;
#X obj 30 1177 list.choice;
#X text 150 1177 returns random element from list;
#X obj 30 1204 list.count;
#X text 150 1204 returns the number of items that equal to specified
value;
#X obj 30 1231 list.count_if;
#X text 150 1231 returns the number of items that satisfy to external
predicate\.;
#X obj 30 1268 list.deinterleave;
#X text 150 1268 splits list to N lists \, each to separate output;
#X obj 30 1295 list.delta;
#X text 150 1295 returns the difference between the current list of
floats and the previous one\.;
#X obj 30 1332 list.each;
#X text 150 1332 maps each list value via external object(s);
#X obj 30 1359 list.equal;
#X text 150 1359 checks if given lists are equal;
#X obj 30 1386 list.first;
#X text 150 1386 returns first list element;
#X obj 30 1413 list.gen;
#X text 150 1413 generates list of specified length via external
generator;
#X obj 30 1440 list.interleave;
#X text 150 1440 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc\.)\.;
#X obj 30 1491 list.last;
#X text 150 1491 returns last list element;
#X obj 30 1518 list.length;
#X text 150 1518 returns the number of atoms in the message;
#X obj 30 1545 list.max;
#X text 150 1545 returns largest element in the list;
#X obj 30 1572 list.mean;
#X text 150 1572 calculates average of list of floats;
#X obj 30 1599 list.min;
#X text 150 1599 returns smallest element in the list;
#X obj 30 1626 list.normalize;
#X text 150 1626 normalizes float list values to get their sum = 1\.0;
#X obj 30 1653 list.product;
#X text 150 1653 calculates product of floats in list;
#X obj 30 1680 list.range;
#X text 150 1680 returns list smallest and largest value;
#X obj 30 1707 list.reduce;
#X text 150 1707 apply function of two arguments cumulatively to the
list;
#X obj 30 1734 list.resize;
#X text 150 1734 changes list size with;
#X obj 30 1761 list.reverse;
#X text 150 1761 reverses the order of the elements in the list;
#X obj 30 1788 list.seq;
#X text 150 1788 numeric sequence list generator;
#X obj 30 1815 list.shuffle;
#X text 150 1815 randomly rearranges elements in list;
#X obj 30 1842 list.sort;
#X text 150 1842 sorts list values by ascending order;
#X obj 30 1869 list.sum;
#X text 150 1869 calculates sum of floats in list;
#X obj 30 1896 list.unpack;
#X text 150 1896 sends list element one by one separately;
#X obj 30 1923 list.unwrap;
#X text 150 1923 gets list element on first input and list with count
of each element on a second inlet\.;
#X obj 30 1960 list.walk;
#X text 150 1960 Walks thru the list;
#X obj 30 1987 list.wrap;
#X text 150 1987 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second\.;
#X obj 30 2038 vector.normalize;
#X text 150 2038 returns normalized vector;
#X obj 20 2065 cnv 5 38 19 empty empty live 0 17 0 17 -262144 -49933
0;
#X obj 20 2094 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2105 live.capture~;
#X text 150 2105 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 2142 cnv 5 38 19 empty empty math 0 17 0 17 -262144 -49933
0;
#X obj 20 2171 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2182 math.abs;
#X text 150 2182 absolute value function;
#X obj 30 2209 math.acos;
#X text 150 2209 arc cosine function;
#X obj 30 2236 math.acosh;
#X text 150 2236 inverse hyperbolic cosine function;
#X obj 30 2263 math.asin;
#X text 150 2263 arc sine function;
#X obj 30 2290 math.asinh;
#X text 150 2290 inverse hyperbolic sine function;
#X obj 30 2317 math.atan;
#X text 150 2317 arc tangent function;
#X obj 30 2344 math.atanh;
#X text 150 2344 inverse hyperbolic tangent function;
#X obj 30 2371 math.cbrt;
#X text 150 2371 cube root function;
#X obj 30 2398 math.ceil;
#X text 150 2398 round to smallest integral value not less than input
value;
#X obj 30 2425 math.cos;
#X text 150 2425 cosine function;
#X obj 30 2452 math.cosh;
#X text 150 2452 hyperbolic cosine function;
#X obj 30 2479 math.e;
#X text 150 2479 mathematical constant \, base of the natural
logarithm;
#X obj 30 2506 math.exp;
#X text 150 2506 exponential functions;
#X obj 30 2533 math.exp2;
#X text 150 2533 exponential functions;
#X obj 30 2560 math.floor;
#X text 150 2560 round to largest integral value not greater than x;
#X obj 30 2587 math.inf;
#X text 150 2587 infinity value that cannot be represented accurately;
#X obj 30 2614 math.log;
#X text 150 2614 logarithm functions;
#X obj 30 2641 math.log10;
#X text 150 2641 logarithm functions;
#X obj 30 2668 math.log2;
#X text 150 2668 logarithm functions;
#X obj 30 2695 math.nan;
#X text 150 2695 Not a Number \, unrepresentable value;
#X obj 30 2722 math.pi;
#X text 150 2722 mathematical constant;
#X obj 30 2749 math.round;
#X text 150 2749 round to integral value \, regardless of rounding
direction;
#X obj 30 2776 math.sin;
#X text 150 2776 sine function;
#X obj 30 2803 math.sinh;
#X text 150 2803 hyperbolic sine function;
#X obj 30 2830 math.sqrt;
#X text 150 2830 square root function;
#X obj 30 2857 math.tan;
#X text 150 2857 tangent function;
#X obj 30 2884 math.tanh;
#X text 150 2884 hyperbolic tangent function;
#X obj 30 2911 math.trunc;
#X text 150 2911 truncate to integer value;
#X obj 20 2938 cnv 5 28 19 empty empty msg 0 17 0 17 -262144 -49933 0;
#X obj 20 2967 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2978 msg;
#X text 150 2978 message constructor;
#X obj 20 3005 cnv 5 28 19 empty empty osc 0 17 0 17 -262144 -49933 0;
#X obj 20 3034 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3045 osc.impulse~;
#X text 150 3045 Bandlimited impulse train generator;
#X obj 30 3072 osc.pulse~;
#X text 150 3072 Bandlimited pulse train oscillator\. ;
#X obj 30 3099 osc.saw~;
#X text 150 3099 Bandlimited saw wave oscillator;
#X obj 30 3126 osc.sinfb~;
#X text 150 3126 sine oscilator with feedback;
#X obj 30 3153 osc.square~;
#X text 150 3153 Bandlimited square wave oscillator;
#X obj 30 3180 osc.tri~;
#X text 150 3180 Bandlimited triangle wave oscillator;
#X obj 20 3207 cnv 5 37 19 empty empty pass 0 17 0 17 -262144 -49933
0;
#X obj 20 3236 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3247 pass.changed;
#X text 150 3247 rejects redundant input values;
#X obj 30 3274 pass.if;
#X text 150 3274 pass values that accepted by predicate object;
#X obj 20 3301 cnv 5 99 19 empty empty predicates 0 17 0 17 -262144
-49933 0;
#X obj 20 3330 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3341 is_any;
#X text 150 3341 checks if input data has *any* type;
#X obj 30 3368 is_bang;
#X text 150 3368 checks if input data has *bang* type;
#X obj 30 3395 is_even;
#X text 150 3395 checks if input number is even;
#X obj 30 3422 is_float;
#X text 150 3422 checks if input data has *float* type;
#X obj 30 3449 is_list;
#X text 150 3449 checks if input data has *list* type;
#X obj 30 3476 is_odd;
#X text 150 3476 checks if input number is odd;
#X obj 30 3503 is_pointer;
#X text 150 3503 checks if input data has *pointer* type;
#X obj 30 3530 is_symbol;
#X text 150 3530 checks if input data has *symbol* type;
#X obj 20 3557 cnv 5 58 19 empty empty symbol 0 17 0 17 -262144 -49933
0;
#X obj 20 3586 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3597 symbol.length;
#X text 150 3597 length of symbol (unicode supported);
#X obj 20 3624 cnv 5 58 19 empty empty system 0 17 0 17 -262144 -49933
0;
#X obj 20 3653 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3664 system.memsize;
#X text 150 3664 returns the size of physical memory (RAM) in bytes
round to float data type\.;
#X obj 30 3701 system.memused;
#X text 150 3701 returns the process physical memory use - current and
peak;
#X obj 20 3728 cnv 5 59 19 empty empty vector 0 17 0 17 -262144 -49933
0;
#X obj 20 3757 cnv 1 576 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3768 vector.distance;
#X text 150 3768 returns euclidean distance between two points;
#X obj 30 3795 vector.dot;
#X text 150 3795 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied)\.;
#X obj 30 3846 vector.length;
#X text 150 3846 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + \.\.\.element(n)^2)\.;
#X obj 1 1 cnv 5 597 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 3883 cnv 5 597 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 3883 version: v0\.1 \, license: GPL3;
#X obj 20 3899 pddp/pddplink https://github.com/uliss/pure-data -text
https://github.com/uliss/pure-data;