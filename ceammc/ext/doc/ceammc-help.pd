#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 conv.bpm2hz;
#X text 175 153 converts BPM to frequency in herz;
#X obj 30 180 conv.bpm2ms;
#X text 175 180 convert frequency in BPM to period in milliseconds;
#X obj 30 207 conv.bpm2sec;
#X text 175 207 convert frequency in BPM to period in seconds;
#X obj 30 234 conv.lin2curve;
#X text 175 234 map linear to exponential range with 0 allowed.;
#X obj 30 261 conv.lin2exp;
#X text 175 261 maps linear range to exponential range;
#X obj 30 288 conv.lin2lin;
#X text 175 288 convert from one linear range to another;
#X obj 30 315 conv.sec2str;
#X text 175 315 converts float time in seconds to formated symbol;
#X obj 30 342 conv.str2sec;
#X text 175 342 converts formatted time to float value in seconds;
#X obj 20 369 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 421 data.fifo;
#X text 175 421 First-In-First-Out (FIFO) queue data container;
#X obj 30 448 data.list;
#X text 175 448 list container;
#X obj 20 475 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 516 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 527 dyn.comp2~;
#X text 175 527 stereo dynamic range compressor;
#X obj 30 554 dyn.comp~;
#X text 175 554 mono dynamic range compressors;
#X obj 30 581 dyn.gate2~;
#X text 175 581 stereo signal gate;
#X obj 30 608 dyn.gate~;
#X text 175 608 mono signal gate;
#X obj 30 635 dyn.limit2~;
#X text 175 635 stereo 1176LN Peak Limiter;
#X obj 30 662 dyn.limit~;
#X text 175 662 mono 1176LN Peak Limiter;
#X obj 30 689 dyn.softclip~;
#X text 175 689 soft signal clip;
#X obj 20 716 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 757 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 768 env.adsr~;
#X text 175 768 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 795 env.ar~;
#X text 175 795 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 832 env.follow~;
#X text 175 832 Envelope follower with independent attack and release
times.;
#X obj 20 869 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933 0;
#X obj 20 910 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 921 expand_env;
#X text 175 921 Substitute enviroment variables in data stream;
#X obj 30 948 flow.sync;
#X text 175 948 bus with only hot inlets;
#X obj 30 975 replace;
#X text 175 975 Replace atoms in data stream;
#X obj 20 1002 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1043 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1054 flt.biquad~;
#X text 175 1054 second order IIR filter.;
#X obj 30 1081 flt.bpf12~;
#X text 175 1081 Band-pass filter with 12/db per octave slope;
#X obj 30 1108 flt.bpf24~;
#X text 175 1108 Band-pass filter with 24/db per octave slope;
#X obj 30 1135 flt.c_bpf~;
#X text 175 1135 BPF coefficent calculator for biquad filter;
#X obj 30 1162 flt.c_highshelf~;
#X text 175 1162 Highshelf filter coefficent calculator for biquad;
#X obj 30 1189 flt.c_hpf~;
#X text 175 1189 HPF coefficent calculator for biquad filter;
#X obj 30 1216 flt.c_lowshelf~;
#X text 175 1216 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1243 flt.c_lpf~;
#X text 175 1243 LPF coefficent calculator for biquad filter;
#X obj 30 1270 flt.c_notch~;
#X text 175 1270 Band-reject coefficent calculator for biquad filter;
#X obj 30 1297 flt.c_peak~;
#X text 175 1297 Peaking equalizer calculator for biquad.;
#X obj 30 1324 flt.dcblock2~;
#X text 175 1324 stereo DC blocker;
#X obj 30 1351 flt.dcblock~;
#X text 175 1351 mono DC blocker;
#X obj 30 1378 flt.eq_peak~;
#X text 175 1378 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1429 flt.highshelf~;
#X text 175 1429 gain boost|cut above some frequency;
#X obj 30 1456 flt.hpf12~;
#X text 175 1456 High-pass filter with 12/db per octave slope;
#X obj 30 1483 flt.hpf24~;
#X text 175 1483 High-pass filter with 24/db per octave slope;
#X obj 30 1510 flt.lowshelf~;
#X text 175 1510 gain boost|cut below some frequency;
#X obj 30 1537 flt.lpf12~;
#X text 175 1537 Low-pass filter with 12/db per octave slope;
#X obj 30 1564 flt.lpf24~;
#X text 175 1564 Low-pass filter with 24/db per octave slope;
#X obj 30 1591 flt.notch~;
#X text 175 1591 band-rejection filter;
#X obj 30 1618 flt.resonbp~;
#X text 175 1618 Simple resonant bandpass filter;
#X obj 20 1645 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1686 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1697 fx.distortion~;
#X text 175 1697 cubic nonlinearity distortion;
#X obj 30 1724 fx.flanger~;
#X text 175 1724 mono flanging effect;
#X obj 30 1751 fx.freeverb2~;
#X text 175 1751 freeverb2 - stereo version of freeverb;
#X obj 30 1778 fx.freeverb~;
#X text 175 1778 freeverb - common used open-source reverb;
#X obj 30 1805 fx.freqshift~;
#X text 175 1805 frequency shifter or single-sideband ring modulation;
#X obj 30 1832 fx.pitchshift~;
#X text 175 1832 simple pitch shifter based on 2 delay lines;
#X obj 30 1859 fx.zita_rev1~;
#X text 175 1859 Zita stereo reverb;
#X obj 20 1886 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 1927 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1938 global.float;
#X text 175 1938 global named float object;
#X obj 30 1965 global.int;
#X text 175 1965 global named integer object;
#X obj 30 1992 global.list;
#X text 175 1992 global named list object;
#X obj 20 2019 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2060 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2071 lfo.impulse~;
#X text 175 2071 Unit-amplitude low-frequency impulse train;
#X obj 30 2098 lfo.square~;
#X text 175 2098 Positive low frequence square wave;
#X obj 30 2125 lfo.tri~;
#X text 175 2125 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2152 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2193 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2204 list.all_of;
#X text 175 2204 checks if all list atoms accepted by predicate;
#X obj 30 2231 list.apply_to;
#X text 175 2231 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2268 list.at;
#X text 175 2268 returns list element at given position;
#X obj 30 2295 list.choice;
#X text 175 2295 returns random element from list;
#X obj 30 2322 list.count;
#X text 175 2322 returns the number of items that equal to specified
value;
#X obj 30 2349 list.count_if;
#X text 175 2349 returns the number of items that satisfy to external
predicate.;
#X obj 30 2386 list.deinterleave;
#X text 175 2386 splits list to N lists \, each to separate output;
#X obj 30 2413 list.delta;
#X text 175 2413 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2450 list.each;
#X text 175 2450 maps each list value via external object(s);
#X obj 30 2477 list.equal;
#X text 175 2477 checks if given lists are equal;
#X obj 30 2504 list.first;
#X text 175 2504 returns first list element;
#X obj 30 2531 list.gen;
#X text 175 2531 generates list of specified length via external
generator;
#X obj 30 2558 list.integrator;
#X text 175 2558 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2595 list.interleave;
#X text 175 2595 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2646 list.last;
#X text 175 2646 returns last list element;
#X obj 30 2673 list.length;
#X text 175 2673 returns the number of atoms in the message;
#X obj 30 2700 list.max;
#X text 175 2700 returns largest element in the list;
#X obj 30 2727 list.mean;
#X text 175 2727 calculates average of list of floats;
#X obj 30 2754 list.min;
#X text 175 2754 returns smallest element in the list;
#X obj 30 2781 list.normalize;
#X text 175 2781 normalizes float list values to get their sum = 1.0;
#X obj 30 2808 list.product;
#X text 175 2808 calculates product of floats in list;
#X obj 30 2835 list.range;
#X text 175 2835 returns list smallest and largest value;
#X obj 30 2862 list.reduce;
#X text 175 2862 apply function of two arguments cumulatively to the
list;
#X obj 30 2889 list.remove_if;
#X text 175 2889 remove elements by predicate;
#X obj 30 2916 list.resize;
#X text 175 2916 changes list size with;
#X obj 30 2943 list.reverse;
#X text 175 2943 reverses the order of the elements in the list;
#X obj 30 2970 list.seq;
#X text 175 2970 numeric sequence list generator;
#X obj 30 2997 list.shuffle;
#X text 175 2997 randomly rearranges elements in list;
#X obj 30 3024 list.sort;
#X text 175 3024 sorts list values by ascending order;
#X obj 30 3051 list.sum;
#X text 175 3051 calculates sum of floats in list;
#X obj 30 3078 list.unpack;
#X text 175 3078 sends list element one by one separately;
#X obj 30 3105 list.unwrap;
#X text 175 3105 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3142 list.walk;
#X text 175 3142 Walks thru the list;
#X obj 30 3169 list.wrap;
#X text 175 3169 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3220 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3261 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3272 live.capture~;
#X text 175 3272 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3309 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3350 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3361 math.abs;
#X text 175 3361 absolute value function;
#X obj 30 3388 math.acos;
#X text 175 3388 arc cosine function;
#X obj 30 3415 math.acosh;
#X text 175 3415 inverse hyperbolic cosine function;
#X obj 30 3442 math.asin;
#X text 175 3442 arc sine function;
#X obj 30 3469 math.asinh;
#X text 175 3469 inverse hyperbolic sine function;
#X obj 30 3496 math.atan;
#X text 175 3496 arc tangent function;
#X obj 30 3523 math.atanh;
#X text 175 3523 inverse hyperbolic tangent function;
#X obj 30 3550 math.cbrt;
#X text 175 3550 cube root function;
#X obj 30 3577 math.ceil;
#X text 175 3577 round to smallest integral value not less than input
value;
#X obj 30 3604 math.cos;
#X text 175 3604 cosine function;
#X obj 30 3631 math.cosh;
#X text 175 3631 hyperbolic cosine function;
#X obj 30 3658 math.e;
#X text 175 3658 mathematical constant \, base of the natural
logarithm;
#X obj 30 3685 math.exp;
#X text 175 3685 exponential functions;
#X obj 30 3712 math.exp2;
#X text 175 3712 exponential functions;
#X obj 30 3739 math.floor;
#X text 175 3739 round to largest integral value not greater than x;
#X obj 30 3766 math.inf;
#X text 175 3766 infinity value that cannot be represented accurately;
#X obj 30 3793 math.log;
#X text 175 3793 logarithm functions;
#X obj 30 3820 math.log10;
#X text 175 3820 logarithm functions;
#X obj 30 3847 math.log2;
#X text 175 3847 logarithm functions;
#X obj 30 3874 math.nan;
#X text 175 3874 Not a Number \, unrepresentable value;
#X obj 30 3901 math.neg;
#X text 175 3901 negate function;
#X obj 30 3928 math.pi;
#X text 175 3928 mathematical constant;
#X obj 30 3955 math.reciprocal;
#X text 175 3955 calculate reciprocal number;
#X obj 30 3982 math.round;
#X text 175 3982 round to integral value \, regardless of rounding
direction;
#X obj 30 4009 math.sign;
#X text 175 4009 sign function;
#X obj 30 4036 math.sin;
#X text 175 4036 sine function;
#X obj 30 4063 math.sinh;
#X text 175 4063 hyperbolic sine function;
#X obj 30 4090 math.sqrt;
#X text 175 4090 square root function;
#X obj 30 4117 math.squared;
#X text 175 4117 value square;
#X obj 30 4144 math.tan;
#X text 175 4144 tangent function;
#X obj 30 4171 math.tanh;
#X text 175 4171 hyperbolic tangent function;
#X obj 30 4198 math.trunc;
#X text 175 4198 truncate to integer value;
#X obj 20 4225 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4266 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4277 msg;
#X text 175 4277 message constructor;
#X obj 20 4304 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4345 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4356 noise.pink~;
#X text 175 4356 Pink noise generator;
#X obj 30 4383 noise.white~;
#X text 175 4383 White noise generator;
#X obj 20 4410 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4451 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4462 osc.impulse~;
#X text 175 4462 Bandlimited impulse train generator;
#X obj 30 4489 osc.pulse~;
#X text 175 4489 Bandlimited pulse train oscillator.;
#X obj 30 4516 osc.saw~;
#X text 175 4516 Bandlimited saw wave oscillator;
#X obj 30 4543 osc.sinfb~;
#X text 175 4543 sine oscilator with feedback;
#X obj 30 4570 osc.square~;
#X text 175 4570 Bandlimited square wave oscillator;
#X obj 30 4597 osc.tri~;
#X text 175 4597 Bandlimited triangle wave oscillator;
#X obj 20 4624 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4665 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4676 pass.changed;
#X text 175 4676 rejects redundant input values;
#X obj 30 4703 pass.if;
#X text 175 4703 pass values that accepted by predicate object;
#X obj 30 4730 pass.this;
#X text 175 4730 pass only specified values;
#X obj 20 4757 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 4798 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4809 path.basename;
#X text 175 4809 outputs filename portion of pathname;
#X obj 30 4836 path.dirname;
#X text 175 4836 outputs directory portion of pathname;
#X obj 20 4863 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 4904 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4915 is_any;
#X text 175 4915 checks if input data has *any* type;
#X obj 30 4942 is_bang;
#X text 175 4942 checks if input data has *bang* type;
#X obj 30 4969 is_even;
#X text 175 4969 checks if input number is even;
#X obj 30 4996 is_float;
#X text 175 4996 checks if input data has *float* type;
#X obj 30 5023 is_list;
#X text 175 5023 checks if input data has *list* type;
#X obj 30 5050 is_odd;
#X text 175 5050 checks if input number is odd;
#X obj 30 5077 is_pointer;
#X text 175 5077 checks if input data has *pointer* type;
#X obj 30 5104 is_symbol;
#X text 175 5104 checks if input data has *symbol* type;
#X obj 20 5131 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5172 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5183 prop.get;
#X text 175 5183 Property extractor;
#X obj 30 5210 prop.set;
#X text 175 5210 Property injector;
#X obj 20 5237 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5278 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5289 random.int;
#X text 175 5289 Random integer generator in specified range;
#X obj 20 5316 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5357 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5368 reject.if;
#X text 175 5368 reject values by predicate;
#X obj 30 5395 reject.this;
#X text 175 5395 reject only specified values;
#X obj 20 5422 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5463 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5474 snd.file;
#X text 175 5474 Sound file loader on steroids;
#X obj 20 5501 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5542 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5553 symbol.equal;
#X text 175 5553 check symbols for equality;
#X obj 30 5580 symbol.length;
#X text 175 5580 number of characters in symbol (unicode supported);
#X obj 20 5607 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 5648 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5659 system.getenv;
#X text 175 5659 Get system environment variables;
#X obj 30 5686 system.hostname;
#X text 175 5686 outputs system hostname;
#X obj 30 5713 system.memsize;
#X text 175 5713 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 5750 system.memused;
#X text 175 5750 returns the process physical memory use - current and
peak;
#X obj 30 5777 system.screen_size;
#X text 175 5777 returns current screen size in pixels;
#X obj 20 5804 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 5845 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5859 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 5856 A bang... that's all;
#X obj 30 5882 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 5879 Breakpoint function GUI object;
#X obj 30 5905 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 5902 Display GUI object;
#X obj 30 5928 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 5925 keyboard widget;
#X obj 30 5951 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 5948 knob widget;
#X obj 30 5974 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 5971 The matrix of toggles has you.;
#X obj 30 5997 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 5994 Scope GUI object;
#X obj 30 6020 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6017 2D slider widget;
#X obj 30 6043 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6040 Multiple slider widget;
#X obj 30 6066 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6063 Spectroscope GUI object;
#X obj 30 6089 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6086 modern toggle widget;
#X obj 20 6109 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6150 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6161 vector.distance;
#X text 175 6161 returns euclidean distance between two points;
#X obj 30 6188 vector.dot;
#X text 175 6188 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6239 vector.length;
#X text 175 6239 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6276 vector.normalize;
#X text 175 6276 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6303 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6303 version: v0.1 \, license: GPL3;
#X obj 20 6322 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;