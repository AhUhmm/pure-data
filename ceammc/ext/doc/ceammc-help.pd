#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.p2s;
#X text 175 153 convert array phase [0\..1] to sample position;
#X obj 30 180 conv.bpm2hz;
#X text 175 180 converts BPM to frequency in herz;
#X obj 30 207 conv.bpm2ms;
#X text 175 207 convert frequency in BPM to period in milliseconds;
#X obj 30 234 conv.bpm2sec;
#X text 175 234 convert frequency in BPM to period in seconds;
#X obj 30 261 conv.lin2curve;
#X text 175 261 map linear to exponential range with 0 allowed.;
#X obj 30 288 conv.lin2exp;
#X text 175 288 maps linear range to exponential range;
#X obj 30 315 conv.lin2lin;
#X text 175 315 convert from one linear range to another;
#X obj 30 342 conv.sec2str;
#X text 175 342 converts float time in seconds to formated symbol;
#X obj 30 369 conv.str2sec;
#X text 175 369 converts formatted time to float value in seconds;
#X obj 20 396 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 437 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 448 data.fifo;
#X text 175 448 First-In-First-Out (FIFO) queue data container;
#X obj 30 475 data.list;
#X text 175 475 list container;
#X obj 20 502 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 543 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 554 dyn.comp2~;
#X text 175 554 stereo dynamic range compressor;
#X obj 30 581 dyn.comp~;
#X text 175 581 mono dynamic range compressors;
#X obj 30 608 dyn.gate2~;
#X text 175 608 stereo signal gate;
#X obj 30 635 dyn.gate~;
#X text 175 635 mono signal gate;
#X obj 30 662 dyn.limit2~;
#X text 175 662 stereo 1176LN Peak Limiter;
#X obj 30 689 dyn.limit~;
#X text 175 689 mono 1176LN Peak Limiter;
#X obj 30 716 dyn.softclip~;
#X text 175 716 soft signal clip;
#X obj 20 743 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 784 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 795 env.adsr~;
#X text 175 795 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 822 env.ar~;
#X text 175 822 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 859 env.follow~;
#X text 175 859 Envelope follower with independent attack and release
times.;
#X obj 20 896 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933 0;
#X obj 20 937 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 948 expand_env;
#X text 175 948 Substitute enviroment variables in data stream;
#X obj 30 975 flow.sync;
#X text 175 975 bus with only hot inlets;
#X obj 30 1002 replace;
#X text 175 1002 Replace atoms in data stream;
#X obj 20 1029 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1070 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1081 flt.biquad~;
#X text 175 1081 second order IIR filter.;
#X obj 30 1108 flt.bpf12~;
#X text 175 1108 Band-pass filter with 12/db per octave slope;
#X obj 30 1135 flt.bpf24~;
#X text 175 1135 Band-pass filter with 24/db per octave slope;
#X obj 30 1162 flt.c_bpf~;
#X text 175 1162 BPF coefficent calculator for biquad filter;
#X obj 30 1189 flt.c_highshelf~;
#X text 175 1189 Highshelf filter coefficent calculator for biquad;
#X obj 30 1216 flt.c_hpf~;
#X text 175 1216 HPF coefficent calculator for biquad filter;
#X obj 30 1243 flt.c_lowshelf~;
#X text 175 1243 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1270 flt.c_lpf~;
#X text 175 1270 LPF coefficent calculator for biquad filter;
#X obj 30 1297 flt.c_notch~;
#X text 175 1297 Band-reject coefficent calculator for biquad filter;
#X obj 30 1324 flt.c_peak~;
#X text 175 1324 Peaking equalizer calculator for biquad.;
#X obj 30 1351 flt.dcblock2~;
#X text 175 1351 stereo DC blocker;
#X obj 30 1378 flt.dcblock~;
#X text 175 1378 mono DC blocker;
#X obj 30 1405 flt.eq_peak~;
#X text 175 1405 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1456 flt.highshelf~;
#X text 175 1456 gain boost|cut above some frequency;
#X obj 30 1483 flt.hpf12~;
#X text 175 1483 High-pass filter with 12/db per octave slope;
#X obj 30 1510 flt.hpf24~;
#X text 175 1510 High-pass filter with 24/db per octave slope;
#X obj 30 1537 flt.lowshelf~;
#X text 175 1537 gain boost|cut below some frequency;
#X obj 30 1564 flt.lpf12~;
#X text 175 1564 Low-pass filter with 12/db per octave slope;
#X obj 30 1591 flt.lpf24~;
#X text 175 1591 Low-pass filter with 24/db per octave slope;
#X obj 30 1618 flt.notch~;
#X text 175 1618 band-rejection filter;
#X obj 30 1645 flt.resonbp~;
#X text 175 1645 Simple resonant bandpass filter;
#X obj 20 1672 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1713 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1724 fx.distortion~;
#X text 175 1724 cubic nonlinearity distortion;
#X obj 30 1751 fx.flanger~;
#X text 175 1751 mono flanging effect;
#X obj 30 1778 fx.freeverb2~;
#X text 175 1778 freeverb2 - stereo version of freeverb;
#X obj 30 1805 fx.freeverb~;
#X text 175 1805 freeverb - common used open-source reverb;
#X obj 30 1832 fx.freqshift~;
#X text 175 1832 frequency shifter or single-sideband ring modulation;
#X obj 30 1859 fx.pitchshift~;
#X text 175 1859 simple pitch shifter based on 2 delay lines;
#X obj 30 1886 fx.zita_rev1~;
#X text 175 1886 Zita stereo reverb;
#X obj 20 1913 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 1954 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1965 global.float;
#X text 175 1965 global named float object;
#X obj 30 1992 global.int;
#X text 175 1992 global named integer object;
#X obj 30 2019 global.list;
#X text 175 2019 global named list object;
#X obj 20 2046 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2087 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2098 lfo.impulse~;
#X text 175 2098 Unit-amplitude low-frequency impulse train;
#X obj 30 2125 lfo.square~;
#X text 175 2125 Positive low frequence square wave;
#X obj 30 2152 lfo.tri~;
#X text 175 2152 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2179 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2220 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2231 list.all_of;
#X text 175 2231 checks if all list atoms accepted by predicate;
#X obj 30 2258 list.any_of;
#X text 175 2258 checks if at least one list element is accepted by
predicate;
#X obj 30 2295 list.apply_to;
#X text 175 2295 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2332 list.at;
#X text 175 2332 returns list element at given position;
#X obj 30 2359 list.choice;
#X text 175 2359 returns random element from list;
#X obj 30 2386 list.count;
#X text 175 2386 returns the number of items that equal to specified
value;
#X obj 30 2413 list.count_if;
#X text 175 2413 returns the number of items that satisfy to external
predicate.;
#X obj 30 2450 list.deinterleave;
#X text 175 2450 splits list to N lists \, each to separate output;
#X obj 30 2477 list.delta;
#X text 175 2477 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2514 list.each;
#X text 175 2514 maps each list value via external object(s);
#X obj 30 2541 list.equal;
#X text 175 2541 checks if given lists are equal;
#X obj 30 2568 list.first;
#X text 175 2568 returns first list element;
#X obj 30 2595 list.gen;
#X text 175 2595 generates list of specified length via external
generator;
#X obj 30 2622 list.integrator;
#X text 175 2622 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2659 list.interleave;
#X text 175 2659 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2710 list.last;
#X text 175 2710 returns last list element;
#X obj 30 2737 list.length;
#X text 175 2737 returns the number of atoms in the message;
#X obj 30 2764 list.max;
#X text 175 2764 returns largest element in the list;
#X obj 30 2791 list.mean;
#X text 175 2791 calculates average of list of floats;
#X obj 30 2818 list.min;
#X text 175 2818 returns smallest element in the list;
#X obj 30 2845 list.none_of;
#X text 175 2845 checks if none of list atoms is accepted by
predicate;
#X obj 30 2872 list.normalize;
#X text 175 2872 normalizes float list values to get their sum = 1.0;
#X obj 30 2899 list.product;
#X text 175 2899 calculates product of floats in list;
#X obj 30 2926 list.range;
#X text 175 2926 returns list smallest and largest value;
#X obj 30 2953 list.reduce;
#X text 175 2953 apply function of two arguments cumulatively to the
list;
#X obj 30 2980 list.remove_if;
#X text 175 2980 remove elements by predicate;
#X obj 30 3007 list.resize;
#X text 175 3007 changes list size with;
#X obj 30 3034 list.reverse;
#X text 175 3034 reverses the order of the elements in the list;
#X obj 30 3061 list.seq;
#X text 175 3061 numeric sequence list generator;
#X obj 30 3088 list.shuffle;
#X text 175 3088 randomly rearranges elements in list;
#X obj 30 3115 list.sort;
#X text 175 3115 sorts list values by ascending order;
#X obj 30 3142 list.sum;
#X text 175 3142 calculates sum of floats in list;
#X obj 30 3169 list.unpack;
#X text 175 3169 sends list element one by one separately;
#X obj 30 3196 list.unwrap;
#X text 175 3196 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3233 list.walk;
#X text 175 3233 Walks thru the list;
#X obj 30 3260 list.wrap;
#X text 175 3260 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3311 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3352 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3363 live.capture~;
#X text 175 3363 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3400 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3441 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3452 math.abs;
#X text 175 3452 absolute value function;
#X obj 30 3479 math.acos;
#X text 175 3479 arc cosine function;
#X obj 30 3506 math.acosh;
#X text 175 3506 inverse hyperbolic cosine function;
#X obj 30 3533 math.and;
#X text 175 3533 operation AND for multiple arguments;
#X obj 30 3560 math.approx;
#X text 175 3560 check if input value approximately equal to pattern;
#X obj 30 3587 math.asin;
#X text 175 3587 arc sine function;
#X obj 30 3614 math.asinh;
#X text 175 3614 inverse hyperbolic sine function;
#X obj 30 3641 math.atan;
#X text 175 3641 arc tangent function;
#X obj 30 3668 math.atanh;
#X text 175 3668 inverse hyperbolic tangent function;
#X obj 30 3695 math.cbrt;
#X text 175 3695 cube root function;
#X obj 30 3722 math.ceil;
#X text 175 3722 round to smallest integral value not less than input
value;
#X obj 30 3749 math.cos;
#X text 175 3749 cosine function;
#X obj 30 3776 math.cosh;
#X text 175 3776 hyperbolic cosine function;
#X obj 30 3803 math.e;
#X text 175 3803 mathematical constant \, base of the natural
logarithm;
#X obj 30 3830 math.exp;
#X text 175 3830 exponential functions;
#X obj 30 3857 math.exp2;
#X text 175 3857 exponential functions;
#X obj 30 3884 math.floor;
#X text 175 3884 round to largest integral value not greater than x;
#X obj 30 3911 math.inf;
#X text 175 3911 infinity value that cannot be represented accurately;
#X obj 30 3938 math.log;
#X text 175 3938 logarithm functions;
#X obj 30 3965 math.log10;
#X text 175 3965 logarithm functions;
#X obj 30 3992 math.log2;
#X text 175 3992 logarithm functions;
#X obj 30 4019 math.nan;
#X text 175 4019 Not a Number \, unrepresentable value;
#X obj 30 4046 math.neg;
#X text 175 4046 negate function;
#X obj 30 4073 math.pi;
#X text 175 4073 mathematical constant;
#X obj 30 4100 math.reciprocal;
#X text 175 4100 calculate reciprocal number;
#X obj 30 4127 math.round;
#X text 175 4127 round to integral value \, regardless of rounding
direction;
#X obj 30 4154 math.sign;
#X text 175 4154 sign function;
#X obj 30 4181 math.sin;
#X text 175 4181 sine function;
#X obj 30 4208 math.sinh;
#X text 175 4208 hyperbolic sine function;
#X obj 30 4235 math.sqrt;
#X text 175 4235 square root function;
#X obj 30 4262 math.squared;
#X text 175 4262 value square;
#X obj 30 4289 math.tan;
#X text 175 4289 tangent function;
#X obj 30 4316 math.tanh;
#X text 175 4316 hyperbolic tangent function;
#X obj 30 4343 math.trunc;
#X text 175 4343 truncate to integer value;
#X obj 20 4370 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4411 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4422 msg;
#X text 175 4422 message constructor;
#X obj 20 4449 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4490 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4501 noise.pink~;
#X text 175 4501 Pink noise generator;
#X obj 30 4528 noise.white~;
#X text 175 4528 White noise generator;
#X obj 20 4555 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4596 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4607 osc.impulse~;
#X text 175 4607 Bandlimited impulse train generator;
#X obj 30 4634 osc.pulse~;
#X text 175 4634 Bandlimited pulse train oscillator.;
#X obj 30 4661 osc.saw~;
#X text 175 4661 Bandlimited saw wave oscillator;
#X obj 30 4688 osc.sinfb~;
#X text 175 4688 sine oscilator with feedback;
#X obj 30 4715 osc.square~;
#X text 175 4715 Bandlimited square wave oscillator;
#X obj 30 4742 osc.tri~;
#X text 175 4742 Bandlimited triangle wave oscillator;
#X obj 20 4769 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4810 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4821 pass.changed;
#X text 175 4821 rejects redundant input values;
#X obj 30 4848 pass.if;
#X text 175 4848 pass values that accepted by predicate object;
#X obj 30 4875 pass.this;
#X text 175 4875 pass only specified values;
#X obj 20 4902 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 4943 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4954 path.basename;
#X text 175 4954 outputs filename portion of pathname;
#X obj 30 4981 path.dirname;
#X text 175 4981 outputs directory portion of pathname;
#X obj 20 5008 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5049 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5060 is_any;
#X text 175 5060 checks if input data has *any* type;
#X obj 30 5087 is_bang;
#X text 175 5087 checks if input data has *bang* type;
#X obj 30 5114 is_even;
#X text 175 5114 checks if input number is even;
#X obj 30 5141 is_float;
#X text 175 5141 checks if input data has *float* type;
#X obj 30 5168 is_list;
#X text 175 5168 checks if input data has *list* type;
#X obj 30 5195 is_odd;
#X text 175 5195 checks if input number is odd;
#X obj 30 5222 is_pointer;
#X text 175 5222 checks if input data has *pointer* type;
#X obj 30 5249 is_symbol;
#X text 175 5249 checks if input data has *symbol* type;
#X obj 20 5276 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5317 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5328 prop.get;
#X text 175 5328 Property extractor;
#X obj 30 5355 prop.set;
#X text 175 5355 Property injector;
#X obj 20 5382 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5423 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5434 random.int;
#X text 175 5434 Random integer generator in specified range;
#X obj 20 5461 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5502 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5513 reject.if;
#X text 175 5513 reject values by predicate;
#X obj 30 5540 reject.this;
#X text 175 5540 reject only specified values;
#X obj 20 5567 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5608 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5619 snd.file;
#X text 175 5619 Sound file loader on steroids;
#X obj 20 5646 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5687 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5698 symbol.equal;
#X text 175 5698 check symbols for equality;
#X obj 30 5725 symbol.length;
#X text 175 5725 number of characters in symbol (unicode supported);
#X obj 20 5752 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 5793 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5804 system.getenv;
#X text 175 5804 Get system environment variables;
#X obj 30 5831 system.hostname;
#X text 175 5831 outputs system hostname;
#X obj 30 5858 system.memsize;
#X text 175 5858 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 5895 system.memused;
#X text 175 5895 returns the process physical memory use - current and
peak;
#X obj 30 5922 system.screen_size;
#X text 175 5922 returns current screen size in pixels;
#X obj 20 5949 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 5990 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6004 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6001 A bang... that's all;
#X obj 30 6027 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6024 Breakpoint function GUI object;
#X obj 30 6050 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6047 Display GUI object;
#X obj 30 6073 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6070 keyboard widget;
#X obj 30 6096 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6093 knob widget;
#X obj 30 6119 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6116 The matrix of toggles has you.;
#X obj 30 6142 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6139 Scope GUI object;
#X obj 30 6165 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6162 2D slider widget;
#X obj 30 6188 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6185 Multiple slider widget;
#X obj 30 6211 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6208 Spectroscope GUI object;
#X obj 30 6234 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6231 modern toggle widget;
#X obj 20 6254 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6295 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6306 vector.distance;
#X text 175 6306 returns euclidean distance between two points;
#X obj 30 6333 vector.dot;
#X text 175 6333 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6384 vector.length;
#X text 175 6384 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6421 vector.normalize;
#X text 175 6421 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6448 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6448 version: v0.2 \, license: GPL3;
#X obj 20 6467 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;