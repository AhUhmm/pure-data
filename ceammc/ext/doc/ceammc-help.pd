#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.bpm;
#X text 175 153 BPM calculator;
#X obj 30 180 array.copy;
#X text 175 180 copy samples from one array to another;
#X obj 30 207 array.do;
#X text 175 207 iterate and modify array content via side-chain;
#X obj 30 234 array.each;
#X text 175 234 process each array elements via side-chain;
#X obj 30 261 array.fill;
#X text 175 261 fill array with single value or pattern;
#X obj 30 288 array.minmax;
#X text 175 288 find array min and max element value;
#X obj 30 315 array.set;
#X text 175 315 set array content from list;
#X obj 30 342 array.stretch;
#X text 175 342 array time-stretch \, pitch-shift or rate-change;
#X obj 20 369 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 410 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 424 ui.link @title [function] @url function-help.pd;
#X text 175 421 named function;
#X obj 30 444 function.call;
#X text 175 444 call named function;
#X obj 20 471 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 512 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 523 array.p2s;
#X text 175 523 convert array phase [0\..1] to sample position;
#X obj 30 550 array.s2p;
#X text 175 550 convert array sample position to relative phase
position [0\..1];
#X obj 30 587 conv.bpm2hz;
#X text 175 587 converts BPM to frequency in herz;
#X obj 30 614 conv.bpm2ms;
#X text 175 614 convert frequency in BPM to period in milliseconds;
#X obj 30 641 conv.bpm2sec;
#X text 175 641 convert frequency in BPM to period in seconds;
#X obj 30 668 conv.cc2amp;
#X text 175 668 convert from MIDI Control Change range;
#X obj 30 695 conv.lin2curve;
#X text 175 695 map linear to exponential range with 0 allowed.;
#X obj 30 722 conv.lin2exp;
#X text 175 722 maps linear range to exponential range;
#X obj 30 749 conv.lin2lin;
#X text 175 749 convert from one linear range to another;
#X obj 30 776 conv.pitch2midi;
#X text 175 776 converts symbol pitch name to MIDI note number;
#X obj 30 803 conv.samp2sec;
#X text 175 803 convert samples to time according to samplerate;
#X obj 30 830 conv.sec2samp;
#X text 175 830 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 867 conv.sec2str;
#X text 175 867 converts float time in seconds to formated symbol (or
string);
#X obj 30 904 conv.str2sec;
#X text 175 904 converts formatted time to float value in seconds;
#X obj 20 931 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 972 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 983 data.fifo;
#X text 175 983 First-In-First-Out (FIFO) queue data container;
#X obj 30 1010 data.list;
#X text 175 1010 list container;
#X obj 30 1037 data.set;
#X text 175 1037 container that store unique elements;
#X obj 30 1064 data.set2list;
#X text 175 1064 converts set to list;
#X obj 30 1091 set.contains;
#X text 175 1091 check if specified element is in set;
#X obj 30 1118 set.diff;
#X text 175 1118 difference between two sets;
#X obj 30 1145 set.equal;
#X text 175 1145 checks if two sets are equal (contains same
elements);
#X obj 30 1172 set.intersect;
#X text 175 1172 output intersection of given sets;
#X obj 30 1199 set.size;
#X text 175 1199 get number of elements in set;
#X obj 30 1226 set.symdiff;
#X text 175 1226 symmetric difference between two sets;
#X obj 30 1253 set.union;
#X text 175 1253 output union of given sets;
#X obj 20 1280 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 1321 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1332 dyn.comp2~;
#X text 175 1332 stereo dynamic range compressor;
#X obj 30 1359 dyn.comp~;
#X text 175 1359 mono dynamic range compressors;
#X obj 30 1386 dyn.gate2~;
#X text 175 1386 stereo signal gate;
#X obj 30 1413 dyn.gate~;
#X text 175 1413 mono signal gate;
#X obj 30 1440 dyn.limit2~;
#X text 175 1440 stereo 1176LN Peak Limiter;
#X obj 30 1467 dyn.limit~;
#X text 175 1467 mono 1176LN Peak Limiter;
#X obj 30 1494 dyn.softclip~;
#X text 175 1494 soft signal clip;
#X obj 20 1521 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1562 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1573 env.adsr~;
#X text 175 1573 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1600 env.ar~;
#X text 175 1600 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1637 env.follow~;
#X text 175 1637 Envelope follower with independent attack and release
times.;
#X obj 20 1674 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1715 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1726 expand_env;
#X text 175 1726 Substitute enviroment variables in data stream;
#X obj 30 1753 flow.change;
#X text 175 1753 rejects redundant input values;
#X obj 30 1780 flow.group;
#X text 175 1780 group data atoms in list of specified size;
#X obj 30 1807 flow.pass;
#X text 175 1807 pass specified values;
#X obj 30 1834 flow.pass_if;
#X text 175 1834 pass values that accepted by predicate object;
#X obj 30 1861 flow.reject;
#X text 175 1861 reject specified values;
#X obj 30 1888 flow.reject_if;
#X text 175 1888 reject values by predicate;
#X obj 30 1915 flow.split;
#X text 175 1915 split data flow by external side-chain predicate;
#X obj 30 1942 flow.sync;
#X text 175 1942 bus with only hot inlets;
#X obj 30 1969 flow.tee~;
#X text 175 1969 separate audio and control streams;
#X obj 30 1996 replace;
#X text 175 1996 Replace atoms in data stream;
#X obj 20 2023 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 2064 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2075 flt.biquad~;
#X text 175 2075 second order IIR filter.;
#X obj 30 2102 flt.bpf12~;
#X text 175 2102 Band-pass filter with 12/db per octave slope;
#X obj 30 2129 flt.bpf24~;
#X text 175 2129 Band-pass filter with 24/db per octave slope;
#X obj 30 2156 flt.c_bpf~;
#X text 175 2156 BPF coefficent calculator for biquad filter;
#X obj 30 2183 flt.c_highshelf~;
#X text 175 2183 Highshelf filter coefficent calculator for biquad;
#X obj 30 2210 flt.c_hpf~;
#X text 175 2210 HPF coefficent calculator for biquad filter;
#X obj 30 2237 flt.c_lowshelf~;
#X text 175 2237 Lowshelf filter coefficent calculator for biquad;
#X obj 30 2264 flt.c_lpf~;
#X text 175 2264 LPF coefficent calculator for biquad filter;
#X obj 30 2291 flt.c_notch~;
#X text 175 2291 Band-reject coefficent calculator for biquad filter;
#X obj 30 2318 flt.c_peak~;
#X text 175 2318 Peaking equalizer calculator for biquad.;
#X obj 30 2345 flt.dcblock2~;
#X text 175 2345 stereo DC blocker;
#X obj 30 2372 flt.dcblock~;
#X text 175 2372 mono DC blocker;
#X obj 30 2399 flt.eq_peak~;
#X text 175 2399 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 2450 flt.highshelf~;
#X text 175 2450 gain boost|cut above some frequency;
#X obj 30 2477 flt.hpf12~;
#X text 175 2477 High-pass filter with 12/db per octave slope;
#X obj 30 2504 flt.hpf24~;
#X text 175 2504 High-pass filter with 24/db per octave slope;
#X obj 30 2531 flt.lowshelf~;
#X text 175 2531 gain boost|cut below some frequency;
#X obj 30 2558 flt.lpf12~;
#X text 175 2558 Low-pass filter with 12/db per octave slope;
#X obj 30 2585 flt.lpf24~;
#X text 175 2585 Low-pass filter with 24/db per octave slope;
#X obj 30 2612 flt.notch~;
#X text 175 2612 band-rejection filter;
#X obj 30 2639 flt.resonbp~;
#X text 175 2639 Simple resonant bandpass filter;
#X obj 20 2666 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2707 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2718 fx.distortion~;
#X text 175 2718 cubic nonlinearity distortion;
#X obj 30 2745 fx.flanger~;
#X text 175 2745 mono flanging effect;
#X obj 30 2772 fx.freeverb2~;
#X text 175 2772 freeverb2 - stereo version of freeverb;
#X obj 30 2799 fx.freeverb~;
#X text 175 2799 freeverb - common used open-source reverb;
#X obj 30 2826 fx.freqshift~;
#X text 175 2826 frequency shifter or single-sideband ring modulation;
#X obj 30 2853 fx.pitchshift~;
#X text 175 2853 simple pitch shifter based on 2 delay lines;
#X obj 30 2880 fx.zita_rev1~;
#X text 175 2880 Zita stereo reverb;
#X obj 20 2907 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2948 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2959 global.float;
#X text 175 2959 global named float object;
#X obj 30 2986 global.int;
#X text 175 2986 global named integer object;
#X obj 30 3013 global.list;
#X text 175 3013 global named list object;
#X obj 20 3040 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 3081 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3092 lfo.impulse~;
#X text 175 3092 Unit-amplitude low-frequency impulse train;
#X obj 30 3119 lfo.square~;
#X text 175 3119 Positive low frequence square wave;
#X obj 30 3146 lfo.tri~;
#X text 175 3146 Positive unit-amplitude low frequency triangle wave;
#X obj 20 3173 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 3214 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3225 list.all_of;
#X text 175 3225 checks if all list atoms accepted by predicate;
#X obj 30 3252 list.any_of;
#X text 175 3252 checks if at least one list element is accepted by
predicate;
#X obj 30 3289 list.apply_to;
#X text 175 3289 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 3326 list.at;
#X text 175 3326 returns list element(s) at given position(s);
#X obj 30 3353 list.choice;
#X text 175 3353 returns random element from list;
#X obj 30 3380 list.count;
#X text 175 3380 returns the number of items that equal to specified
value;
#X obj 30 3407 list.count_if;
#X text 175 3407 returns the number of items that satisfy to external
predicate.;
#X obj 30 3444 list.deinterleave;
#X text 175 3444 splits list to N lists \, each to separate output;
#X obj 30 3471 list.delta;
#X text 175 3471 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3508 list.distribution;
#X text 175 3508 list value distribution;
#X obj 30 3535 list.each;
#X text 175 3535 maps each list value via external object(s);
#X obj 30 3562 list.enumerate;
#X text 175 3562 enumerates input list;
#X obj 30 3589 list.equal;
#X text 175 3589 checks if given lists are equal;
#X obj 30 3616 list.first;
#X text 175 3616 returns first list element;
#X obj 30 3643 list.gen;
#X text 175 3643 generates list of specified length via external
generator;
#X obj 30 3670 list.histogram;
#X text 175 3670 outputs distibution histogram;
#X obj 30 3697 list.integrator;
#X text 175 3697 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3734 list.interleave;
#X text 175 3734 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3785 list.last;
#X text 175 3785 returns last list element;
#X obj 30 3812 list.length;
#X text 175 3812 returns the number of atoms in the message;
#X obj 30 3839 list.max;
#X text 175 3839 returns largest element in the list;
#X obj 30 3866 list.mean;
#X text 175 3866 calculates average of list of floats;
#X obj 30 3893 list.min;
#X text 175 3893 returns smallest element in the list;
#X obj 30 3920 list.none_of;
#X text 175 3920 checks if none of list atoms is accepted by
predicate;
#X obj 30 3947 list.normalize;
#X text 175 3947 normalizes float list values to get their sum = 1.0;
#X obj 30 3974 list.pass_if;
#X text 175 3974 leave only elements accepted by predicate;
#X obj 30 4001 list.product;
#X text 175 4001 calculates product of floats in list;
#X obj 30 4028 list.range;
#X text 175 4028 returns list smallest and largest value;
#X obj 30 4055 list.reduce;
#X text 175 4055 apply function of two arguments cumulatively to the
list;
#X obj 30 4082 list.remove_if;
#X text 175 4082 remove elements by predicate;
#X obj 30 4109 list.repack;
#X text 175 4109 repack input list to specified size;
#X obj 30 4136 list.repeat;
#X text 175 4136 creates new list by repeating given list specified
times;
#X obj 30 4163 list.resize;
#X text 175 4163 changes list size;
#X obj 30 4190 list.reverse;
#X text 175 4190 reverses the order of the elements in the list;
#X obj 30 4217 list.rotate;
#X text 175 4217 rotates list left;
#X obj 30 4244 list.separate;
#X text 175 4244 sends list elements one by one separately;
#X obj 30 4271 list.seq;
#X text 175 4271 numeric sequence list generator;
#X obj 30 4298 list.shuffle;
#X text 175 4298 randomly rearranges elements in list;
#X obj 30 4325 list.slice;
#X text 175 4325 extract sublist;
#X obj 30 4352 list.sort;
#X text 175 4352 sorts list values by ascending order;
#X obj 30 4379 list.sort_with;
#X text 175 4379 sort list with user defined side-chain;
#X obj 30 4406 list.sum;
#X text 175 4406 calculates sum of floats in list;
#X obj 30 4433 list.unique;
#X text 175 4433 sorts and removes duplicates from input list;
#X obj 30 4460 list.unpack;
#X text 175 4460 unpack list elements to separate outlets;
#X obj 30 4487 list.unwrap;
#X text 175 4487 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 4524 list.walk;
#X text 175 4524 Walks thru the list;
#X obj 30 4551 list.wrap;
#X text 175 4551 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 4602 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 4643 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4654 live.capture~;
#X text 175 4654 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 4691 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 4732 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4743 local.float;
#X text 175 4743 canvas-scoped named float variable;
#X obj 30 4770 local.int;
#X text 175 4770 canvas-scoped named integer variable;
#X obj 20 4797 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 4838 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4849 math.abs;
#X text 175 4849 absolute value function;
#X obj 30 4876 math.acos;
#X text 175 4876 arc cosine function;
#X obj 30 4903 math.acosh;
#X text 175 4903 inverse hyperbolic cosine function;
#X obj 30 4930 math.and;
#X text 175 4930 operation AND for multiple arguments;
#X obj 30 4957 math.approx;
#X text 175 4957 check if input value approximately equal to pattern;
#X obj 30 4984 math.asin;
#X text 175 4984 arc sine function;
#X obj 30 5011 math.asinh;
#X text 175 5011 inverse hyperbolic sine function;
#X obj 30 5038 math.atan;
#X text 175 5038 arc tangent function;
#X obj 30 5065 math.atanh;
#X text 175 5065 inverse hyperbolic tangent function;
#X obj 30 5092 math.cbrt;
#X text 175 5092 cube root function;
#X obj 30 5119 math.ceil;
#X text 175 5119 round to smallest integral value not less than input
value;
#X obj 30 5146 math.cos;
#X text 175 5146 cosine function;
#X obj 30 5173 math.cosh;
#X text 175 5173 hyperbolic cosine function;
#X obj 30 5200 math.e;
#X text 175 5200 mathematical constant \, base of the natural
logarithm;
#X obj 30 5227 math.exp;
#X text 175 5227 exponential functions;
#X obj 30 5254 math.exp2;
#X text 175 5254 exponential functions;
#X obj 30 5281 math.floor;
#X text 175 5281 round to largest integral value not greater than x;
#X obj 30 5308 math.gcd;
#X text 175 5308 calculate greatest common divisor;
#X obj 30 5335 math.inf;
#X text 175 5335 infinity value that cannot be represented accurately;
#X obj 30 5362 math.lcm;
#X text 175 5362 calculate least common multiple;
#X obj 30 5389 math.log;
#X text 175 5389 logarithm functions;
#X obj 30 5416 math.log10;
#X text 175 5416 logarithm functions;
#X obj 30 5443 math.log2;
#X text 175 5443 logarithm functions;
#X obj 30 5470 math.nan;
#X text 175 5470 Not a Number \, unrepresentable value;
#X obj 30 5497 math.neg;
#X text 175 5497 negate function;
#X obj 30 5524 math.or;
#X text 175 5524 operation OR for multiple arguments;
#X obj 30 5551 math.pi;
#X text 175 5551 mathematical constant;
#X obj 30 5578 math.reciprocal;
#X text 175 5578 calculate reciprocal number;
#X obj 30 5605 math.round;
#X text 175 5605 round to integral value \, regardless of rounding
direction;
#X obj 30 5632 math.round~;
#X text 175 5632 signal round;
#X obj 30 5659 math.sign;
#X text 175 5659 sign function;
#X obj 30 5686 math.sin;
#X text 175 5686 sine function;
#X obj 30 5713 math.sinh;
#X text 175 5713 hyperbolic sine function;
#X obj 30 5740 math.sqrt;
#X text 175 5740 square root function;
#X obj 30 5767 math.squared;
#X text 175 5767 value square;
#X obj 30 5794 math.tan;
#X text 175 5794 tangent function;
#X obj 30 5821 math.tanh;
#X text 175 5821 hyperbolic tangent function;
#X obj 30 5848 math.trunc;
#X text 175 5848 truncate to integer value;
#X obj 20 5875 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 5916 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5927 modplug~;
#X text 175 5927 MOD file player (using libmodplug);
#X obj 20 5954 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 5995 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6006 msg;
#X text 175 6006 message constructor;
#X obj 20 6033 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 6074 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6085 noise.pink~;
#X text 175 6085 Pink noise generator;
#X obj 30 6112 noise.white~;
#X text 175 6112 White noise generator;
#X obj 20 6139 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 6180 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6191 osc.impulse~;
#X text 175 6191 Bandlimited impulse train generator;
#X obj 30 6218 osc.pulse~;
#X text 175 6218 Bandlimited pulse train oscillator.;
#X obj 30 6245 osc.saw~;
#X text 175 6245 Bandlimited saw wave oscillator;
#X obj 30 6272 osc.sinfb~;
#X text 175 6272 sine oscilator with feedback;
#X obj 30 6299 osc.square~;
#X text 175 6299 Bandlimited square wave oscillator;
#X obj 30 6326 osc.tri~;
#X text 175 6326 Bandlimited triangle wave oscillator;
#X obj 20 6353 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 6394 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6405 path.basename;
#X text 175 6405 outputs filename portion of pathname;
#X obj 30 6432 path.dirname;
#X text 175 6432 outputs directory portion of pathname;
#X obj 30 6459 path.exists;
#X text 175 6459 checks if given path exists;
#X obj 30 6486 path.lsdir;
#X text 175 6486 list directory contents;
#X obj 20 6513 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 6554 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6565 is_any;
#X text 175 6565 checks if input data has *any* type;
#X obj 30 6592 is_bang;
#X text 175 6592 checks if input data has *bang* type;
#X obj 30 6619 is_even;
#X text 175 6619 checks if input number is even;
#X obj 30 6646 is_file;
#X text 175 6646 checks if file exists and accessible;
#X obj 30 6673 is_float;
#X text 175 6673 checks if input data has *float* type;
#X obj 30 6700 is_list;
#X text 175 6700 checks if input data has *list* type;
#X obj 30 6727 is_odd;
#X text 175 6727 checks if input number is odd;
#X obj 30 6754 is_pointer;
#X text 175 6754 checks if input data has *pointer* type;
#X obj 30 6781 is_symbol;
#X text 175 6781 checks if input data has *symbol* type;
#X obj 20 6808 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 6849 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6860 prop.get;
#X text 175 6860 Property extractor;
#X obj 30 6887 prop.set;
#X text 175 6887 Property injector;
#X obj 20 6914 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 6955 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6966 random.discrete;
#X text 175 6966 random weighted integers on interval [0 \, n);
#X obj 30 6993 random.float;
#X text 175 6993 random float generator in specified range;
#X obj 30 7020 random.gauss;
#X text 175 7020 gaussian random distribution;
#X obj 30 7047 random.int;
#X text 175 7047 Random integer generator in specified range;
#X obj 30 7074 random.linear;
#X text 175 7074 random linear distribution;
#X obj 30 7101 random.pw_const;
#X text 175 7101 piecewise constant random distribution;
#X obj 30 7128 random.pw_lin;
#X text 175 7128 piecewise linear random distribution;
#X obj 20 7155 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 7196 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7207 snd.file;
#X text 175 7207 Sound file loader on steroids;
#X obj 20 7234 cnv 5 68 31 empty empty string 4 13 0 17 -262144 -49933
0;
#X obj 20 7275 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7286 string;
#X text 175 7286 string constructor;
#X obj 30 7313 string.contains;
#X text 175 7313 checks if given string contains specified substring;
#X obj 30 7340 string.ends_with;
#X text 175 7340 checks if given string ends with specified suffix;
#X obj 30 7367 string.equal;
#X text 175 7367 check strings for equality;
#X obj 30 7394 string.format;
#X text 175 7394 formats string like printf.;
#X obj 30 7421 string.join;
#X text 175 7421 joins (concatenates) strings with separator;
#X obj 30 7448 string.length;
#X text 175 7448 number of characters in string (unicode supported);
#X obj 30 7475 string.remove;
#X text 175 7475 remove substring from input string;
#X obj 30 7502 string.replace;
#X text 175 7502 replace from one substring to another in input
string;
#X obj 30 7529 string.split;
#X text 175 7529 split string by separator;
#X obj 30 7556 string.starts_with;
#X text 175 7556 checks if given string starts with specified prefix;
#X obj 30 7583 string.substr;
#X text 175 7583 extract substring from input string;
#X obj 30 7610 string2symbol;
#X text 175 7610 converts string to symbol;
#X obj 20 7637 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 7678 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7689 symbol.equal;
#X text 175 7689 check symbols for equality;
#X obj 30 7716 symbol.length;
#X text 175 7716 number of characters in symbol (unicode supported);
#X obj 20 7743 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 7784 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7795 system.getenv;
#X text 175 7795 Get system environment variables;
#X obj 30 7822 system.hostname;
#X text 175 7822 outputs system hostname;
#X obj 30 7849 system.memsize;
#X text 175 7849 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 7886 system.memused;
#X text 175 7886 returns the process physical memory use - current and
peak;
#X obj 30 7913 system.screen_size;
#X text 175 7913 returns current screen size in pixels;
#X obj 20 7940 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 7981 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7995 ui.link @title [tl.bang] @url tl.bang-help.pd;
#X text 175 7992 Timeline bang;
#X obj 30 8018 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 175 8015 Timeline section;
#X obj 30 8038 tl.transport;
#X text 175 8038 Timeline transport control;
#X obj 30 8068 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 8065 A bang... that's all;
#X obj 30 8091 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 8088 Breakpoint function GUI object;
#X obj 30 8114 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 8111 Display GUI object;
#X obj 30 8137 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 8134 keyboard widget;
#X obj 30 8160 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 8157 knob widget;
#X obj 30 8183 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 8180 The matrix of toggles has you.;
#X obj 30 8206 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 8203 Scope GUI object;
#X obj 30 8229 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 8226 2D slider widget;
#X obj 30 8252 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 8249 Multiple slider widget;
#X obj 30 8275 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 8272 Spectroscope GUI object;
#X obj 30 8298 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 8295 modern toggle widget;
#X obj 20 8318 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 8359 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8370 vector.distance;
#X text 175 8370 returns euclidean distance between two points;
#X obj 30 8397 vector.dot;
#X text 175 8397 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 8448 vector.length;
#X text 175 8448 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 8485 vector.normalize;
#X text 175 8485 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 8512 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 8512 version: v0.3 \, license: GPL3;
#X obj 20 8531 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;