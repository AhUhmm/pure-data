#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.each;
#X text 175 153 process each array elements via side-chain;
#X obj 30 180 array.minmax;
#X text 175 180 find array min and max element value;
#X obj 20 207 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 248 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 259 array.p2s;
#X text 175 259 convert array phase [0\..1] to sample position;
#X obj 30 286 array.s2p;
#X text 175 286 convert array sample position to relative phase
position [0\..1];
#X obj 30 323 conv.bpm2hz;
#X text 175 323 converts BPM to frequency in herz;
#X obj 30 350 conv.bpm2ms;
#X text 175 350 convert frequency in BPM to period in milliseconds;
#X obj 30 377 conv.bpm2sec;
#X text 175 377 convert frequency in BPM to period in seconds;
#X obj 30 404 conv.lin2curve;
#X text 175 404 map linear to exponential range with 0 allowed.;
#X obj 30 431 conv.lin2exp;
#X text 175 431 maps linear range to exponential range;
#X obj 30 458 conv.lin2lin;
#X text 175 458 convert from one linear range to another;
#X obj 30 485 conv.sec2str;
#X text 175 485 converts float time in seconds to formated symbol;
#X obj 30 512 conv.str2sec;
#X text 175 512 converts formatted time to float value in seconds;
#X obj 20 539 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 580 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 591 data.fifo;
#X text 175 591 First-In-First-Out (FIFO) queue data container;
#X obj 30 618 data.list;
#X text 175 618 list container;
#X obj 20 645 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 686 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 697 dyn.comp2~;
#X text 175 697 stereo dynamic range compressor;
#X obj 30 724 dyn.comp~;
#X text 175 724 mono dynamic range compressors;
#X obj 30 751 dyn.gate2~;
#X text 175 751 stereo signal gate;
#X obj 30 778 dyn.gate~;
#X text 175 778 mono signal gate;
#X obj 30 805 dyn.limit2~;
#X text 175 805 stereo 1176LN Peak Limiter;
#X obj 30 832 dyn.limit~;
#X text 175 832 mono 1176LN Peak Limiter;
#X obj 30 859 dyn.softclip~;
#X text 175 859 soft signal clip;
#X obj 20 886 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 927 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 938 env.adsr~;
#X text 175 938 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 965 env.ar~;
#X text 175 965 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1002 env.follow~;
#X text 175 1002 Envelope follower with independent attack and release
times.;
#X obj 20 1039 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1080 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1091 expand_env;
#X text 175 1091 Substitute enviroment variables in data stream;
#X obj 30 1118 flow.sync;
#X text 175 1118 bus with only hot inlets;
#X obj 30 1145 replace;
#X text 175 1145 Replace atoms in data stream;
#X obj 20 1172 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1213 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1224 flt.biquad~;
#X text 175 1224 second order IIR filter.;
#X obj 30 1251 flt.bpf12~;
#X text 175 1251 Band-pass filter with 12/db per octave slope;
#X obj 30 1278 flt.bpf24~;
#X text 175 1278 Band-pass filter with 24/db per octave slope;
#X obj 30 1305 flt.c_bpf~;
#X text 175 1305 BPF coefficent calculator for biquad filter;
#X obj 30 1332 flt.c_highshelf~;
#X text 175 1332 Highshelf filter coefficent calculator for biquad;
#X obj 30 1359 flt.c_hpf~;
#X text 175 1359 HPF coefficent calculator for biquad filter;
#X obj 30 1386 flt.c_lowshelf~;
#X text 175 1386 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1413 flt.c_lpf~;
#X text 175 1413 LPF coefficent calculator for biquad filter;
#X obj 30 1440 flt.c_notch~;
#X text 175 1440 Band-reject coefficent calculator for biquad filter;
#X obj 30 1467 flt.c_peak~;
#X text 175 1467 Peaking equalizer calculator for biquad.;
#X obj 30 1494 flt.dcblock2~;
#X text 175 1494 stereo DC blocker;
#X obj 30 1521 flt.dcblock~;
#X text 175 1521 mono DC blocker;
#X obj 30 1548 flt.eq_peak~;
#X text 175 1548 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1599 flt.highshelf~;
#X text 175 1599 gain boost|cut above some frequency;
#X obj 30 1626 flt.hpf12~;
#X text 175 1626 High-pass filter with 12/db per octave slope;
#X obj 30 1653 flt.hpf24~;
#X text 175 1653 High-pass filter with 24/db per octave slope;
#X obj 30 1680 flt.lowshelf~;
#X text 175 1680 gain boost|cut below some frequency;
#X obj 30 1707 flt.lpf12~;
#X text 175 1707 Low-pass filter with 12/db per octave slope;
#X obj 30 1734 flt.lpf24~;
#X text 175 1734 Low-pass filter with 24/db per octave slope;
#X obj 30 1761 flt.notch~;
#X text 175 1761 band-rejection filter;
#X obj 30 1788 flt.resonbp~;
#X text 175 1788 Simple resonant bandpass filter;
#X obj 20 1815 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1856 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1867 fx.distortion~;
#X text 175 1867 cubic nonlinearity distortion;
#X obj 30 1894 fx.flanger~;
#X text 175 1894 mono flanging effect;
#X obj 30 1921 fx.freeverb2~;
#X text 175 1921 freeverb2 - stereo version of freeverb;
#X obj 30 1948 fx.freeverb~;
#X text 175 1948 freeverb - common used open-source reverb;
#X obj 30 1975 fx.freqshift~;
#X text 175 1975 frequency shifter or single-sideband ring modulation;
#X obj 30 2002 fx.pitchshift~;
#X text 175 2002 simple pitch shifter based on 2 delay lines;
#X obj 30 2029 fx.zita_rev1~;
#X text 175 2029 Zita stereo reverb;
#X obj 20 2056 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2097 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2108 global.float;
#X text 175 2108 global named float object;
#X obj 30 2135 global.int;
#X text 175 2135 global named integer object;
#X obj 30 2162 global.list;
#X text 175 2162 global named list object;
#X obj 20 2189 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2230 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2241 lfo.impulse~;
#X text 175 2241 Unit-amplitude low-frequency impulse train;
#X obj 30 2268 lfo.square~;
#X text 175 2268 Positive low frequence square wave;
#X obj 30 2295 lfo.tri~;
#X text 175 2295 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2322 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2363 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2374 list.all_of;
#X text 175 2374 checks if all list atoms accepted by predicate;
#X obj 30 2401 list.any_of;
#X text 175 2401 checks if at least one list element is accepted by
predicate;
#X obj 30 2438 list.apply_to;
#X text 175 2438 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2475 list.at;
#X text 175 2475 returns list element at given position;
#X obj 30 2502 list.choice;
#X text 175 2502 returns random element from list;
#X obj 30 2529 list.count;
#X text 175 2529 returns the number of items that equal to specified
value;
#X obj 30 2556 list.count_if;
#X text 175 2556 returns the number of items that satisfy to external
predicate.;
#X obj 30 2593 list.deinterleave;
#X text 175 2593 splits list to N lists \, each to separate output;
#X obj 30 2620 list.delta;
#X text 175 2620 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2657 list.each;
#X text 175 2657 maps each list value via external object(s);
#X obj 30 2684 list.equal;
#X text 175 2684 checks if given lists are equal;
#X obj 30 2711 list.first;
#X text 175 2711 returns first list element;
#X obj 30 2738 list.gen;
#X text 175 2738 generates list of specified length via external
generator;
#X obj 30 2765 list.integrator;
#X text 175 2765 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2802 list.interleave;
#X text 175 2802 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2853 list.last;
#X text 175 2853 returns last list element;
#X obj 30 2880 list.length;
#X text 175 2880 returns the number of atoms in the message;
#X obj 30 2907 list.max;
#X text 175 2907 returns largest element in the list;
#X obj 30 2934 list.mean;
#X text 175 2934 calculates average of list of floats;
#X obj 30 2961 list.min;
#X text 175 2961 returns smallest element in the list;
#X obj 30 2988 list.none_of;
#X text 175 2988 checks if none of list atoms is accepted by
predicate;
#X obj 30 3015 list.normalize;
#X text 175 3015 normalizes float list values to get their sum = 1.0;
#X obj 30 3042 list.product;
#X text 175 3042 calculates product of floats in list;
#X obj 30 3069 list.range;
#X text 175 3069 returns list smallest and largest value;
#X obj 30 3096 list.reduce;
#X text 175 3096 apply function of two arguments cumulatively to the
list;
#X obj 30 3123 list.remove_if;
#X text 175 3123 remove elements by predicate;
#X obj 30 3150 list.resize;
#X text 175 3150 changes list size with;
#X obj 30 3177 list.reverse;
#X text 175 3177 reverses the order of the elements in the list;
#X obj 30 3204 list.seq;
#X text 175 3204 numeric sequence list generator;
#X obj 30 3231 list.shuffle;
#X text 175 3231 randomly rearranges elements in list;
#X obj 30 3258 list.sort;
#X text 175 3258 sorts list values by ascending order;
#X obj 30 3285 list.sum;
#X text 175 3285 calculates sum of floats in list;
#X obj 30 3312 list.unpack;
#X text 175 3312 sends list element one by one separately;
#X obj 30 3339 list.unwrap;
#X text 175 3339 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3376 list.walk;
#X text 175 3376 Walks thru the list;
#X obj 30 3403 list.wrap;
#X text 175 3403 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3454 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3495 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3506 live.capture~;
#X text 175 3506 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3543 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3584 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3595 math.abs;
#X text 175 3595 absolute value function;
#X obj 30 3622 math.acos;
#X text 175 3622 arc cosine function;
#X obj 30 3649 math.acosh;
#X text 175 3649 inverse hyperbolic cosine function;
#X obj 30 3676 math.and;
#X text 175 3676 operation AND for multiple arguments;
#X obj 30 3703 math.approx;
#X text 175 3703 check if input value approximately equal to pattern;
#X obj 30 3730 math.asin;
#X text 175 3730 arc sine function;
#X obj 30 3757 math.asinh;
#X text 175 3757 inverse hyperbolic sine function;
#X obj 30 3784 math.atan;
#X text 175 3784 arc tangent function;
#X obj 30 3811 math.atanh;
#X text 175 3811 inverse hyperbolic tangent function;
#X obj 30 3838 math.cbrt;
#X text 175 3838 cube root function;
#X obj 30 3865 math.ceil;
#X text 175 3865 round to smallest integral value not less than input
value;
#X obj 30 3892 math.cos;
#X text 175 3892 cosine function;
#X obj 30 3919 math.cosh;
#X text 175 3919 hyperbolic cosine function;
#X obj 30 3946 math.e;
#X text 175 3946 mathematical constant \, base of the natural
logarithm;
#X obj 30 3973 math.exp;
#X text 175 3973 exponential functions;
#X obj 30 4000 math.exp2;
#X text 175 4000 exponential functions;
#X obj 30 4027 math.floor;
#X text 175 4027 round to largest integral value not greater than x;
#X obj 30 4054 math.inf;
#X text 175 4054 infinity value that cannot be represented accurately;
#X obj 30 4081 math.log;
#X text 175 4081 logarithm functions;
#X obj 30 4108 math.log10;
#X text 175 4108 logarithm functions;
#X obj 30 4135 math.log2;
#X text 175 4135 logarithm functions;
#X obj 30 4162 math.nan;
#X text 175 4162 Not a Number \, unrepresentable value;
#X obj 30 4189 math.neg;
#X text 175 4189 negate function;
#X obj 30 4216 math.pi;
#X text 175 4216 mathematical constant;
#X obj 30 4243 math.reciprocal;
#X text 175 4243 calculate reciprocal number;
#X obj 30 4270 math.round;
#X text 175 4270 round to integral value \, regardless of rounding
direction;
#X obj 30 4297 math.sign;
#X text 175 4297 sign function;
#X obj 30 4324 math.sin;
#X text 175 4324 sine function;
#X obj 30 4351 math.sinh;
#X text 175 4351 hyperbolic sine function;
#X obj 30 4378 math.sqrt;
#X text 175 4378 square root function;
#X obj 30 4405 math.squared;
#X text 175 4405 value square;
#X obj 30 4432 math.tan;
#X text 175 4432 tangent function;
#X obj 30 4459 math.tanh;
#X text 175 4459 hyperbolic tangent function;
#X obj 30 4486 math.trunc;
#X text 175 4486 truncate to integer value;
#X obj 20 4513 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4554 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4565 msg;
#X text 175 4565 message constructor;
#X obj 20 4592 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4633 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4644 noise.pink~;
#X text 175 4644 Pink noise generator;
#X obj 30 4671 noise.white~;
#X text 175 4671 White noise generator;
#X obj 20 4698 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4739 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4750 osc.impulse~;
#X text 175 4750 Bandlimited impulse train generator;
#X obj 30 4777 osc.pulse~;
#X text 175 4777 Bandlimited pulse train oscillator.;
#X obj 30 4804 osc.saw~;
#X text 175 4804 Bandlimited saw wave oscillator;
#X obj 30 4831 osc.sinfb~;
#X text 175 4831 sine oscilator with feedback;
#X obj 30 4858 osc.square~;
#X text 175 4858 Bandlimited square wave oscillator;
#X obj 30 4885 osc.tri~;
#X text 175 4885 Bandlimited triangle wave oscillator;
#X obj 20 4912 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4953 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4964 pass.changed;
#X text 175 4964 rejects redundant input values;
#X obj 30 4991 pass.if;
#X text 175 4991 pass values that accepted by predicate object;
#X obj 30 5018 pass.this;
#X text 175 5018 pass only specified values;
#X obj 20 5045 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 5086 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5097 path.basename;
#X text 175 5097 outputs filename portion of pathname;
#X obj 30 5124 path.dirname;
#X text 175 5124 outputs directory portion of pathname;
#X obj 20 5151 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5192 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5203 is_any;
#X text 175 5203 checks if input data has *any* type;
#X obj 30 5230 is_bang;
#X text 175 5230 checks if input data has *bang* type;
#X obj 30 5257 is_even;
#X text 175 5257 checks if input number is even;
#X obj 30 5284 is_float;
#X text 175 5284 checks if input data has *float* type;
#X obj 30 5311 is_list;
#X text 175 5311 checks if input data has *list* type;
#X obj 30 5338 is_odd;
#X text 175 5338 checks if input number is odd;
#X obj 30 5365 is_pointer;
#X text 175 5365 checks if input data has *pointer* type;
#X obj 30 5392 is_symbol;
#X text 175 5392 checks if input data has *symbol* type;
#X obj 20 5419 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5460 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5471 prop.get;
#X text 175 5471 Property extractor;
#X obj 30 5498 prop.set;
#X text 175 5498 Property injector;
#X obj 20 5525 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5566 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5577 random.int;
#X text 175 5577 Random integer generator in specified range;
#X obj 20 5604 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5645 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5656 reject.if;
#X text 175 5656 reject values by predicate;
#X obj 30 5683 reject.this;
#X text 175 5683 reject only specified values;
#X obj 20 5710 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5751 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5762 snd.file;
#X text 175 5762 Sound file loader on steroids;
#X obj 20 5789 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5830 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5841 symbol.equal;
#X text 175 5841 check symbols for equality;
#X obj 30 5868 symbol.length;
#X text 175 5868 number of characters in symbol (unicode supported);
#X obj 20 5895 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 5936 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5947 system.getenv;
#X text 175 5947 Get system environment variables;
#X obj 30 5974 system.hostname;
#X text 175 5974 outputs system hostname;
#X obj 30 6001 system.memsize;
#X text 175 6001 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 6038 system.memused;
#X text 175 6038 returns the process physical memory use - current and
peak;
#X obj 30 6065 system.screen_size;
#X text 175 6065 returns current screen size in pixels;
#X obj 20 6092 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6133 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6147 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6144 A bang... that's all;
#X obj 30 6170 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6167 Breakpoint function GUI object;
#X obj 30 6193 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6190 Display GUI object;
#X obj 30 6216 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6213 keyboard widget;
#X obj 30 6239 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6236 knob widget;
#X obj 30 6262 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6259 The matrix of toggles has you.;
#X obj 30 6285 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6282 Scope GUI object;
#X obj 30 6308 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6305 2D slider widget;
#X obj 30 6331 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6328 Multiple slider widget;
#X obj 30 6354 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6351 Spectroscope GUI object;
#X obj 30 6377 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6374 modern toggle widget;
#X obj 20 6397 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6438 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6449 vector.distance;
#X text 175 6449 returns euclidean distance between two points;
#X obj 30 6476 vector.dot;
#X text 175 6476 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6527 vector.length;
#X text 175 6527 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6564 vector.normalize;
#X text 175 6564 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6591 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6591 version: v0.2 \, license: GPL3;
#X obj 20 6610 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;