#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 array.copy;
#X text 175 153 copy samples from one array to another;
#X obj 30 180 array.do;
#X text 175 180 iterate and modify array content via side-chain;
#X obj 30 207 array.each;
#X text 175 207 process each array elements via side-chain;
#X obj 30 234 array.fill;
#X text 175 234 fill array with single value or pattern;
#X obj 30 261 array.minmax;
#X text 175 261 find array min and max element value;
#X obj 20 288 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 329 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 343 ui.link @title [function] @url function-help.pd;
#X text 175 340 named function;
#X obj 30 363 function.call;
#X text 175 363 call named function;
#X obj 20 390 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 431 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 442 array.p2s;
#X text 175 442 convert array phase [0\..1] to sample position;
#X obj 30 469 array.s2p;
#X text 175 469 convert array sample position to relative phase
position [0\..1];
#X obj 30 506 conv.bpm2hz;
#X text 175 506 converts BPM to frequency in herz;
#X obj 30 533 conv.bpm2ms;
#X text 175 533 convert frequency in BPM to period in milliseconds;
#X obj 30 560 conv.bpm2sec;
#X text 175 560 convert frequency in BPM to period in seconds;
#X obj 30 587 conv.lin2curve;
#X text 175 587 map linear to exponential range with 0 allowed.;
#X obj 30 614 conv.lin2exp;
#X text 175 614 maps linear range to exponential range;
#X obj 30 641 conv.lin2lin;
#X text 175 641 convert from one linear range to another;
#X obj 30 668 conv.sec2str;
#X text 175 668 converts float time in seconds to formated symbol;
#X obj 30 695 conv.str2sec;
#X text 175 695 converts formatted time to float value in seconds;
#X obj 20 722 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 763 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 774 data.fifo;
#X text 175 774 First-In-First-Out (FIFO) queue data container;
#X obj 30 801 data.list;
#X text 175 801 list container;
#X obj 20 828 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 869 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 880 dyn.comp2~;
#X text 175 880 stereo dynamic range compressor;
#X obj 30 907 dyn.comp~;
#X text 175 907 mono dynamic range compressors;
#X obj 30 934 dyn.gate2~;
#X text 175 934 stereo signal gate;
#X obj 30 961 dyn.gate~;
#X text 175 961 mono signal gate;
#X obj 30 988 dyn.limit2~;
#X text 175 988 stereo 1176LN Peak Limiter;
#X obj 30 1015 dyn.limit~;
#X text 175 1015 mono 1176LN Peak Limiter;
#X obj 30 1042 dyn.softclip~;
#X text 175 1042 soft signal clip;
#X obj 20 1069 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 1110 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1121 env.adsr~;
#X text 175 1121 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 1148 env.ar~;
#X text 175 1148 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 1185 env.follow~;
#X text 175 1185 Envelope follower with independent attack and release
times.;
#X obj 20 1222 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 1263 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1274 expand_env;
#X text 175 1274 Substitute enviroment variables in data stream;
#X obj 30 1301 flow.change;
#X text 175 1301 rejects redundant input values;
#X obj 30 1328 flow.pass;
#X text 175 1328 pass specified values;
#X obj 30 1355 flow.pass_if;
#X text 175 1355 pass values that accepted by predicate object;
#X obj 30 1382 flow.reject;
#X text 175 1382 reject specified values;
#X obj 30 1409 flow.reject_if;
#X text 175 1409 reject values by predicate;
#X obj 30 1436 flow.split;
#X text 175 1436 split data flow by external side-chain predicate;
#X obj 30 1463 flow.sync;
#X text 175 1463 bus with only hot inlets;
#X obj 30 1490 replace;
#X text 175 1490 Replace atoms in data stream;
#X obj 20 1517 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1558 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1569 flt.biquad~;
#X text 175 1569 second order IIR filter.;
#X obj 30 1596 flt.bpf12~;
#X text 175 1596 Band-pass filter with 12/db per octave slope;
#X obj 30 1623 flt.bpf24~;
#X text 175 1623 Band-pass filter with 24/db per octave slope;
#X obj 30 1650 flt.c_bpf~;
#X text 175 1650 BPF coefficent calculator for biquad filter;
#X obj 30 1677 flt.c_highshelf~;
#X text 175 1677 Highshelf filter coefficent calculator for biquad;
#X obj 30 1704 flt.c_hpf~;
#X text 175 1704 HPF coefficent calculator for biquad filter;
#X obj 30 1731 flt.c_lowshelf~;
#X text 175 1731 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1758 flt.c_lpf~;
#X text 175 1758 LPF coefficent calculator for biquad filter;
#X obj 30 1785 flt.c_notch~;
#X text 175 1785 Band-reject coefficent calculator for biquad filter;
#X obj 30 1812 flt.c_peak~;
#X text 175 1812 Peaking equalizer calculator for biquad.;
#X obj 30 1839 flt.dcblock2~;
#X text 175 1839 stereo DC blocker;
#X obj 30 1866 flt.dcblock~;
#X text 175 1866 mono DC blocker;
#X obj 30 1893 flt.eq_peak~;
#X text 175 1893 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1944 flt.highshelf~;
#X text 175 1944 gain boost|cut above some frequency;
#X obj 30 1971 flt.hpf12~;
#X text 175 1971 High-pass filter with 12/db per octave slope;
#X obj 30 1998 flt.hpf24~;
#X text 175 1998 High-pass filter with 24/db per octave slope;
#X obj 30 2025 flt.lowshelf~;
#X text 175 2025 gain boost|cut below some frequency;
#X obj 30 2052 flt.lpf12~;
#X text 175 2052 Low-pass filter with 12/db per octave slope;
#X obj 30 2079 flt.lpf24~;
#X text 175 2079 Low-pass filter with 24/db per octave slope;
#X obj 30 2106 flt.notch~;
#X text 175 2106 band-rejection filter;
#X obj 30 2133 flt.resonbp~;
#X text 175 2133 Simple resonant bandpass filter;
#X obj 20 2160 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 2201 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2212 fx.distortion~;
#X text 175 2212 cubic nonlinearity distortion;
#X obj 30 2239 fx.flanger~;
#X text 175 2239 mono flanging effect;
#X obj 30 2266 fx.freeverb2~;
#X text 175 2266 freeverb2 - stereo version of freeverb;
#X obj 30 2293 fx.freeverb~;
#X text 175 2293 freeverb - common used open-source reverb;
#X obj 30 2320 fx.freqshift~;
#X text 175 2320 frequency shifter or single-sideband ring modulation;
#X obj 30 2347 fx.pitchshift~;
#X text 175 2347 simple pitch shifter based on 2 delay lines;
#X obj 30 2374 fx.zita_rev1~;
#X text 175 2374 Zita stereo reverb;
#X obj 20 2401 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2442 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2453 global.float;
#X text 175 2453 global named float object;
#X obj 30 2480 global.int;
#X text 175 2480 global named integer object;
#X obj 30 2507 global.list;
#X text 175 2507 global named list object;
#X obj 20 2534 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2575 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2586 lfo.impulse~;
#X text 175 2586 Unit-amplitude low-frequency impulse train;
#X obj 30 2613 lfo.square~;
#X text 175 2613 Positive low frequence square wave;
#X obj 30 2640 lfo.tri~;
#X text 175 2640 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2667 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2708 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2719 list.all_of;
#X text 175 2719 checks if all list atoms accepted by predicate;
#X obj 30 2746 list.any_of;
#X text 175 2746 checks if at least one list element is accepted by
predicate;
#X obj 30 2783 list.apply_to;
#X text 175 2783 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2820 list.at;
#X text 175 2820 returns list element at given position;
#X obj 30 2847 list.choice;
#X text 175 2847 returns random element from list;
#X obj 30 2874 list.count;
#X text 175 2874 returns the number of items that equal to specified
value;
#X obj 30 2901 list.count_if;
#X text 175 2901 returns the number of items that satisfy to external
predicate.;
#X obj 30 2938 list.deinterleave;
#X text 175 2938 splits list to N lists \, each to separate output;
#X obj 30 2965 list.delta;
#X text 175 2965 returns the difference between the current list of
floats and the previous one.;
#X obj 30 3002 list.each;
#X text 175 3002 maps each list value via external object(s);
#X obj 30 3029 list.equal;
#X text 175 3029 checks if given lists are equal;
#X obj 30 3056 list.first;
#X text 175 3056 returns first list element;
#X obj 30 3083 list.gen;
#X text 175 3083 generates list of specified length via external
generator;
#X obj 30 3110 list.integrator;
#X text 175 3110 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 3147 list.interleave;
#X text 175 3147 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 3198 list.last;
#X text 175 3198 returns last list element;
#X obj 30 3225 list.length;
#X text 175 3225 returns the number of atoms in the message;
#X obj 30 3252 list.max;
#X text 175 3252 returns largest element in the list;
#X obj 30 3279 list.mean;
#X text 175 3279 calculates average of list of floats;
#X obj 30 3306 list.min;
#X text 175 3306 returns smallest element in the list;
#X obj 30 3333 list.none_of;
#X text 175 3333 checks if none of list atoms is accepted by
predicate;
#X obj 30 3360 list.normalize;
#X text 175 3360 normalizes float list values to get their sum = 1.0;
#X obj 30 3387 list.product;
#X text 175 3387 calculates product of floats in list;
#X obj 30 3414 list.range;
#X text 175 3414 returns list smallest and largest value;
#X obj 30 3441 list.reduce;
#X text 175 3441 apply function of two arguments cumulatively to the
list;
#X obj 30 3468 list.remove_if;
#X text 175 3468 remove elements by predicate;
#X obj 30 3495 list.resize;
#X text 175 3495 changes list size with;
#X obj 30 3522 list.reverse;
#X text 175 3522 reverses the order of the elements in the list;
#X obj 30 3549 list.seq;
#X text 175 3549 numeric sequence list generator;
#X obj 30 3576 list.shuffle;
#X text 175 3576 randomly rearranges elements in list;
#X obj 30 3603 list.sort;
#X text 175 3603 sorts list values by ascending order;
#X obj 30 3630 list.sum;
#X text 175 3630 calculates sum of floats in list;
#X obj 30 3657 list.unpack;
#X text 175 3657 sends list element one by one separately;
#X obj 30 3684 list.unwrap;
#X text 175 3684 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3721 list.walk;
#X text 175 3721 Walks thru the list;
#X obj 30 3748 list.wrap;
#X text 175 3748 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3799 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3840 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3851 live.capture~;
#X text 175 3851 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3888 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3929 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3940 math.abs;
#X text 175 3940 absolute value function;
#X obj 30 3967 math.acos;
#X text 175 3967 arc cosine function;
#X obj 30 3994 math.acosh;
#X text 175 3994 inverse hyperbolic cosine function;
#X obj 30 4021 math.and;
#X text 175 4021 operation AND for multiple arguments;
#X obj 30 4048 math.approx;
#X text 175 4048 check if input value approximately equal to pattern;
#X obj 30 4075 math.asin;
#X text 175 4075 arc sine function;
#X obj 30 4102 math.asinh;
#X text 175 4102 inverse hyperbolic sine function;
#X obj 30 4129 math.atan;
#X text 175 4129 arc tangent function;
#X obj 30 4156 math.atanh;
#X text 175 4156 inverse hyperbolic tangent function;
#X obj 30 4183 math.cbrt;
#X text 175 4183 cube root function;
#X obj 30 4210 math.ceil;
#X text 175 4210 round to smallest integral value not less than input
value;
#X obj 30 4237 math.cos;
#X text 175 4237 cosine function;
#X obj 30 4264 math.cosh;
#X text 175 4264 hyperbolic cosine function;
#X obj 30 4291 math.e;
#X text 175 4291 mathematical constant \, base of the natural
logarithm;
#X obj 30 4318 math.exp;
#X text 175 4318 exponential functions;
#X obj 30 4345 math.exp2;
#X text 175 4345 exponential functions;
#X obj 30 4372 math.floor;
#X text 175 4372 round to largest integral value not greater than x;
#X obj 30 4399 math.inf;
#X text 175 4399 infinity value that cannot be represented accurately;
#X obj 30 4426 math.log;
#X text 175 4426 logarithm functions;
#X obj 30 4453 math.log10;
#X text 175 4453 logarithm functions;
#X obj 30 4480 math.log2;
#X text 175 4480 logarithm functions;
#X obj 30 4507 math.nan;
#X text 175 4507 Not a Number \, unrepresentable value;
#X obj 30 4534 math.neg;
#X text 175 4534 negate function;
#X obj 30 4561 math.pi;
#X text 175 4561 mathematical constant;
#X obj 30 4588 math.reciprocal;
#X text 175 4588 calculate reciprocal number;
#X obj 30 4615 math.round;
#X text 175 4615 round to integral value \, regardless of rounding
direction;
#X obj 30 4642 math.sign;
#X text 175 4642 sign function;
#X obj 30 4669 math.sin;
#X text 175 4669 sine function;
#X obj 30 4696 math.sinh;
#X text 175 4696 hyperbolic sine function;
#X obj 30 4723 math.sqrt;
#X text 175 4723 square root function;
#X obj 30 4750 math.squared;
#X text 175 4750 value square;
#X obj 30 4777 math.tan;
#X text 175 4777 tangent function;
#X obj 30 4804 math.tanh;
#X text 175 4804 hyperbolic tangent function;
#X obj 30 4831 math.trunc;
#X text 175 4831 truncate to integer value;
#X obj 20 4858 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4899 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4910 msg;
#X text 175 4910 message constructor;
#X obj 20 4937 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4978 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4989 noise.pink~;
#X text 175 4989 Pink noise generator;
#X obj 30 5016 noise.white~;
#X text 175 5016 White noise generator;
#X obj 20 5043 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 5084 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5095 osc.impulse~;
#X text 175 5095 Bandlimited impulse train generator;
#X obj 30 5122 osc.pulse~;
#X text 175 5122 Bandlimited pulse train oscillator.;
#X obj 30 5149 osc.saw~;
#X text 175 5149 Bandlimited saw wave oscillator;
#X obj 30 5176 osc.sinfb~;
#X text 175 5176 sine oscilator with feedback;
#X obj 30 5203 osc.square~;
#X text 175 5203 Bandlimited square wave oscillator;
#X obj 30 5230 osc.tri~;
#X text 175 5230 Bandlimited triangle wave oscillator;
#X obj 20 5257 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 5298 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5309 path.basename;
#X text 175 5309 outputs filename portion of pathname;
#X obj 30 5336 path.dirname;
#X text 175 5336 outputs directory portion of pathname;
#X obj 20 5363 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5404 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5415 is_any;
#X text 175 5415 checks if input data has *any* type;
#X obj 30 5442 is_bang;
#X text 175 5442 checks if input data has *bang* type;
#X obj 30 5469 is_even;
#X text 175 5469 checks if input number is even;
#X obj 30 5496 is_float;
#X text 175 5496 checks if input data has *float* type;
#X obj 30 5523 is_list;
#X text 175 5523 checks if input data has *list* type;
#X obj 30 5550 is_odd;
#X text 175 5550 checks if input number is odd;
#X obj 30 5577 is_pointer;
#X text 175 5577 checks if input data has *pointer* type;
#X obj 30 5604 is_symbol;
#X text 175 5604 checks if input data has *symbol* type;
#X obj 20 5631 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5672 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5683 prop.get;
#X text 175 5683 Property extractor;
#X obj 30 5710 prop.set;
#X text 175 5710 Property injector;
#X obj 20 5737 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5778 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5789 random.int;
#X text 175 5789 Random integer generator in specified range;
#X obj 20 5816 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5857 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5868 snd.file;
#X text 175 5868 Sound file loader on steroids;
#X obj 20 5895 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5936 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5947 symbol.equal;
#X text 175 5947 check symbols for equality;
#X obj 30 5974 symbol.length;
#X text 175 5974 number of characters in symbol (unicode supported);
#X obj 20 6001 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 6042 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6053 system.getenv;
#X text 175 6053 Get system environment variables;
#X obj 30 6080 system.hostname;
#X text 175 6080 outputs system hostname;
#X obj 30 6107 system.memsize;
#X text 175 6107 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 6144 system.memused;
#X text 175 6144 returns the process physical memory use - current and
peak;
#X obj 30 6171 system.screen_size;
#X text 175 6171 returns current screen size in pixels;
#X obj 20 6198 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6239 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6253 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6250 A bang... that's all;
#X obj 30 6276 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6273 Breakpoint function GUI object;
#X obj 30 6299 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6296 Display GUI object;
#X obj 30 6322 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6319 keyboard widget;
#X obj 30 6345 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6342 knob widget;
#X obj 30 6368 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6365 The matrix of toggles has you.;
#X obj 30 6391 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6388 Scope GUI object;
#X obj 30 6414 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6411 2D slider widget;
#X obj 30 6437 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6434 Multiple slider widget;
#X obj 30 6460 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6457 Spectroscope GUI object;
#X obj 30 6483 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6480 modern toggle widget;
#X obj 20 6503 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6544 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6555 vector.distance;
#X text 175 6555 returns euclidean distance between two points;
#X obj 30 6582 vector.dot;
#X text 175 6582 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6633 vector.length;
#X text 175 6633 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6670 vector.normalize;
#X text 175 6670 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6697 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6697 version: v0.2 \, license: GPL3;
#X obj 20 6716 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;