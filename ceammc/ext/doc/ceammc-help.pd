#N canvas 0 0 715 500 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 101 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 142 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 153 approx;
#X text 175 153 check if input value approximately equal to pattern;
#X obj 20 180 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933 0;
#X obj 20 221 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 232 conv.bpm2hz;
#X text 175 232 converts BPM to frequency in herz;
#X obj 30 259 conv.bpm2ms;
#X text 175 259 convert frequency in BPM to period in milliseconds;
#X obj 30 286 conv.bpm2sec;
#X text 175 286 convert frequency in BPM to period in seconds;
#X obj 30 313 conv.lin2curve;
#X text 175 313 map linear to exponential range with 0 allowed.;
#X obj 30 340 conv.lin2exp;
#X text 175 340 maps linear range to exponential range;
#X obj 30 367 conv.lin2lin;
#X text 175 367 convert from one linear range to another;
#X obj 30 394 conv.sec2str;
#X text 175 394 converts float time in seconds to formated symbol;
#X obj 30 421 conv.str2sec;
#X text 175 421 converts formatted time to float value in seconds;
#X obj 20 448 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933 0;
#X obj 20 489 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 500 data.fifo;
#X text 175 500 First-In-First-Out (FIFO) queue data container;
#X obj 30 527 data.list;
#X text 175 527 list container;
#X obj 20 554 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 595 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 606 dyn.comp2~;
#X text 175 606 stereo dynamic range compressor;
#X obj 30 633 dyn.comp~;
#X text 175 633 mono dynamic range compressors;
#X obj 30 660 dyn.gate2~;
#X text 175 660 stereo signal gate;
#X obj 30 687 dyn.gate~;
#X text 175 687 mono signal gate;
#X obj 30 714 dyn.limit2~;
#X text 175 714 stereo 1176LN Peak Limiter;
#X obj 30 741 dyn.limit~;
#X text 175 741 mono 1176LN Peak Limiter;
#X obj 30 768 dyn.softclip~;
#X text 175 768 soft signal clip;
#X obj 20 795 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 836 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 847 env.adsr~;
#X text 175 847 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 874 env.ar~;
#X text 175 874 AR (Attack \, Release) envelope generator (useful to
create percussion envelopes).;
#X obj 30 911 env.follow~;
#X text 175 911 Envelope follower with independent attack and release
times.;
#X obj 20 948 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933 0;
#X obj 20 989 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1000 expand_env;
#X text 175 1000 Substitute enviroment variables in data stream;
#X obj 30 1027 flow.sync;
#X text 175 1027 bus with only hot inlets;
#X obj 30 1054 replace;
#X text 175 1054 Replace atoms in data stream;
#X obj 20 1081 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 1122 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1133 flt.biquad~;
#X text 175 1133 second order IIR filter.;
#X obj 30 1160 flt.bpf12~;
#X text 175 1160 Band-pass filter with 12/db per octave slope;
#X obj 30 1187 flt.bpf24~;
#X text 175 1187 Band-pass filter with 24/db per octave slope;
#X obj 30 1214 flt.c_bpf~;
#X text 175 1214 BPF coefficent calculator for biquad filter;
#X obj 30 1241 flt.c_highshelf~;
#X text 175 1241 Highshelf filter coefficent calculator for biquad;
#X obj 30 1268 flt.c_hpf~;
#X text 175 1268 HPF coefficent calculator for biquad filter;
#X obj 30 1295 flt.c_lowshelf~;
#X text 175 1295 Lowshelf filter coefficent calculator for biquad;
#X obj 30 1322 flt.c_lpf~;
#X text 175 1322 LPF coefficent calculator for biquad filter;
#X obj 30 1349 flt.c_notch~;
#X text 175 1349 Band-reject coefficent calculator for biquad filter;
#X obj 30 1376 flt.c_peak~;
#X text 175 1376 Peaking equalizer calculator for biquad.;
#X obj 30 1403 flt.dcblock2~;
#X text 175 1403 stereo DC blocker;
#X obj 30 1430 flt.dcblock~;
#X text 175 1430 mono DC blocker;
#X obj 30 1457 flt.eq_peak~;
#X text 175 1457 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer"
section.;
#X obj 30 1508 flt.highshelf~;
#X text 175 1508 gain boost|cut above some frequency;
#X obj 30 1535 flt.hpf12~;
#X text 175 1535 High-pass filter with 12/db per octave slope;
#X obj 30 1562 flt.hpf24~;
#X text 175 1562 High-pass filter with 24/db per octave slope;
#X obj 30 1589 flt.lowshelf~;
#X text 175 1589 gain boost|cut below some frequency;
#X obj 30 1616 flt.lpf12~;
#X text 175 1616 Low-pass filter with 12/db per octave slope;
#X obj 30 1643 flt.lpf24~;
#X text 175 1643 Low-pass filter with 24/db per octave slope;
#X obj 30 1670 flt.notch~;
#X text 175 1670 band-rejection filter;
#X obj 30 1697 flt.resonbp~;
#X text 175 1697 Simple resonant bandpass filter;
#X obj 20 1724 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 1765 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1776 fx.distortion~;
#X text 175 1776 cubic nonlinearity distortion;
#X obj 30 1803 fx.flanger~;
#X text 175 1803 mono flanging effect;
#X obj 30 1830 fx.freeverb2~;
#X text 175 1830 freeverb2 - stereo version of freeverb;
#X obj 30 1857 fx.freeverb~;
#X text 175 1857 freeverb - common used open-source reverb;
#X obj 30 1884 fx.freqshift~;
#X text 175 1884 frequency shifter or single-sideband ring modulation;
#X obj 30 1911 fx.pitchshift~;
#X text 175 1911 simple pitch shifter based on 2 delay lines;
#X obj 30 1938 fx.zita_rev1~;
#X text 175 1938 Zita stereo reverb;
#X obj 20 1965 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 2006 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2017 global.float;
#X text 175 2017 global named float object;
#X obj 30 2044 global.int;
#X text 175 2044 global named integer object;
#X obj 30 2071 global.list;
#X text 175 2071 global named list object;
#X obj 20 2098 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 2139 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2150 lfo.impulse~;
#X text 175 2150 Unit-amplitude low-frequency impulse train;
#X obj 30 2177 lfo.square~;
#X text 175 2177 Positive low frequence square wave;
#X obj 30 2204 lfo.tri~;
#X text 175 2204 Positive unit-amplitude low frequency triangle wave;
#X obj 20 2231 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 2272 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2283 list.all_of;
#X text 175 2283 checks if all list atoms accepted by predicate;
#X obj 30 2310 list.any_of;
#X text 175 2310 checks if at least one list element is accepted by
predicate;
#X obj 30 2347 list.apply_to;
#X text 175 2347 modifies list value at specified position \,
filtering it via external object.;
#X obj 30 2384 list.at;
#X text 175 2384 returns list element at given position;
#X obj 30 2411 list.choice;
#X text 175 2411 returns random element from list;
#X obj 30 2438 list.count;
#X text 175 2438 returns the number of items that equal to specified
value;
#X obj 30 2465 list.count_if;
#X text 175 2465 returns the number of items that satisfy to external
predicate.;
#X obj 30 2502 list.deinterleave;
#X text 175 2502 splits list to N lists \, each to separate output;
#X obj 30 2529 list.delta;
#X text 175 2529 returns the difference between the current list of
floats and the previous one.;
#X obj 30 2566 list.each;
#X text 175 2566 maps each list value via external object(s);
#X obj 30 2593 list.equal;
#X text 175 2593 checks if given lists are equal;
#X obj 30 2620 list.first;
#X text 175 2620 returns first list element;
#X obj 30 2647 list.gen;
#X text 175 2647 generates list of specified length via external
generator;
#X obj 30 2674 list.integrator;
#X text 175 2674 returns the sum of the previously stored list and the
current one then stores this sum.;
#X obj 30 2711 list.interleave;
#X text 175 2711 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2
list2-2 etc.).;
#X obj 30 2762 list.last;
#X text 175 2762 returns last list element;
#X obj 30 2789 list.length;
#X text 175 2789 returns the number of atoms in the message;
#X obj 30 2816 list.max;
#X text 175 2816 returns largest element in the list;
#X obj 30 2843 list.mean;
#X text 175 2843 calculates average of list of floats;
#X obj 30 2870 list.min;
#X text 175 2870 returns smallest element in the list;
#X obj 30 2897 list.none_of;
#X text 175 2897 checks if none of list atoms is accepted by
predicate;
#X obj 30 2924 list.normalize;
#X text 175 2924 normalizes float list values to get their sum = 1.0;
#X obj 30 2951 list.product;
#X text 175 2951 calculates product of floats in list;
#X obj 30 2978 list.range;
#X text 175 2978 returns list smallest and largest value;
#X obj 30 3005 list.reduce;
#X text 175 3005 apply function of two arguments cumulatively to the
list;
#X obj 30 3032 list.remove_if;
#X text 175 3032 remove elements by predicate;
#X obj 30 3059 list.resize;
#X text 175 3059 changes list size with;
#X obj 30 3086 list.reverse;
#X text 175 3086 reverses the order of the elements in the list;
#X obj 30 3113 list.seq;
#X text 175 3113 numeric sequence list generator;
#X obj 30 3140 list.shuffle;
#X text 175 3140 randomly rearranges elements in list;
#X obj 30 3167 list.sort;
#X text 175 3167 sorts list values by ascending order;
#X obj 30 3194 list.sum;
#X text 175 3194 calculates sum of floats in list;
#X obj 30 3221 list.unpack;
#X text 175 3221 sends list element one by one separately;
#X obj 30 3248 list.unwrap;
#X text 175 3248 gets list element on first input and list with count
of each element on a second inlet.;
#X obj 30 3285 list.walk;
#X text 175 3285 Walks thru the list;
#X obj 30 3312 list.wrap;
#X text 175 3312 filters repeated elements of the list and outputs
unique elements on first outlet \, outputs the count of elements on
second.;
#X obj 20 3363 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 3404 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3415 live.capture~;
#X text 175 3415 record up to 8s of sound and playback the recorded
sound in loop;
#X obj 20 3452 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 3493 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3504 math.abs;
#X text 175 3504 absolute value function;
#X obj 30 3531 math.acos;
#X text 175 3531 arc cosine function;
#X obj 30 3558 math.acosh;
#X text 175 3558 inverse hyperbolic cosine function;
#X obj 30 3585 math.and;
#X text 175 3585 operation AND for multiple arguments;
#X obj 30 3612 math.asin;
#X text 175 3612 arc sine function;
#X obj 30 3639 math.asinh;
#X text 175 3639 inverse hyperbolic sine function;
#X obj 30 3666 math.atan;
#X text 175 3666 arc tangent function;
#X obj 30 3693 math.atanh;
#X text 175 3693 inverse hyperbolic tangent function;
#X obj 30 3720 math.cbrt;
#X text 175 3720 cube root function;
#X obj 30 3747 math.ceil;
#X text 175 3747 round to smallest integral value not less than input
value;
#X obj 30 3774 math.cos;
#X text 175 3774 cosine function;
#X obj 30 3801 math.cosh;
#X text 175 3801 hyperbolic cosine function;
#X obj 30 3828 math.e;
#X text 175 3828 mathematical constant \, base of the natural
logarithm;
#X obj 30 3855 math.exp;
#X text 175 3855 exponential functions;
#X obj 30 3882 math.exp2;
#X text 175 3882 exponential functions;
#X obj 30 3909 math.floor;
#X text 175 3909 round to largest integral value not greater than x;
#X obj 30 3936 math.inf;
#X text 175 3936 infinity value that cannot be represented accurately;
#X obj 30 3963 math.log;
#X text 175 3963 logarithm functions;
#X obj 30 3990 math.log10;
#X text 175 3990 logarithm functions;
#X obj 30 4017 math.log2;
#X text 175 4017 logarithm functions;
#X obj 30 4044 math.nan;
#X text 175 4044 Not a Number \, unrepresentable value;
#X obj 30 4071 math.neg;
#X text 175 4071 negate function;
#X obj 30 4098 math.pi;
#X text 175 4098 mathematical constant;
#X obj 30 4125 math.reciprocal;
#X text 175 4125 calculate reciprocal number;
#X obj 30 4152 math.round;
#X text 175 4152 round to integral value \, regardless of rounding
direction;
#X obj 30 4179 math.sign;
#X text 175 4179 sign function;
#X obj 30 4206 math.sin;
#X text 175 4206 sine function;
#X obj 30 4233 math.sinh;
#X text 175 4233 hyperbolic sine function;
#X obj 30 4260 math.sqrt;
#X text 175 4260 square root function;
#X obj 30 4287 math.squared;
#X text 175 4287 value square;
#X obj 30 4314 math.tan;
#X text 175 4314 tangent function;
#X obj 30 4341 math.tanh;
#X text 175 4341 hyperbolic tangent function;
#X obj 30 4368 math.trunc;
#X text 175 4368 truncate to integer value;
#X obj 20 4395 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933 0;
#X obj 20 4436 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4447 msg;
#X text 175 4447 message constructor;
#X obj 20 4474 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 4515 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4526 noise.pink~;
#X text 175 4526 Pink noise generator;
#X obj 30 4553 noise.white~;
#X text 175 4553 White noise generator;
#X obj 20 4580 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933 0;
#X obj 20 4621 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4632 osc.impulse~;
#X text 175 4632 Bandlimited impulse train generator;
#X obj 30 4659 osc.pulse~;
#X text 175 4659 Bandlimited pulse train oscillator.;
#X obj 30 4686 osc.saw~;
#X text 175 4686 Bandlimited saw wave oscillator;
#X obj 30 4713 osc.sinfb~;
#X text 175 4713 sine oscilator with feedback;
#X obj 30 4740 osc.square~;
#X text 175 4740 Bandlimited square wave oscillator;
#X obj 30 4767 osc.tri~;
#X text 175 4767 Bandlimited triangle wave oscillator;
#X obj 20 4794 cnv 5 47 31 empty empty pass 4 13 0 17 -262144 -49933
0;
#X obj 20 4835 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4846 pass.changed;
#X text 175 4846 rejects redundant input values;
#X obj 30 4873 pass.if;
#X text 175 4873 pass values that accepted by predicate object;
#X obj 30 4900 pass.this;
#X text 175 4900 pass only specified values;
#X obj 20 4927 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 4968 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4979 path.basename;
#X text 175 4979 outputs filename portion of pathname;
#X obj 30 5006 path.dirname;
#X text 175 5006 outputs directory portion of pathname;
#X obj 20 5033 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 5074 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5085 is_any;
#X text 175 5085 checks if input data has *any* type;
#X obj 30 5112 is_bang;
#X text 175 5112 checks if input data has *bang* type;
#X obj 30 5139 is_even;
#X text 175 5139 checks if input number is even;
#X obj 30 5166 is_float;
#X text 175 5166 checks if input data has *float* type;
#X obj 30 5193 is_list;
#X text 175 5193 checks if input data has *list* type;
#X obj 30 5220 is_odd;
#X text 175 5220 checks if input number is odd;
#X obj 30 5247 is_pointer;
#X text 175 5247 checks if input data has *pointer* type;
#X obj 30 5274 is_symbol;
#X text 175 5274 checks if input data has *symbol* type;
#X obj 20 5301 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 5342 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5353 prop.get;
#X text 175 5353 Property extractor;
#X obj 30 5380 prop.set;
#X text 175 5380 Property injector;
#X obj 20 5407 cnv 5 67 31 empty empty random 4 13 0 17 -262144 -49933
0;
#X obj 20 5448 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5459 random.int;
#X text 175 5459 Random integer generator in specified range;
#X obj 20 5486 cnv 5 66 31 empty empty reject 4 13 0 17 -262144 -49933
0;
#X obj 20 5527 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5538 reject.if;
#X text 175 5538 reject values by predicate;
#X obj 30 5565 reject.this;
#X text 175 5565 reject only specified values;
#X obj 20 5592 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933 0;
#X obj 20 5633 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5644 snd.file;
#X text 175 5644 Sound file loader on steroids;
#X obj 20 5671 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144 -49933
0;
#X obj 20 5712 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5723 symbol.equal;
#X text 175 5723 check symbols for equality;
#X obj 30 5750 symbol.length;
#X text 175 5750 number of characters in symbol (unicode supported);
#X obj 20 5777 cnv 5 68 31 empty empty system 4 13 0 17 -262144 -49933
0;
#X obj 20 5818 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5829 system.getenv;
#X text 175 5829 Get system environment variables;
#X obj 30 5856 system.hostname;
#X text 175 5856 outputs system hostname;
#X obj 30 5883 system.memsize;
#X text 175 5883 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 5920 system.memused;
#X text 175 5920 returns the process physical memory use - current and
peak;
#X obj 30 5947 system.screen_size;
#X text 175 5947 returns current screen size in pixels;
#X obj 20 5974 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 6015 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6029 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 175 6026 A bang... that's all;
#X obj 30 6052 ui.link @title [ui.bpfunc] @url ui.bpfunc-help.pd;
#X text 175 6049 Breakpoint function GUI object;
#X obj 30 6075 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 175 6072 Display GUI object;
#X obj 30 6098 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 175 6095 keyboard widget;
#X obj 30 6121 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 175 6118 knob widget;
#X obj 30 6144 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 175 6141 The matrix of toggles has you.;
#X obj 30 6167 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 175 6164 Scope GUI object;
#X obj 30 6190 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 175 6187 2D slider widget;
#X obj 30 6213 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 175 6210 Multiple slider widget;
#X obj 30 6236 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 175 6233 Spectroscope GUI object;
#X obj 30 6259 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 175 6256 modern toggle widget;
#X obj 20 6279 cnv 5 69 31 empty empty vector 4 13 0 17 -262144 -49933
0;
#X obj 20 6320 cnv 1 685 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6331 vector.distance;
#X text 175 6331 returns euclidean distance between two points;
#X obj 30 6358 vector.dot;
#X text 175 6358 treats list of floats as vector \, returns the dot
product (sum of the elements of two lists with same indexes
multiplied).;
#X obj 30 6409 vector.length;
#X text 175 6409 treats list of floats as vector \, returns vector
length: sqrt(element(1)^2 + ...element(n)^2).;
#X obj 30 6446 vector.normalize;
#X text 175 6446 returns normalized vector;
#X obj 1 1 cnv 5 712 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 6473 cnv 5 712 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 6473 version: v0.1 \, license: GPL3;
#X obj 20 6492 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;